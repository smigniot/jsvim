// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var functionPointers = new Array(0);

function addFunction(func) {
  for (var i = 0; i < functionPointers.length; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return 2*(1 + i);
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[(index-2)/2] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2) { console.log("TPUTS",UTF8ToString($0),$1,$2); },
 function($0, $1) { console.log("TGETSTR",UTF8ToString($0),"=", (0==$1)?"NULL":UTF8ToString($1)); },
 function($0) { return vim_kbgetc($0) },
 function($0) { console.log("SYS_INIT",$0); },
 function($0) { console.log("SYS_INIT","tty_open", $0); },
 function($0) { console.log("SYS_INIT","sys_startv", $0); },
 function($0) { console.log("SYS_INIT","done", $0); },
 function($0) { console.log("SYS_STARTV","start", $0); },
 function($0) { console.log("SYS_STARTV","TTY_startv",$0); },
 function($0) { console.log("SYS_STARTV","done", $0); },
 function($0) { console.log("MAIN","start",$0); },
 function($0) { console.log("MAINLOOP","start",$0); },
 function($0, $1) { console.log("NEWSIZE",$0,$1); },
 function($0) { console.log("TERM = ["+UTF8ToString($0)+"]"); },
 function($0) { console.log("TTY_OPEN done",Pointer_stringify($0)); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}



STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 21840;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall29(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pause
      return -ERRNO_CODES.EINTR; // we can't pause
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function (mount) {
        // Do not pollute the real root directory or its child nodes with pipes
        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createPipe:function () {
        var pipe = {
          buckets: []
        };
  
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0
        });
  
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
  
        rNode.pipe = pipe;
        wNode.pipe = pipe;
  
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: FS.modeStringToFlags('r'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        rNode.stream = readableStream;
  
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: FS.modeStringToFlags('w'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        wNode.stream = writableStream;
  
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd
        };
      },stream_ops:{poll:function (stream) {
          var pipe = stream.node.pipe;
  
          if ((stream.flags & 2097155) === 1) {
            return (256 | 4);
          } else {
            if (pipe.buckets.length > 0) {
              for (var i = 0; i < pipe.buckets.length; i++) {
                var bucket = pipe.buckets[i];
                if (bucket.offset - bucket.roffset > 0) {
                  return (64 | 1);
                }
              }
            }
          }
  
          return 0;
        },ioctl:function (stream, request, varargs) {
          return ERRNO_CODES.EINVAL;
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            // Behave as if the read end is always non-blocking
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          var toRead = Math.min(currentLength, length);
  
          var totalRead = toRead;
          var toRemove = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
  
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
  
          if (toRemove && toRemove == pipe.buckets.length) {
            // Do not generate excessive garbage in use cases such as
            // write several bytes, read everything, write several bytes, read everything...
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
  
          pipe.buckets.splice(0, toRemove);
  
          return totalRead;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
  
          var currBucket = null;
  
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
  
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
  
          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
  
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
  
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
  
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
  
          return dataLen;
        },close:function (stream) {
          var pipe = stream.node.pipe;
          pipe.buckets = null;
        }},nextname:function () {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return 'pipe[' + (PIPEFS.nextname.current++) + ']';
      }};function ___syscall42(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe
      var fdPtr = SYSCALLS.get();
  
      if (fdPtr == 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EFAULT);
      }
  
      var res = PIPEFS.createPipe();
  
      HEAP32[((fdPtr)>>2)]=res.readable_fd;
      HEAP32[(((fdPtr)+(4))>>2)]=res.writable_fd;
  
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }function _execvp() {
  return _execl.apply(null, arguments)
  }

  function _exit(status) {
      __exit(status);
    }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }



  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

   

  function _setitimer() {
      throw 'setitimer() is not implemented yet';
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
__ATINIT__.push(function() { PIPEFS.root = FS.mount(PIPEFS, {}, null); });;
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// All functions here should be maybeExported from jsifier.js

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
// All functions here should be maybeExported from jsifier.js

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall12": ___syscall12, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall183": ___syscall183, "___syscall20": ___syscall20, "___syscall221": ___syscall221, "___syscall29": ___syscall29, "___syscall3": ___syscall3, "___syscall33": ___syscall33, "___syscall40": ___syscall40, "___syscall41": ___syscall41, "___syscall42": ___syscall42, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__exit": __exit, "_abort": _abort, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_execl": _execl, "_execvp": _execvp, "_exit": _exit, "_fork": _fork, "_getenv": _getenv, "_kill": _kill, "_nanosleep": _nanosleep, "_setitimer": _setitimer, "_signal": _signal, "_usleep": _usleep, "_wait": _wait, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall10=env.___syscall10;
  var ___syscall12=env.___syscall12;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall183=env.___syscall183;
  var ___syscall20=env.___syscall20;
  var ___syscall221=env.___syscall221;
  var ___syscall29=env.___syscall29;
  var ___syscall3=env.___syscall3;
  var ___syscall33=env.___syscall33;
  var ___syscall40=env.___syscall40;
  var ___syscall41=env.___syscall41;
  var ___syscall42=env.___syscall42;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _execl=env._execl;
  var _execvp=env._execvp;
  var _exit=env._exit;
  var _fork=env._fork;
  var _getenv=env._getenv;
  var _kill=env._kill;
  var _nanosleep=env._nanosleep;
  var _setitimer=env._setitimer;
  var _signal=env._signal;
  var _usleep=env._usleep;
  var _wait=env._wait;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _chfree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4100]|0;
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 HEAP32[4100] = $4;
 STACKTOP = sp;return;
}
function _challoc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ralloc()|0);
 return ($0|0);
}
function _alloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $3 = $1;
 $4 = (_malloc($3)|0);
 $2 = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[4328]|0;
  $7 = $6 & 128;
  $8 = ($7|0)!=(0);
  if ($8) {
   _show_error(5948,$vararg_buffer);
  }
 }
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function _re_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_realloc($5,$6)|0);
 $4 = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[4328]|0;
  $10 = $9 & 128;
  $11 = ($10|0)!=(0);
  if ($11) {
   _show_error(5948,$vararg_buffer);
  }
 }
 $12 = $4;
 STACKTOP = sp;return ($12|0);
}
function _clr_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_calloc($5,$6)|0);
 $4 = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[4328]|0;
  $10 = $9 & 128;
  $11 = ($10|0)!=(0);
  if ($11) {
   _show_error(5948,$vararg_buffer);
  }
 }
 $12 = $4;
 STACKTOP = sp;return ($12|0);
}
function _strsave($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_strlen($3)|0);
 $5 = (($4) + 1)|0;
 $6 = (_alloc($5)|0);
 $2 = $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = $1;
  (_strcpy($9,$10)|0);
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _newline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $11 = 8;
 } else {
  $7 = $2;
  $8 = (($7) + 8)|0;
  $9 = (($8) - 1)|0;
  $10 = $9 & -8;
  $11 = $10;
 }
 $2 = $11;
 $12 = $2;
 $13 = (_alloc($12)|0);
 $4 = $13;
 $14 = $4;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 $16 = (_ralloc()|0);
 $3 = $16;
 $17 = ($16|0)==(0|0);
 $18 = $4;
 if ($17) {
  _free($18);
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 } else {
  HEAP8[$18>>0] = 0;
  $19 = $4;
  $20 = $3;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = $19;
  $22 = $2;
  $23 = $3;
  $24 = ((($23)) + 12|0);
  HEAP32[$24>>2] = $22;
  $25 = $3;
  HEAP32[$25>>2] = 0;
  $26 = $3;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = $3;
  $1 = $28;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _snewline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_ralloc()|0);
 $3 = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $6 = $2;
  $7 = $3;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = $6;
  $9 = $2;
  $10 = (_strlen($9)|0);
  $11 = (($10) + 1)|0;
  $12 = $3;
  $13 = ((($12)) + 12|0);
  HEAP32[$13>>2] = $11;
  $14 = $3;
  HEAP32[$14>>2] = 0;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = $3;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _bufempty() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4326]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[4326]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $18 = 0;
  $17 = $18&1;
  return ($17|0);
 }
 $9 = HEAP32[4326]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(0);
 $18 = $16;
 $17 = $18&1;
 return ($17|0);
}
function _endofline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + ($9)|0);
 $2 = $10;
 $11 = $2;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 if ($14) {
  $21 = 1;
  $20 = $21&1;
  STACKTOP = sp;return ($20|0);
 }
 $15 = $2;
 $16 = ((($15)) + 1|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)==(0);
 $21 = $19;
 $20 = $21&1;
 STACKTOP = sp;return ($20|0);
}
function _lnresize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $4;
 $12 = (($11) + 8)|0;
 $13 = (($12) - 1)|0;
 $14 = $13 & -8;
 $4 = $14;
 $15 = ($14|0)==(0);
 if ($15) {
  $2 = 1;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 $16 = $4;
 $17 = $7;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $2 = 1;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $4;
 $23 = $7;
 $24 = ($22>>>0)<($23>>>0);
 $25 = $5;
 $26 = ($25|0)!=(0|0);
 $or$cond = $24 & $26;
 do {
  if ($or$cond) {
   $27 = $5;
   $28 = $4;
   $29 = (_re_alloc($27,$28)|0);
   $6 = $29;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = $5;
    $6 = $31;
   }
  } else {
   $32 = $4;
   $33 = (_alloc($32)|0);
   $6 = $33;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   } else {
    $35 = $5;
    $36 = ($35|0)!=(0|0);
    if (!($36)) {
     break;
    }
    $37 = $6;
    $38 = $5;
    $39 = $7;
    $40 = (($39) - 1)|0;
    (_strncpy($37,$38,$40)|0);
    $41 = $6;
    $42 = $7;
    $43 = (($42) - 1)|0;
    $44 = (($41) + ($43)|0);
    HEAP8[$44>>0] = 0;
    $45 = $5;
    _free($45);
    break;
   }
  }
 } while(0);
 $46 = $6;
 $47 = $3;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $4;
 $50 = $3;
 $51 = ((($50)) + 12|0);
 HEAP32[$51>>2] = $49;
 $2 = 1;
 $52 = $2;
 STACKTOP = sp;return ($52|0);
}
function _grow_line($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $6;
  $13 = (_strlen($12)|0);
  $15 = $13;
 } else {
  $15 = 0;
 }
 $14 = (($15) + 1)|0;
 $16 = $4;
 $17 = (($14) + ($16))|0;
 $5 = $17;
 $18 = $5;
 $19 = $3;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)<=($21|0);
 if ($22) {
  $2 = 1;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 } else {
  $23 = $3;
  $24 = $5;
  $25 = (_lnresize($23,$24)|0);
  $2 = $25;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _throw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $1;
   $10 = ((($9)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   _free($11);
  }
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
  $15 = HEAP32[4100]|0;
  $16 = $1;
  HEAP32[$16>>2] = $15;
  $17 = $1;
  HEAP32[4100] = $17;
  $18 = $2;
  $1 = $18;
 }
 STACKTOP = sp;return;
}
function _ralloc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[4100]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[4328]|0;
  $2 = $5;
  $6 = HEAP32[4328]|0;
  $7 = $6 & -129;
  HEAP32[4328] = $7;
  $8 = (_alloc(384)|0);
  $1 = $8;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $1;
   _usemem($10,384);
  }
  $11 = $2;
  HEAP32[4328] = $11;
 }
 $12 = HEAP32[4100]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[4100]|0;
  $1 = $14;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  HEAP32[4100] = $16;
  $17 = $1;
  $0 = $17;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_alloc(24)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _usemem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6>>>0)>=(24);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $5 = $8;
 while(1) {
  $9 = $5;
  $4 = $9;
  $10 = $4;
  $11 = ((($10)) + 24|0);
  $5 = $11;
  $12 = $4;
  HEAP32[$12>>2] = $11;
  $13 = $3;
  $14 = (($13) - 24)|0;
  $3 = $14;
  $15 = ($14>>>0)>=(24);
  if (!($15)) {
   break;
  }
 }
 $16 = HEAP32[4100]|0;
 $17 = $4;
 HEAP32[$17>>2] = $16;
 $18 = $2;
 HEAP32[4100] = $18;
 STACKTOP = sp;return;
}
function _alt_file_name() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[4101]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[4102]|0;
  $4 = ($3|0)>(0);
  $5 = HEAP32[4102]|0;
  $6 = (($5) - 1)|0;
  $7 = $4 ? $6 : 31;
  $8 = (16412 + ($7<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _push_alternate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = HEAP32[4102]|0;
 $6 = (16412 + ($5<<3)|0);
 $4 = $6;
 $7 = $2;
 $8 = (_strsave($7)|0);
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[4102]|0;
 $17 = ($16>>>0)<(31);
 $18 = HEAP32[4102]|0;
 $19 = (($18) + 1)|0;
 $20 = $17 ? $19 : 0;
 HEAP32[4102] = $20;
 $21 = HEAP32[4101]|0;
 $22 = ($21>>>0)<(32);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[4101]|0;
 $24 = (($23) + 1)|0;
 HEAP32[4101] = $24;
 STACKTOP = sp;return;
}
function _pop_alternate($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4101]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[4101]|0;
  $7 = (($6) + -1)|0;
  HEAP32[4101] = $7;
  $8 = HEAP32[4102]|0;
  $9 = ($8|0)>(0);
  $10 = HEAP32[4102]|0;
  $11 = (($10) - 1)|0;
  $12 = $9 ? $11 : 31;
  HEAP32[4102] = $12;
  $13 = HEAP32[4102]|0;
  $14 = (16412 + ($13<<3)|0);
  $3 = $14;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $1 = 0;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _vischar($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)==(9);
 $11 = $6;
 $12 = ($11|0)>=(0);
 $or$cond = $10 & $12;
 $13 = HEAP32[(4308)>>2]|0;
 $14 = ($13|0)!=(0);
 $or$cond3 = $or$cond & $14;
 $or$cond3$not = $or$cond3 ^ 1;
 $15 = HEAP32[(3564)>>2]|0;
 $16 = ($15|0)!=(0);
 $or$cond5 = $or$cond3$not | $16;
 if (!($or$cond5)) {
  $17 = HEAP32[(4332)>>2]|0;
  $8 = $17;
  while(1) {
   $18 = $6;
   $19 = $8;
   $20 = ($18|0)>=($19|0);
   $21 = $8;
   $22 = $6;
   if (!($20)) {
    break;
   }
   $23 = (($22) - ($21))|0;
   $6 = $23;
  }
  $24 = (($21) - ($22))|0;
  $7 = $24;
  $25 = $5;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $7;
   $28 = ($27>>>0)>(32);
   if ($28) {
    $7 = 32;
   }
   $29 = $7;
   $30 = HEAP32[4167]|0;
   $31 = ($29>>>0)>($30>>>0);
   if ($31) {
    $32 = HEAP32[4167]|0;
    $33 = (19032 + ($32)|0);
    $34 = $7;
    $35 = HEAP32[4167]|0;
    $36 = (($34) - ($35))|0;
    _memset(($33|0),32,($36|0))|0;
   }
   $37 = $7;
   HEAP32[4167] = $37;
   $38 = (19032 + ($37)|0);
   HEAP8[$38>>0] = 0;
   $39 = $5;
   HEAP32[$39>>2] = 19032;
  }
  $40 = $7;
  $3 = $40;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 $41 = $4;
 $42 = $41&255;
 $43 = $42&255;
 $44 = ($43|0)<(32);
 $45 = $4;
 $46 = ($45|0)==(127);
 $or$cond7 = $44 | $46;
 $or$cond7$not = $or$cond7 ^ 1;
 $47 = HEAP32[(3252)>>2]|0;
 $48 = ($47|0)!=(0);
 $or$cond9 = $or$cond7$not | $48;
 if (!($or$cond9)) {
  $49 = $5;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = $5;
   HEAP32[$51>>2] = 19065;
   HEAP8[19065] = 94;
   $52 = $4;
   $53 = ($52|0)==(127);
   $54 = $4;
   $55 = (($54) + 64)|0;
   $56 = $53 ? 63 : $55;
   $57 = $56&255;
   HEAP8[(19066)>>0] = $57;
   HEAP8[(19067)>>0] = 0;
  }
  $3 = 2;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 $58 = $4;
 $59 = $58 & -128;
 $60 = ($59|0)==(0);
 $61 = HEAP32[(3612)>>2]|0;
 $62 = ($61|0)!=(0);
 $or$cond11 = $60 | $62;
 $63 = $5;
 $64 = ($63|0)!=(0|0);
 if ($or$cond11) {
  if ($64) {
   $86 = $5;
   HEAP32[$86>>2] = 19065;
   $87 = $4;
   $88 = $87&255;
   HEAP8[19065] = $88;
   HEAP8[(19066)>>0] = 0;
  }
  $3 = 1;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 } else {
  if ($64) {
   $65 = $5;
   HEAP32[$65>>2] = 19065;
   HEAP8[19065] = 92;
   $66 = $4;
   $67 = $66&255;
   $68 = $67&255;
   $69 = $68 >> 6;
   $70 = $69 & 7;
   $71 = (($70) + 48)|0;
   $72 = $71&255;
   HEAP8[(19066)>>0] = $72;
   $73 = $4;
   $74 = $73&255;
   $75 = $74&255;
   $76 = $75 >> 3;
   $77 = $76 & 7;
   $78 = (($77) + 48)|0;
   $79 = $78&255;
   HEAP8[(19067)>>0] = $79;
   $80 = $4;
   $81 = $80&255;
   $82 = $81&255;
   $83 = $82 & 7;
   $84 = (($83) + 48)|0;
   $85 = $84&255;
   HEAP8[(19068)>>0] = $85;
   HEAP8[(19069)>>0] = 0;
  }
  $3 = 4;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _new_buffer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_alloc(364)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $1;
   $6 = (_setup_buffer($5)|0);
   $7 = ($6|0)==(0);
   $8 = $1;
   if ($7) {
    _free($8);
    $0 = 0;
    break;
   } else {
    $9 = ((($8)) + 20|0);
    HEAP32[$9>>2] = 0;
    $10 = $1;
    $11 = ((($10)) + 24|0);
    HEAP32[$11>>2] = 0;
    $12 = $1;
    $13 = ((($12)) + 32|0);
    HEAP32[$13>>2] = 0;
    $14 = $1;
    $0 = $14;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _setup_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_newline(0)|0);
 $4 = $2;
 HEAP32[$4>>2] = $3;
 $5 = (_newline(1)|0);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = (_newline(0)|0);
 $9 = $2;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = $2;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $22 = $2;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $2;
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 4|0);
    HEAP32[$27>>2] = $24;
    $28 = $2;
    $29 = HEAP32[$28>>2]|0;
    $30 = $2;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    HEAP32[$32>>2] = $29;
    $33 = $2;
    $34 = ((($33)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $2;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 4|0);
    HEAP32[$39>>2] = $35;
    $40 = $2;
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $2;
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$45>>2] = $42;
    $46 = $2;
    _init_marks($46);
    $47 = $2;
    _init_undo($47);
    $48 = $2;
    $49 = ((($48)) + 28|0);
    HEAP32[$49>>2] = 0;
    $1 = 1;
    $50 = $1;
    STACKTOP = sp;return ($50|0);
   }
  }
 }
 $1 = 0;
 $50 = $1;
 STACKTOP = sp;return ($50|0);
}
function _free_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _throw($5);
 $6 = $1;
 _free_undo($6);
 $7 = $1;
 _free($7);
 STACKTOP = sp;return;
}
function _clear_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _throw($3);
 $4 = $1;
 $5 = (_setup_buffer($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _should_fexpand($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(58);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 1|0);
  HEAP32[$2>>2] = $11;
 }
 $12 = (_get_range($2)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 while(1) {
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(32);
  if (!($17)) {
   $18 = HEAP32[$2>>2]|0;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(9);
   if (!($21)) {
    break;
   }
  }
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 1|0);
  HEAP32[$2>>2] = $23;
 }
 $24 = (_decode_command($2,$3,$5)|0);
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)>(0);
 if ($26) {
  $27 = HEAP32[$5>>2]|0;
  $28 = ((($27)) + 7|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 & 2;
  $32 = ($31|0)!=(0);
  $34 = $32;
 } else {
  $34 = 0;
 }
 $33 = $34&1;
 $1 = $33;
 $35 = $1;
 STACKTOP = sp;return ($35|0);
}
function _get_range($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(32);
  if ($12) {
   $131 = 1;
  } else {
   $13 = $3;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)==(9);
   $131 = $16;
  }
  $17 = $3;
  if (!($131)) {
   break;
  }
  $18 = ((($17)) + 1|0);
  $3 = $18;
 }
 $19 = $2;
 HEAP32[$19>>2] = $17;
 $20 = $3;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = ($22|0)==(37);
 if ($23) {
  $24 = HEAP32[4326]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[4168] = $26;
  $27 = HEAP32[4326]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  HEAP32[4169] = $30;
  $31 = $2;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 1|0);
  HEAP32[$31>>2] = $33;
  $1 = 1;
  $130 = $1;
  STACKTOP = sp;return ($130|0);
 }
 HEAP32[4168] = 0;
 HEAP32[4169] = 0;
 $34 = $2;
 $35 = HEAP32[4327]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_get_line($34,$37,16672)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $1 = 0;
  $130 = $1;
  STACKTOP = sp;return ($130|0);
 }
 $40 = $2;
 $41 = HEAP32[$40>>2]|0;
 $3 = $41;
 while(1) {
  $42 = $3;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(32);
  if ($45) {
   $132 = 1;
  } else {
   $46 = $3;
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = ($48|0)==(9);
   $132 = $49;
  }
  $50 = $3;
  if (!($132)) {
   break;
  }
  $51 = ((($50)) + 1|0);
  $3 = $51;
 }
 $52 = $2;
 HEAP32[$52>>2] = $50;
 $53 = $3;
 $54 = HEAP8[$53>>0]|0;
 $4 = $54;
 $55 = $4;
 $56 = $55 << 24 >> 24;
 $57 = ($56|0)!=(44);
 if ($57) {
  $58 = $4;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)!=(59);
  if ($60) {
   $61 = HEAP32[4168]|0;
   HEAP32[4169] = $61;
   $1 = 1;
   $130 = $1;
   STACKTOP = sp;return ($130|0);
  }
 }
 $62 = $2;
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 1|0);
 HEAP32[$62>>2] = $64;
 $65 = HEAP32[4168]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  $67 = HEAP32[4327]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  HEAP32[4168] = $69;
 }
 $70 = $4;
 $71 = $70 << 24 >> 24;
 $72 = ($71|0)==(59);
 if ($72) {
  $73 = HEAP32[4168]|0;
  HEAP32[4169] = $73;
  $74 = HEAP32[4168]|0;
  $75 = HEAP32[4326]|0;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)!=($76|0);
  $78 = HEAP32[4168]|0;
  if ($77) {
   $81 = $78;
  } else {
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80;
  }
  $5 = $81;
 } else {
  $82 = HEAP32[4327]|0;
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $5 = $84;
 }
 $85 = $2;
 $86 = HEAP32[$85>>2]|0;
 $3 = $86;
 while(1) {
  $87 = $3;
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = ($89|0)==(32);
  if ($90) {
   $133 = 1;
  } else {
   $91 = $3;
   $92 = HEAP8[$91>>0]|0;
   $93 = $92 << 24 >> 24;
   $94 = ($93|0)==(9);
   $133 = $94;
  }
  $95 = $3;
  if (!($133)) {
   break;
  }
  $96 = ((($95)) + 1|0);
  $3 = $96;
 }
 $97 = $2;
 HEAP32[$97>>2] = $95;
 $98 = $2;
 $99 = $5;
 $100 = (_get_line($98,$99,16676)|0);
 $101 = ($100|0)!=(0);
 if (!($101)) {
  $1 = 0;
  $130 = $1;
  STACKTOP = sp;return ($130|0);
 }
 $102 = HEAP32[4169]|0;
 $103 = ($102|0)==(0|0);
 if ($103) {
  $104 = HEAP32[4327]|0;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[4169] = $106;
 }
 $107 = HEAP32[4169]|0;
 $108 = ((($107)) + 16|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = HEAP32[4168]|0;
 $111 = ((($110)) + 16|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($109>>>0)<($112>>>0);
 if ($113) {
  $114 = HEAP32[4168]|0;
  $6 = $114;
  $115 = HEAP32[4169]|0;
  HEAP32[4168] = $115;
  $116 = $6;
  HEAP32[4169] = $116;
 }
 $117 = $2;
 $118 = HEAP32[$117>>2]|0;
 $3 = $118;
 while(1) {
  $119 = $3;
  $120 = HEAP8[$119>>0]|0;
  $121 = $120 << 24 >> 24;
  $122 = ($121|0)==(32);
  if ($122) {
   $134 = 1;
  } else {
   $123 = $3;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124 << 24 >> 24;
   $126 = ($125|0)==(9);
   $134 = $126;
  }
  $127 = $3;
  if (!($134)) {
   break;
  }
  $128 = ((($127)) + 1|0);
  $3 = $128;
 }
 $129 = $2;
 HEAP32[$129>>2] = $127;
 $1 = 1;
 $130 = $1;
 STACKTOP = sp;return ($130|0);
}
function _decode_command($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $11 = $16;
 $7 = 8;
 L1: while(1) {
  $17 = $7;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $7;
  $21 = HEAP32[$20>>2]|0;
  $12 = $21;
  $22 = $4;
  $23 = HEAP32[$22>>2]|0;
  $13 = $23;
  while(1) {
   $24 = $13;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = $12;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($26|0)==($29|0);
   if ($30) {
    $31 = $13;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)!=(0);
    $204 = $34;
   } else {
    $204 = 0;
   }
   $35 = $13;
   if (!($204)) {
    break;
   }
   $36 = ((($35)) + 1|0);
   $13 = $36;
   $37 = $12;
   $38 = ((($37)) + 1|0);
   $12 = $38;
  }
  $39 = HEAP8[$35>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)==(0);
  do {
   if ($41) {
    $133 = 1;
   } else {
    $42 = $13;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)==(32);
    if ($45) {
     $133 = 1;
    } else {
     $46 = $13;
     $47 = HEAP8[$46>>0]|0;
     $48 = $47 << 24 >> 24;
     $49 = ($48|0)==(9);
     if ($49) {
      $133 = 1;
     } else {
      $50 = $12;
      $51 = $7;
      $52 = HEAP32[$51>>2]|0;
      $53 = ($50>>>0)>($52>>>0);
      if ($53) {
       $54 = $7;
       $55 = ((($54)) + 7|0);
       $56 = HEAP8[$55>>0]|0;
       $57 = $56&255;
       $58 = $57 & 1;
       $59 = ($58|0)!=(0);
       if ($59) {
        label = 14;
       } else {
        $60 = $7;
        $61 = ((($60)) + 8|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = ($62|0)==(3);
        if ($63) {
         label = 14;
        }
       }
       if ((label|0) == 14) {
        label = 0;
        $64 = $13;
        $65 = HEAP8[$64>>0]|0;
        $66 = $65 << 24 >> 24;
        $67 = ($66|0)==(33);
        if ($67) {
         $133 = 1;
         break;
        }
       }
       $68 = $7;
       $69 = ((($68)) + 8|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(6);
       if ($71) {
        $72 = $13;
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = ($74>>>0)<(128);
        if (!($75)) {
         $133 = 1;
         break;
        }
        $76 = $13;
        $77 = HEAP8[$76>>0]|0;
        $78 = $77 << 24 >> 24;
        $79 = (_isalnum($78)|0);
        $80 = ($79|0)!=(0);
        if (!($80)) {
         $133 = 1;
         break;
        }
       }
       $81 = $7;
       $82 = ((($81)) + 8|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($83|0)==(5);
       if ($84) {
        $133 = 1;
       } else {
        $85 = $7;
        $86 = ((($85)) + 8|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = ($87|0)==(7);
        if ($88) {
         $89 = $12;
         $90 = HEAP8[$89>>0]|0;
         $91 = $90 << 24 >> 24;
         $92 = ($91|0)==(0);
         if ($92) {
          $93 = $13;
          $94 = HEAP8[$93>>0]|0;
          $95 = $94 << 24 >> 24;
          $96 = ($95>>>0)<(128);
          if ($96) {
           $97 = $13;
           $98 = HEAP8[$97>>0]|0;
           $99 = $98 << 24 >> 24;
           $100 = (_islower($99)|0);
           $101 = ($100|0)!=(0);
           if ($101) {
            $133 = 1;
            break;
           }
          }
         }
        }
        $102 = $7;
        $103 = ((($102)) + 8|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = ($104|0)==(4);
        if ($105) {
         $106 = $13;
         $107 = HEAP8[$106>>0]|0;
         $108 = $107 << 24 >> 24;
         $109 = ($108>>>0)<(128);
         if (!($109)) {
          $133 = 1;
          break;
         }
         $110 = $13;
         $111 = HEAP8[$110>>0]|0;
         $112 = $111 << 24 >> 24;
         $113 = (_isalpha($112)|0);
         $114 = ($113|0)!=(0);
         if (!($114)) {
          $133 = 1;
          break;
         }
        }
        $115 = $7;
        $116 = ((($115)) + 7|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = $117&255;
        $119 = $118 & 4;
        $120 = ($119|0)!=(0);
        if ($120) {
         $121 = $13;
         $122 = HEAP8[$121>>0]|0;
         $123 = $122 << 24 >> 24;
         $124 = ($123>>>0)<(128);
         if ($124) {
          $125 = $13;
          $126 = HEAP8[$125>>0]|0;
          $127 = $126 << 24 >> 24;
          $128 = (_isalnum($127)|0);
          $129 = ($128|0)!=(0);
          $131 = $129;
         } else {
          $131 = 0;
         }
         $130 = $131 ^ 1;
         $133 = $130;
        } else {
         $133 = 0;
        }
       }
      } else {
       $133 = 0;
      }
     }
    }
   }
  } while(0);
  $132 = $133&1;
  $14 = $132;
  $134 = $14;
  $135 = ($134|0)!=(0);
  L40: do {
   if ($135) {
    $136 = $8;
    $137 = ($136|0)==(0|0);
    do {
     if (!($137)) {
      $138 = $8;
      $139 = ($138|0)!=(0|0);
      if ($139) {
       $140 = $8;
       $141 = ((($140)) + 6|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = $142&255;
       $144 = $7;
       $145 = ((($144)) + 6|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146&255;
       $148 = ($143|0)<($147|0);
       if ($148) {
        break;
       }
      }
      $160 = $8;
      $161 = ($160|0)!=(0|0);
      if (!($161)) {
       break L40;
      }
      $162 = $8;
      $163 = ((($162)) + 6|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = $7;
      $167 = ((($166)) + 6|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168&255;
      $170 = ($165|0)==($169|0);
      if (!($170)) {
       break L40;
      }
      $171 = $10;
      $172 = (($171) + 1)|0;
      $10 = $172;
      break L40;
     }
    } while(0);
    $149 = $7;
    $8 = $149;
    $150 = $13;
    $151 = HEAP8[$150>>0]|0;
    $152 = $151 << 24 >> 24;
    $153 = ($152|0)==(33);
    $154 = $153&1;
    $9 = $154;
    $155 = $13;
    $11 = $155;
    $10 = 1;
    $156 = $12;
    $157 = HEAP8[$156>>0]|0;
    $158 = $157 << 24 >> 24;
    $159 = ($158|0)==(0);
    if ($159) {
     break L1;
    }
   }
  } while(0);
  $173 = $7;
  $174 = ((($173)) + 12|0);
  $7 = $174;
 }
 $175 = $8;
 $176 = ($175|0)==(0|0);
 if ($176) {
  $3 = -1;
  $203 = $3;
  STACKTOP = sp;return ($203|0);
 }
 $177 = $10;
 $178 = ($177|0)!=(1);
 if ($178) {
  $3 = -2;
  $203 = $3;
  STACKTOP = sp;return ($203|0);
 }
 $179 = $9;
 $180 = ($179|0)!=(0);
 if ($180) {
  $181 = $8;
  $182 = ((($181)) + 7|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $184 & 1;
  $9 = $185;
  $186 = ($185|0)!=(0);
  if (!($186)) {
   $187 = $8;
   $188 = ((($187)) + 7|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $190 & 4;
   $192 = ($191|0)!=(0);
   if (!($192)) {
    $3 = -3;
    $203 = $3;
    STACKTOP = sp;return ($203|0);
   }
  }
 }
 $193 = $9;
 $194 = $5;
 HEAP32[$194>>2] = $193;
 $195 = $11;
 $196 = $4;
 HEAP32[$196>>2] = $195;
 $197 = $8;
 $198 = $6;
 HEAP32[$198>>2] = $197;
 $199 = $8;
 $200 = ((($199)) + 4|0);
 $201 = HEAP16[$200>>1]|0;
 $202 = $201 << 16 >> 16;
 $3 = $202;
 $203 = $3;
 STACKTOP = sp;return ($203|0);
}
function _get_line($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $8 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$8>>2] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ((($16)) + 1|0);
 HEAP32[$8>>2] = $17;
 $18 = HEAP8[$16>>0]|0;
 $9 = $18;
 $19 = $18 << 24 >> 24;
 L1: do {
  switch ($19|0) {
  case 63: case 47:  {
   $20 = $5;
   $21 = $9;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(47);
   $24 = $23 ? 0 : 1;
   $25 = (_linesearch($20,$24,$8)|0);
   $7 = $25;
   $26 = $7;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $3 = 0;
    $173 = $3;
    STACKTOP = sp;return ($173|0);
   }
   break;
  }
  case 36:  {
   $28 = HEAP32[4326]|0;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $7 = $31;
   break;
  }
  case 45: case 43:  {
   $32 = HEAP32[$8>>2]|0;
   $33 = ((($32)) + -1|0);
   HEAP32[$8>>2] = $33;
   label = 6;
   break;
  }
  case 46:  {
   label = 6;
   break;
  }
  case 96: case 39:  {
   $35 = HEAP32[$8>>2]|0;
   $36 = ((($35)) + 1|0);
   HEAP32[$8>>2] = $36;
   $37 = HEAP8[$35>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = HEAP32[4326]|0;
   $40 = (_getmark($38,$39)|0);
   $11 = $40;
   $41 = $11;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    $43 = $11;
    $44 = HEAP32[$43>>2]|0;
    $7 = $44;
    break L1;
   }
   _show_error(12328,$vararg_buffer);
   $3 = 0;
   $173 = $3;
   STACKTOP = sp;return ($173|0);
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
   $45 = $9;
   $46 = $45 << 24 >> 24;
   $47 = (($46) - 48)|0;
   $10 = $47;
   while(1) {
    $48 = HEAP32[$8>>2]|0;
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = ($50>>>0)<(128);
    if ($51) {
     $52 = HEAP32[$8>>2]|0;
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = (_isdigit($54)|0);
     $56 = ($55|0)!=(0);
     $174 = $56;
    } else {
     $174 = 0;
    }
    $57 = $10;
    if (!($174)) {
     break;
    }
    $58 = ($57*10)|0;
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = (($58) + ($61))|0;
    $63 = (($62) - 48)|0;
    $10 = $63;
    $64 = HEAP32[$8>>2]|0;
    $65 = ((($64)) + 1|0);
    HEAP32[$8>>2] = $65;
   }
   $66 = ($57|0)==(0);
   if ($66) {
    $67 = HEAP32[4326]|0;
    $68 = HEAP32[$67>>2]|0;
    $7 = $68;
    break L1;
   }
   $69 = $10;
   $70 = HEAP32[4326]|0;
   $71 = ((($70)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($69>>>0)>($75>>>0);
   if (!($76)) {
    $77 = HEAP32[4326]|0;
    $78 = $10;
    $79 = (_gotoline($77,$78)|0);
    $7 = $79;
    break L1;
   }
   $3 = 0;
   $173 = $3;
   STACKTOP = sp;return ($173|0);
   break;
  }
  default: {
   $3 = 1;
   $173 = $3;
   STACKTOP = sp;return ($173|0);
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $34 = $5;
  $7 = $34;
 }
 while(1) {
  $80 = HEAP32[$8>>2]|0;
  $81 = HEAP8[$80>>0]|0;
  $82 = $81 << 24 >> 24;
  $83 = ($82|0)==(32);
  if ($83) {
   $175 = 1;
  } else {
   $84 = HEAP32[$8>>2]|0;
   $85 = HEAP8[$84>>0]|0;
   $86 = $85 << 24 >> 24;
   $87 = ($86|0)==(9);
   $175 = $87;
  }
  $88 = HEAP32[$8>>2]|0;
  if (!($175)) {
   break;
  }
  $89 = ((($88)) + 1|0);
  HEAP32[$8>>2] = $89;
 }
 $90 = HEAP8[$88>>0]|0;
 $91 = $90 << 24 >> 24;
 $92 = ($91|0)==(45);
 if ($92) {
  label = 27;
 } else {
  $93 = HEAP32[$8>>2]|0;
  $94 = HEAP8[$93>>0]|0;
  $95 = $94 << 24 >> 24;
  $96 = ($95|0)==(43);
  if ($96) {
   label = 27;
  }
 }
 do {
  if ((label|0) == 27) {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + 1|0);
   HEAP32[$8>>2] = $98;
   $99 = HEAP8[$97>>0]|0;
   $12 = $99;
   while(1) {
    $100 = HEAP32[$8>>2]|0;
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    $103 = ($102|0)==(32);
    if (!($103)) {
     $104 = HEAP32[$8>>2]|0;
     $105 = HEAP8[$104>>0]|0;
     $106 = $105 << 24 >> 24;
     $107 = ($106|0)==(9);
     if (!($107)) {
      break;
     }
    }
    $108 = HEAP32[$8>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[$8>>2] = $109;
   }
   $110 = HEAP32[$8>>2]|0;
   $111 = HEAP8[$110>>0]|0;
   $112 = $111 << 24 >> 24;
   $113 = ($112>>>0)<(128);
   L48: do {
    if ($113) {
     $114 = HEAP32[$8>>2]|0;
     $115 = HEAP8[$114>>0]|0;
     $116 = $115 << 24 >> 24;
     $117 = (_isdigit($116)|0);
     $118 = ($117|0)!=(0);
     if ($118) {
      $10 = 0;
      while(1) {
       $119 = HEAP32[$8>>2]|0;
       $120 = HEAP8[$119>>0]|0;
       $121 = $120 << 24 >> 24;
       $122 = ($121>>>0)<(128);
       if (!($122)) {
        break L48;
       }
       $123 = HEAP32[$8>>2]|0;
       $124 = HEAP8[$123>>0]|0;
       $125 = $124 << 24 >> 24;
       $126 = (_isdigit($125)|0);
       $127 = ($126|0)!=(0);
       if (!($127)) {
        break L48;
       }
       $128 = $10;
       $129 = ($128*10)|0;
       $130 = HEAP32[$8>>2]|0;
       $131 = HEAP8[$130>>0]|0;
       $132 = $131 << 24 >> 24;
       $133 = (($129) + ($132))|0;
       $134 = (($133) - 48)|0;
       $10 = $134;
       $135 = HEAP32[$8>>2]|0;
       $136 = ((($135)) + 1|0);
       HEAP32[$8>>2] = $136;
      }
     } else {
      label = 37;
     }
    } else {
     label = 37;
    }
   } while(0);
   L55: do {
    if ((label|0) == 37) {
     $10 = 1;
     while(1) {
      $137 = HEAP32[$8>>2]|0;
      $138 = HEAP8[$137>>0]|0;
      $139 = $138 << 24 >> 24;
      $140 = $12;
      $141 = $140 << 24 >> 24;
      $142 = ($139|0)==($141|0);
      if (!($142)) {
       break L55;
      }
      $143 = $10;
      $144 = (($143) + 1)|0;
      $10 = $144;
      $145 = HEAP32[$8>>2]|0;
      $146 = ((($145)) + 1|0);
      HEAP32[$8>>2] = $146;
     }
    }
   } while(0);
   $147 = $12;
   $148 = $147 << 24 >> 24;
   $149 = ($148|0)==(45);
   $150 = $7;
   $151 = ((($150)) + 16|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $10;
   if ($149) {
    $154 = (($152) - ($153))|0;
    $13 = $154;
   } else {
    $155 = (($152) + ($153))|0;
    $13 = $155;
   }
   $156 = $13;
   $157 = ($156>>>0)<(1);
   if (!($157)) {
    $158 = $13;
    $159 = HEAP32[4326]|0;
    $160 = ((($159)) + 8|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 16|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($158>>>0)>($164>>>0);
    if (!($165)) {
     $166 = HEAP32[4326]|0;
     $167 = $13;
     $168 = (_gotoline($166,$167)|0);
     $7 = $168;
     break;
    }
   }
   $3 = 0;
   $173 = $3;
   STACKTOP = sp;return ($173|0);
  }
 } while(0);
 $169 = HEAP32[$8>>2]|0;
 $170 = $4;
 HEAP32[$170>>2] = $169;
 $171 = $7;
 $172 = $6;
 HEAP32[$172>>2] = $171;
 $3 = 1;
 $173 = $3;
 STACKTOP = sp;return ($173|0);
}
function _exCommand($0) {
 $0 = $0|0;
 var $$off = 0, $$sink = 0, $$sink10 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $l_line$sink = 0, $or$cond = 0, $or$cond12 = 0, $switch = 0, $u_line$sink = 0, $u_line$sink$sink = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer22 = sp + 32|0;
 $vararg_buffer20 = sp + 24|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer13 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 108|0;
 $4 = sp + 100|0;
 $5 = sp + 96|0;
 $6 = sp + 92|0;
 $8 = sp + 84|0;
 $14 = sp + 56|0;
 $15 = sp + 48|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 while(1) {
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(58);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 1|0);
  HEAP32[$2>>2] = $23;
 }
 $24 = (_get_range($2)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  _badcmd(6278);
  $1 = 0;
  $577 = $1;
  STACKTOP = sp;return ($577|0);
 }
 while(1) {
  $26 = HEAP32[$2>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(32);
  if (!($29)) {
   $30 = HEAP32[$2>>2]|0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = ($32|0)==(9);
   if (!($33)) {
    break;
   }
  }
  $34 = HEAP32[$2>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$2>>2] = $35;
 }
 $36 = (_decode_command($2,$6,$8)|0);
 $7 = $36;
 $37 = $7;
 $38 = ($37|0)>(0);
 L14: do {
  if ($38) {
   $39 = HEAP32[$8>>2]|0;
   $40 = ((($39)) + 7|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 & 8;
   $44 = ($43|0)!=(0);
   do {
    if (!($44)) {
     $45 = HEAP32[4168]|0;
     $46 = HEAP32[4326]|0;
     $47 = HEAP32[$46>>2]|0;
     $48 = ($45|0)==($47|0);
     if (!($48)) {
      $49 = HEAP32[4169]|0;
      $50 = HEAP32[4326]|0;
      $51 = HEAP32[$50>>2]|0;
      $52 = ($49|0)==($51|0);
      if (!($52)) {
       break;
      }
     }
     _badcmd(6296);
     $1 = 0;
     $577 = $1;
     STACKTOP = sp;return ($577|0);
    }
   } while(0);
   $53 = HEAP32[$8>>2]|0;
   $54 = ((($53)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   switch ($55|0) {
   case 0:  {
    $56 = HEAP32[$2>>2]|0;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = ($58|0)==(33);
    if ($59) {
     $60 = HEAP32[$8>>2]|0;
     $61 = ((($60)) + 7|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = $63 & 1;
     $65 = ($64|0)!=(0);
     if ($65) {
      $66 = HEAP32[$2>>2]|0;
      $67 = ((($66)) + 1|0);
      HEAP32[$2>>2] = $67;
     }
    }
    while(1) {
     $68 = HEAP32[$2>>2]|0;
     $69 = HEAP8[$68>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = ($70|0)==(32);
     if ($71) {
      $578 = 1;
     } else {
      $72 = HEAP32[$2>>2]|0;
      $73 = HEAP8[$72>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = ($74|0)==(9);
      $578 = $75;
     }
     $76 = HEAP32[$2>>2]|0;
     if (!($578)) {
      break;
     }
     $77 = ((($76)) + 1|0);
     HEAP32[$2>>2] = $77;
    }
    $78 = HEAP8[$76>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = ($79|0)!=(0);
    if (!($80)) {
     break L14;
    }
    $7 = -4;
    break L14;
    break;
   }
   case 4:  {
    HEAP32[4170] = 0;
    while(1) {
     $81 = HEAP32[$2>>2]|0;
     $82 = HEAP8[$81>>0]|0;
     $83 = $82 << 24 >> 24;
     $84 = ($83|0)==(32);
     if (!($84)) {
      $85 = HEAP32[$2>>2]|0;
      $86 = HEAP8[$85>>0]|0;
      $87 = $86 << 24 >> 24;
      $88 = ($87|0)==(9);
      if (!($88)) {
       break;
      }
     }
     $89 = HEAP32[$2>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$2>>2] = $90;
    }
    $91 = HEAP32[4327]|0;
    $92 = HEAP32[$91>>2]|0;
    $93 = HEAP32[$92>>2]|0;
    $94 = (_get_line($2,$93,16680)|0);
    $95 = ($94|0)==(0);
    $96 = HEAP32[4170]|0;
    $97 = ($96|0)==(0|0);
    $or$cond = $95 | $97;
    if (!($or$cond)) {
     break L14;
    }
    $7 = -4;
    break L14;
    break;
   }
   case 7:  {
    while(1) {
     $98 = HEAP32[$2>>2]|0;
     $99 = HEAP8[$98>>0]|0;
     $100 = $99 << 24 >> 24;
     $101 = ($100|0)==(32);
     if (!($101)) {
      $102 = HEAP32[$2>>2]|0;
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)==(9);
      if (!($105)) {
       break;
      }
     }
     $106 = HEAP32[$2>>2]|0;
     $107 = ((($106)) + 1|0);
     HEAP32[$2>>2] = $107;
    }
    $108 = HEAP32[$2>>2]|0;
    $109 = HEAP8[$108>>0]|0;
    $110 = $109 << 24 >> 24;
    $111 = ($110>>>0)<(128);
    if ($111) {
     $112 = HEAP32[$2>>2]|0;
     $113 = HEAP8[$112>>0]|0;
     $114 = $113 << 24 >> 24;
     $115 = (_islower($114)|0);
     $116 = ($115|0)!=(0);
     if ($116) {
      $117 = HEAP32[$2>>2]|0;
      $118 = ((($117)) + 1|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119 << 24 >> 24;
      $121 = ($120|0)!=(0);
      if (!($121)) {
       $122 = HEAP32[$2>>2]|0;
       $3 = $122;
       break L14;
      }
     }
    }
    $7 = -4;
    break L14;
    break;
   }
   case 3: case 2: case 1: case 5: case 6:  {
    $123 = HEAP32[$2>>2]|0;
    $3 = $123;
    $124 = HEAP32[$6>>2]|0;
    $125 = ($124|0)!=(0);
    if ($125) {
     $126 = $3;
     $127 = HEAP8[$126>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = ($128|0)==(33);
     if ($129) {
      $130 = $3;
      $131 = ((($130)) + 1|0);
      $3 = $131;
      HEAP8[$130>>0] = 0;
     }
    }
    $132 = HEAP32[$8>>2]|0;
    $133 = ((($132)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $$off = (($134) + -1)|0;
    $switch = ($$off>>>0)<(3);
    if ($switch) {
     while(1) {
      $135 = $3;
      $136 = HEAP8[$135>>0]|0;
      $137 = $136 << 24 >> 24;
      $138 = ($137|0)==(32);
      if ($138) {
       $579 = 1;
      } else {
       $139 = $3;
       $140 = HEAP8[$139>>0]|0;
       $141 = $140 << 24 >> 24;
       $142 = ($141|0)==(9);
       $579 = $142;
      }
      $143 = $3;
      if (!($579)) {
       break;
      }
      $144 = ((($143)) + 1|0);
      $3 = $144;
     }
     $145 = HEAP8[$143>>0]|0;
     $146 = $145 << 24 >> 24;
     $147 = ($146|0)==(0);
     if ($147) {
      $3 = 0;
     }
    }
    $148 = $3;
    $149 = ($148|0)!=(0|0);
    if (!($149)) {
     break L14;
    }
    $150 = HEAP32[$8>>2]|0;
    $151 = ((($150)) + 7|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = $153 & 4;
    $155 = ($154|0)!=(0);
    if ($155) {
     $156 = $3;
     $157 = (_expand_percents($156)|0);
     $3 = $157;
     $158 = $3;
     $159 = ($158|0)==(0|0);
     if ($159) {
      $1 = 0;
      $577 = $1;
      STACKTOP = sp;return ($577|0);
     }
    }
    $160 = HEAP32[$8>>2]|0;
    $161 = ((($160)) + 7|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $162&255;
    $164 = $163 & 2;
    $165 = ($164|0)!=(0);
    if ($165) {
     $166 = $3;
     $167 = (_fexpand($166,0)|0);
     $3 = $167;
    }
    $168 = HEAP32[$8>>2]|0;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    switch ($170|0) {
    case 1:  {
     $171 = $3;
     _makeargv($171,$4,$5,6332);
     $172 = HEAP32[$5>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      break L14;
     }
     $1 = 0;
     $577 = $1;
     STACKTOP = sp;return ($577|0);
     break;
    }
    case 3:  {
     $174 = $3;
     $175 = HEAP8[$174>>0]|0;
     $176 = $175 << 24 >> 24;
     $177 = ($176|0)==(33);
     if ($177) {
      break L14;
     }
     break;
    }
    case 2:  {
     break;
    }
    default: {
     break L14;
    }
    }
    $178 = $3;
    _makeargv($178,$4,$5,6332);
    $179 = HEAP32[$5>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     $1 = 0;
     $577 = $1;
     STACKTOP = sp;return ($577|0);
    }
    $181 = HEAP32[$4>>2]|0;
    $182 = ($181|0)>(1);
    if ($182) {
     $7 = -4;
    }
    $183 = HEAP32[$5>>2]|0;
    $184 = HEAP32[$183>>2]|0;
    $3 = $184;
    break L14;
    break;
   }
   default: {
    break L14;
   }
   }
  }
 } while(0);
 $185 = HEAP32[4328]|0;
 $9 = $185;
 $10 = 0;
 $186 = $7;
 L93: do {
  switch ($186|0) {
  case 2:  {
   $187 = HEAP32[4168]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    $189 = HEAP32[4168]|0;
    $190 = HEAP32[4169]|0;
    _specify_pipe_range($189,$190);
    $191 = $3;
    $192 = (_do_pipe($191)|0);
    $193 = ($192|0)!=(0);
    if ($193) {
     break L93;
    }
    $194 = $10;
    $195 = (($194) + 1)|0;
    $10 = $195;
    break L93;
   } else {
    $196 = $3;
    $197 = (_exShellCommand($196)|0);
    $198 = ($197|0)!=(0);
    if ($198) {
     break L93;
    }
    $199 = $10;
    $200 = (($199) + 1)|0;
    $10 = $200;
    break L93;
   }
   break;
  }
  case 12:  {
   $201 = (_exArgs()|0);
   $202 = ($201|0)!=(0);
   if (!($202)) {
    $203 = $10;
    $204 = (($203) + 1)|0;
    $10 = $204;
   }
   break;
  }
  case 13:  {
   $205 = $3;
   $206 = ($205|0)!=(0|0);
   if ($206) {
    $207 = HEAP32[4328]|0;
    $208 = $207 & -15;
    HEAP32[4328] = $208;
   }
   $209 = $3;
   $210 = (_exNewBuffer($209,0)|0);
   $211 = ($210|0)!=(0);
   if (!($211)) {
    $212 = $10;
    $213 = (($212) + 1)|0;
    $10 = $213;
   }
   _move_window_to_cursor();
   _redraw_window(0);
   break;
  }
  case 14:  {
   $214 = $3;
   $215 = (_exChangeDirectory($214)|0);
   $11 = $215;
   $216 = ($215|0)!=(0|0);
   if ($216) {
    $217 = $11;
    _badcmd($217);
    $218 = $10;
    $219 = (($218) + 1)|0;
    $10 = $219;
    break L93;
   }
   $220 = HEAP32[4217]|0;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = (_alloc(1026)|0);
    $12 = $222;
    $223 = ($222|0)!=(0|0);
    if ($223) {
     $224 = $12;
     $225 = (_getcwd($224,1026)|0);
     $226 = ($225|0)!=(0|0);
     if ($226) {
      $227 = $12;
      HEAP32[$vararg_buffer>>2] = $227;
      _show_message(12801,$vararg_buffer);
     }
    }
    $228 = $12;
    $229 = ($228|0)!=(0|0);
    if ($229) {
     $230 = $12;
     _free($230);
    }
   }
   break;
  }
  case 16:  {
   $231 = HEAP32[$6>>2]|0;
   $232 = (_exCloseWindow($231)|0);
   $233 = ($232|0)!=(0);
   if (!($233)) {
    $234 = $10;
    $235 = (($234) + 1)|0;
    $10 = $235;
   }
   break;
  }
  case 9:  {
   break;
  }
  case 18:  {
   $236 = HEAP32[4168]|0;
   $237 = HEAP32[4169]|0;
   $238 = HEAP32[4170]|0;
   $239 = (_exLineOperation(116,$236,$237,$238)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    $241 = $10;
    $242 = (($241) + 1)|0;
    $10 = $242;
   }
   break;
  }
  case 19:  {
   $243 = HEAP32[4168]|0;
   $244 = HEAP32[4169]|0;
   $245 = (_exLineOperation(100,$243,$244,0)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    $247 = $10;
    $248 = (($247) + 1)|0;
    $10 = $248;
   }
   break;
  }
  case 20:  {
   $249 = HEAP32[4327]|0;
   $250 = ((($249)) + 36|0);
   $251 = ((($250)) + 12|0);
   HEAP32[$251>>2] = 0;
   $252 = HEAP32[4327]|0;
   $253 = ((($252)) + 36|0);
   $254 = ((($253)) + 8|0);
   HEAP32[$254>>2] = 0;
   $13 = 0;
   while(1) {
    $255 = $13;
    $256 = HEAP32[$4>>2]|0;
    $257 = ($255|0)<($256|0);
    if (!($257)) {
     break;
    }
    $258 = HEAP32[4327]|0;
    $259 = ((($258)) + 36|0);
    $260 = HEAP32[$5>>2]|0;
    $261 = $13;
    $262 = (($260) + ($261<<2)|0);
    $263 = HEAP32[$262>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $263;
    $264 = (_lformat($259,10807,$vararg_buffer13)|0);
    $265 = ($264|0)!=(0);
    if (!($265)) {
     break;
    }
    $266 = HEAP32[4327]|0;
    $267 = ((($266)) + 36|0);
    $268 = ((($267)) + 8|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = HEAP32[4327]|0;
    $271 = ((($270)) + 36|0);
    $272 = ((($271)) + 12|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($269>>>0)>=($273>>>0);
    if ($274) {
     $288 = 0;
    } else {
     $275 = HEAP32[4327]|0;
     $276 = ((($275)) + 36|0);
     $277 = ((($276)) + 12|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = HEAP32[4327]|0;
     $280 = ((($279)) + 36|0);
     $281 = ((($280)) + 8|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = (($278) - ($282))|0;
     $288 = $283;
    }
    $284 = HEAP32[4327]|0;
    $285 = ((($284)) + 24|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($288>>>0)>=($286>>>0);
    if ($287) {
     break;
    }
    $289 = $13;
    $290 = (($289) + 1)|0;
    $13 = $290;
   }
   _update_sline();
   break;
  }
  case 56: case 21:  {
   $291 = HEAP32[4328]|0;
   $292 = $291 & -15;
   HEAP32[4328] = $292;
   $293 = HEAP32[$6>>2]|0;
   $294 = $3;
   $295 = (_exEditFile($293,$294)|0);
   $296 = ($295|0)!=(0);
   if (!($296)) {
    $297 = $10;
    $298 = (($297) + 1)|0;
    $10 = $298;
   }
   _move_window_to_cursor();
   _xvUpdateAllBufferWindows();
   break;
  }
  case 22:  {
   _xvEqualiseWindows(0);
   break;
  }
  case 24:  {
   $299 = $3;
   _exShowFileStatus($299);
   break;
  }
  case 25:  {
   $300 = HEAP32[4168]|0;
   $301 = HEAP32[4169]|0;
   $302 = $3;
   $303 = HEAP32[$6>>2]|0;
   $304 = ($303|0)!=(0);
   $305 = $304 ^ 1;
   $306 = $305&1;
   $307 = (_exGlobal($300,$301,$302,$306)|0);
   $308 = ($307|0)!=(0);
   if (!($308)) {
    $309 = $10;
    $310 = (($309) + 1)|0;
    $10 = $310;
   }
   break;
  }
  case 26:  {
   _exHelp();
   break;
  }
  case 28:  {
   $311 = HEAP32[4168]|0;
   $312 = HEAP32[4169]|0;
   $313 = HEAP32[$6>>2]|0;
   $314 = (_exJoin($311,$312,$313)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    $316 = $10;
    $317 = (($316) + 1)|0;
    $10 = $317;
   }
   break;
  }
  case 31:  {
   $318 = $3;
   $319 = HEAP32[$6>>2]|0;
   $320 = (_xvi_map($318,$319)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    $322 = $10;
    $323 = (($322) + 1)|0;
    $10 = $323;
   }
   break;
  }
  case 53:  {
   $324 = HEAP32[$4>>2]|0;
   $325 = HEAP32[$5>>2]|0;
   $326 = HEAP32[$6>>2]|0;
   $327 = (_xvi_unmap($324,$325,$326)|0);
   $328 = ($327|0)!=(0);
   if (!($328)) {
    $329 = $10;
    $330 = (($329) + 1)|0;
    $10 = $330;
   }
   break;
  }
  case 29: case 32:  {
   $331 = ((($14)) + 4|0);
   HEAP32[$331>>2] = 0;
   $332 = HEAP32[4168]|0;
   $333 = ($332|0)==(0|0);
   if ($333) {
    $334 = HEAP32[4327]|0;
    $335 = HEAP32[$334>>2]|0;
    $l_line$sink = $335;
   } else {
    $l_line$sink = 16672;
   }
   $336 = HEAP32[$l_line$sink>>2]|0;
   HEAP32[$14>>2] = $336;
   $337 = $3;
   $338 = HEAP8[$337>>0]|0;
   $339 = $338 << 24 >> 24;
   $340 = HEAP32[4326]|0;
   $341 = (_setmark($339,$340,$14)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    $343 = $10;
    $344 = (($343) + 1)|0;
    $10 = $344;
   }
   break;
  }
  case 33:  {
   $345 = HEAP32[4168]|0;
   $346 = HEAP32[4169]|0;
   $347 = HEAP32[4170]|0;
   $348 = (_exLineOperation(109,$345,$346,$347)|0);
   $349 = ($348|0)!=(0);
   if (!($349)) {
    $350 = $10;
    $351 = (($350) + 1)|0;
    $10 = $351;
   }
   break;
  }
  case 34:  {
   $352 = HEAP32[$4>>2]|0;
   $353 = HEAP32[$5>>2]|0;
   $354 = HEAP32[$6>>2]|0;
   $355 = (_exNext($352,$353,$354)|0);
   $356 = ($355|0)!=(0);
   if (!($356)) {
    $357 = $10;
    $358 = (($357) + 1)|0;
    $10 = $358;
   }
   break;
  }
  case 37:  {
   $359 = (_exPreserveAllBuffers()|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    $361 = $10;
    $362 = (($361) + 1)|0;
    $10 = $362;
   }
   break;
  }
  case 35: case 38: case 30:  {
   $363 = HEAP32[4168]|0;
   $364 = ($363|0)==(0|0);
   if ($364) {
    $365 = HEAP32[4327]|0;
    $366 = HEAP32[$365>>2]|0;
    $367 = HEAP32[$366>>2]|0;
    HEAP32[4171] = $367;
    $u_line$sink$sink = 16684;
   } else {
    $368 = HEAP32[4169]|0;
    $369 = ($368|0)==(0|0);
    $370 = HEAP32[4168]|0;
    HEAP32[4171] = $370;
    $u_line$sink = $369 ? 16672 : 16676;
    $u_line$sink$sink = $u_line$sink;
   }
   $371 = HEAP32[$u_line$sink$sink>>2]|0;
   $372 = ((($371)) + 4|0);
   $373 = HEAP32[$372>>2]|0;
   HEAP32[4172] = $373;
   $374 = HEAP32[(3708)>>2]|0;
   $375 = ($374|0)!=(0);
   $376 = $7;
   $377 = ($376|0)==(35);
   $378 = $375 ? 1 : $377;
   $379 = $378&1;
   HEAP32[4173] = $379;
   $380 = HEAP32[4327]|0;
   $381 = ((($380)) + 24|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $7;
   $384 = ($383|0)==(30);
   $385 = HEAP32[(3564)>>2]|0;
   $386 = ($385|0)!=(0);
   $387 = $384 ? 1 : $386;
   $388 = $387&1;
   _disp_init(44,$382,$388);
   break;
  }
  case 39:  {
   $389 = HEAP32[4168]|0;
   $390 = ($389|0)!=(0|0);
   if ($390) {
    $391 = ((($15)) + 4|0);
    HEAP32[$391>>2] = 0;
    $$sink10 = 16672;
   } else {
    $392 = HEAP32[4327]|0;
    $393 = HEAP32[$392>>2]|0;
    $394 = ((($393)) + 4|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ((($15)) + 4|0);
    HEAP32[$396>>2] = $395;
    $397 = HEAP32[4327]|0;
    $398 = HEAP32[$397>>2]|0;
    $$sink10 = $398;
   }
   $399 = HEAP32[$$sink10>>2]|0;
   HEAP32[$15>>2] = $399;
   _do_put($15,0,64);
   break;
  }
  case 40:  {
   $400 = HEAP32[$6>>2]|0;
   _exQuit($400);
   break;
  }
  case 43:  {
   $401 = HEAP32[$6>>2]|0;
   $402 = (_exRewind($401)|0);
   $403 = ($402|0)!=(0);
   if (!($403)) {
    $404 = $10;
    $405 = (($404) + 1)|0;
    $10 = $405;
   }
   break;
  }
  case 41:  {
   $406 = $3;
   $407 = HEAP32[4168]|0;
   $408 = ($407|0)!=(0|0);
   if ($408) {
    $$sink = 16672;
   } else {
    $409 = HEAP32[4327]|0;
    $410 = HEAP32[$409>>2]|0;
    $$sink = $410;
   }
   $411 = HEAP32[$$sink>>2]|0;
   $412 = (_exReadFile($406,$411)|0);
   $413 = ($412|0)!=(0);
   if (!($413)) {
    $414 = $10;
    $415 = (($414) + 1)|0;
    $10 = $415;
   }
   break;
  }
  case 44:  {
   $416 = HEAP32[$4>>2]|0;
   $417 = HEAP32[$5>>2]|0;
   _exSet($416,$417);
   break;
  }
  case 45:  {
   $418 = HEAP32[$6>>2]|0;
   _exInteractiveShell($418);
   break;
  }
  case 46:  {
   $419 = $3;
   $420 = ($419|0)==(0|0);
   if ($420) {
    _badcmd(6335);
    break L93;
   }
   $421 = $3;
   $422 = (_exSource($421)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    $424 = $10;
    $425 = (($424) + 1)|0;
    $10 = $425;
   }
   break;
  }
  case 47:  {
   _exSplitWindow();
   break;
  }
  case 64: case 4: case 49:  {
   $426 = $7;
   switch ($426|0) {
   case 49:  {
    $17 = 45;
    break;
   }
   case 4:  {
    $17 = 46;
    break;
   }
   case 64:  {
    $17 = 47;
    break;
   }
   default: {
   }
   }
   $427 = $17;
   $428 = HEAP32[4168]|0;
   $429 = HEAP32[4169]|0;
   $430 = $3;
   $431 = (FUNCTION_TABLE_iiii[$427 & 127]($428,$429,$430)|0);
   $16 = $431;
   $432 = $16;
   $433 = ($432|0)==(0);
   if ($433) {
    $434 = $10;
    $435 = (($434) + 1)|0;
    $10 = $435;
   }
   _xvUpdateAllBufferWindows();
   _cursupdate();
   _begin_line(1);
   $436 = $16;
   $437 = HEAP32[(3972)>>2]|0;
   $438 = ($436|0)>=($437|0);
   if ($438) {
    $439 = $16;
    $440 = $16;
    $441 = ($440|0)>(1);
    $442 = $441 ? 115 : 32;
    HEAP32[$vararg_buffer16>>2] = $439;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $442;
    _show_message(11665,$vararg_buffer16);
   }
   break;
  }
  case 48:  {
   $443 = HEAP32[$6>>2]|0;
   _exSuspend($443);
   break;
  }
  case 50:  {
   $444 = $3;
   $445 = HEAP32[$6>>2]|0;
   $446 = (_exTag($444,$445,1,1)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    $448 = $10;
    $449 = (($448) + 1)|0;
    $10 = $449;
   }
   break;
  }
  case 52:  {
   _undo();
   break;
  }
  case 54:  {
   $450 = HEAP32[4168]|0;
   $451 = HEAP32[4169]|0;
   $452 = $3;
   $453 = (_exGlobal($450,$451,$452,0)|0);
   $454 = ($453|0)!=(0);
   if (!($454)) {
    $455 = $10;
    $456 = (($455) + 1)|0;
    $10 = $456;
   }
   break;
  }
  case 55:  {
   _show_message(12620,$vararg_buffer20);
   break;
  }
  case 57:  {
   $457 = HEAP32[$6>>2]|0;
   $458 = (_exWriteToFile(0,0,0,$457)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    $466 = $10;
    $467 = (($466) + 1)|0;
    $10 = $467;
    break L93;
   }
   $460 = HEAP32[$5>>2]|0;
   $461 = HEAP32[$6>>2]|0;
   $462 = (_exNext(0,$460,$461)|0);
   $463 = ($462|0)!=(0);
   if (!($463)) {
    $464 = $10;
    $465 = (($464) + 1)|0;
    $10 = $465;
   }
   break;
  }
  case 58:  {
   $468 = $3;
   $469 = HEAP32[$6>>2]|0;
   _exWQ($468,$469);
   $470 = HEAP32[4325]|0;
   $471 = ($470|0)!=(6);
   if ($471) {
    $472 = $10;
    $473 = (($472) + 1)|0;
    $10 = $473;
   }
   break;
  }
  case 59:  {
   $474 = $3;
   $475 = ($474|0)!=(0|0);
   if ($475) {
    $476 = $3;
    $477 = HEAP8[$476>>0]|0;
    $478 = $477 << 24 >> 24;
    $479 = ($478|0)==(62);
    if ($479) {
     $480 = $3;
     $481 = ((($480)) + 1|0);
     $482 = HEAP8[$481>>0]|0;
     $483 = $482 << 24 >> 24;
     $484 = ($483|0)==(62);
     if (!($484)) {
      _show_error(6352,$vararg_buffer22);
      $500 = $10;
      $501 = (($500) + 1)|0;
      $10 = $501;
      break L93;
     }
     $485 = $3;
     $486 = ((($485)) + 2|0);
     $3 = $486;
     while(1) {
      $487 = $3;
      $488 = HEAP8[$487>>0]|0;
      $489 = $488 << 24 >> 24;
      $490 = ($489|0)==(32);
      if ($490) {
       $580 = 1;
      } else {
       $491 = $3;
       $492 = HEAP8[$491>>0]|0;
       $493 = $492 << 24 >> 24;
       $494 = ($493|0)==(9);
       $580 = $494;
      }
      $495 = $3;
      if (!($580)) {
       break;
      }
      $496 = ((($495)) + 1|0);
      $3 = $496;
     }
     $497 = HEAP8[$495>>0]|0;
     $498 = $497 << 24 >> 24;
     $499 = ($498|0)==(0);
     if ($499) {
      $3 = 0;
     }
     $502 = $3;
     $503 = HEAP32[4168]|0;
     $504 = HEAP32[4169]|0;
     $505 = HEAP32[$6>>2]|0;
     $506 = (_exAppendToFile($502,$503,$504,$505)|0);
     $507 = ($506|0)!=(0);
     if ($507) {
      break L93;
     }
     $508 = $10;
     $509 = (($508) + 1)|0;
     $10 = $509;
     break L93;
    }
   }
   $510 = $3;
   $511 = HEAP32[4168]|0;
   $512 = HEAP32[4169]|0;
   $513 = HEAP32[$6>>2]|0;
   $514 = (_exWriteToFile($510,$511,$512,$513)|0);
   $515 = ($514|0)!=(0);
   if (!($515)) {
    $516 = $10;
    $517 = (($516) + 1)|0;
    $10 = $517;
   }
   break;
  }
  case 60:  {
   $518 = (_exXit()|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    $520 = $10;
    $521 = (($520) + 1)|0;
    $10 = $521;
   }
   break;
  }
  case 61:  {
   $522 = HEAP32[4168]|0;
   $523 = HEAP32[4169]|0;
   $524 = (_exLineOperation(121,$522,$523,0)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    $526 = $10;
    $527 = (($526) + 1)|0;
    $10 = $527;
   }
   break;
  }
  case 5:  {
   $528 = $3;
   $529 = HEAP8[$528>>0]|0;
   $530 = $529 << 24 >> 24;
   _yp_stuff_input($530,0,0);
   break;
  }
  case 7:  {
   $531 = HEAP32[4168]|0;
   _exEquals($531);
   break;
  }
  case 8: case 6:  {
   $532 = HEAP32[4168]|0;
   $533 = ($532|0)==(0|0);
   if ($533) {
    $534 = HEAP32[4327]|0;
    $535 = HEAP32[$534>>2]|0;
    $536 = HEAP32[$535>>2]|0;
    HEAP32[4168] = $536;
   }
   $537 = HEAP32[4169]|0;
   $538 = ($537|0)==(0|0);
   if ($538) {
    $539 = HEAP32[4168]|0;
    HEAP32[4169] = $539;
   }
   $540 = $7;
   $541 = ($540|0)==(6);
   $542 = $541 ? 60 : 62;
   $543 = HEAP32[4168]|0;
   $544 = HEAP32[4169]|0;
   _tabinout($542,$543,$544);
   _begin_line(1);
   _xvUpdateAllBufferWindows();
   break;
  }
  case 1:  {
   $545 = HEAP32[4168]|0;
   $546 = ($545|0)!=(0|0);
   if ($546) {
    $547 = HEAP32[4169]|0;
    $548 = ($547|0)!=(0|0);
    if ($548) {
     $549 = HEAP32[4169]|0;
     HEAP32[4168] = $549;
    }
    $550 = HEAP32[4168]|0;
    $551 = HEAP32[4326]|0;
    $552 = HEAP32[$551>>2]|0;
    $553 = ($550|0)==($552|0);
    if ($553) {
     $554 = HEAP32[4168]|0;
     $555 = ((($554)) + 4|0);
     $556 = HEAP32[$555>>2]|0;
     HEAP32[4168] = $556;
    }
    $557 = HEAP32[4168]|0;
    _move_cursor($557,0);
    _begin_line(1);
   }
   break;
  }
  case -1:  {
   _badcmd(6382);
   break;
  }
  case -2:  {
   _badcmd(6403);
   break;
  }
  case -3:  {
   _badcmd(6421);
   break;
  }
  case -4:  {
   _badcmd(6444);
   break;
  }
  case 62: case 51: case 42: case 36: case 27: case 63: case 23: case 15: case 11: case 10:  {
   _badcmd(6514);
   $560 = $10;
   $561 = (($560) + 1)|0;
   $10 = $561;
   break;
  }
  default: {
   _badcmd(6474);
   $558 = $10;
   $559 = (($558) + 1)|0;
   $10 = $559;
  }
  }
 } while(0);
 $562 = $10;
 $563 = ($562|0)!=(0);
 if ($563) {
  _unstuff();
 }
 $564 = $9;
 HEAP32[4328] = $564;
 $565 = HEAP32[$4>>2]|0;
 $566 = ($565|0)>(0);
 $567 = HEAP32[$5>>2]|0;
 $568 = ($567|0)!=(0|0);
 $or$cond12 = $566 & $568;
 if ($or$cond12) {
  $569 = HEAP32[$5>>2]|0;
  _free($569);
 }
 $570 = $10;
 $571 = ($570|0)!=(0);
 $572 = $7;
 $573 = ($572|0)<(0);
 $574 = $571 ? 1 : $573;
 $575 = $574 ^ 1;
 $576 = $575&1;
 $1 = $576;
 $577 = $1;
 STACKTOP = sp;return ($577|0);
}
function _badcmd($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4217]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  _show_error($4,$vararg_buffer);
 }
 _unstuff();
 STACKTOP = sp;return;
}
function _expand_percents($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_strpbrk($5,6537)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  $1 = $8;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 HEAP32[(16724)>>2] = 0;
 HEAP32[(16720)>>2] = 0;
 $4 = 0;
 $9 = $2;
 $3 = $9;
 L5: while(1) {
  $10 = $3;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 24;
   break;
  }
  $14 = $4;
  $15 = ($14|0)!=(0);
  $16 = $3;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  L8: do {
   if ($15) {
    $34 = ($18|0)!=(37);
    if ($34) {
     $35 = $3;
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $38 = ($37|0)!=(35);
     if ($38) {
      $39 = (_flexaddch(16712,92)|0);
      $40 = ($39|0)!=(0);
      if (!($40)) {
       label = 19;
       break L5;
      }
     }
    }
    $41 = $3;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = (_flexaddch(16712,$43)|0);
    $45 = ($44|0)!=(0);
    if (!($45)) {
     label = 21;
     break L5;
    }
    $4 = 0;
   } else {
    switch ($18|0) {
    case 37:  {
     $19 = HEAP32[4326]|0;
     $20 = ((($19)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      label = 8;
      break L5;
     }
     $23 = HEAP32[4326]|0;
     $24 = ((($23)) + 20|0);
     $25 = HEAP32[$24>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $25;
     (_lformat(16712,12801,$vararg_buffer1)|0);
     break L8;
     break;
    }
    case 35:  {
     $26 = (_alt_file_name()|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      label = 11;
      break L5;
     }
     $28 = (_alt_file_name()|0);
     HEAP32[$vararg_buffer5>>2] = $28;
     (_lformat(16712,12801,$vararg_buffer5)|0);
     break L8;
     break;
    }
    case 92:  {
     $4 = 1;
     break L8;
     break;
    }
    default: {
     $29 = $3;
     $30 = HEAP8[$29>>0]|0;
     $31 = $30 << 24 >> 24;
     $32 = (_flexaddch(16712,$31)|0);
     $33 = ($32|0)!=(0);
     if ($33) {
      break L8;
     } else {
      label = 15;
      break L5;
     }
    }
    }
   }
  } while(0);
  $46 = $3;
  $47 = ((($46)) + 1|0);
  $3 = $47;
 }
 if ((label|0) == 8) {
  _show_error(6540,$vararg_buffer);
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 11) {
  _show_error(6568,$vararg_buffer3);
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 15) {
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 19) {
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 21) {
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 24) {
  $48 = (_flexgetstr(16712)|0);
  $1 = $48;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _show_line() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[4171]|0;
 $3 = HEAP32[4172]|0;
 $4 = ($2|0)==($3|0);
 if ($4) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $5 = HEAP32[4171]|0;
 $1 = $5;
 $6 = HEAP32[4171]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[4171] = $8;
 $9 = HEAP32[4173]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  HEAP32[(16708)>>2] = 0;
  HEAP32[(16704)>>2] = 0;
  $11 = $1;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  (_lformat(16696,11776,$vararg_buffer)|0);
  $14 = $1;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  (_lformat(16696,12801,$vararg_buffer1)|0);
  $17 = (_flexgetstr(16696)|0);
  $0 = $17;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cmd_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4182]|0;
 $3 = ($2>>>0)>(0);
 if ($3) {
  _show_error(6598,$vararg_buffer);
  STACKTOP = sp;return;
 }
 HEAP32[4183] = 0;
 $4 = (_cmd_buf_alloc()|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAP32[4325] = 4;
 $6 = HEAP32[4327]|0;
 $7 = ((($6)) + 36|0);
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 36|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[4327]|0;
 $13 = ((($12)) + 36|0);
 $14 = $1;
 (_flexaddch($13,$14)|0);
 $15 = $1;
 $16 = $15&255;
 $17 = HEAP32[4184]|0;
 HEAP8[$17>>0] = $16;
 $18 = HEAP32[4184]|0;
 $19 = ((($18)) + 1|0);
 HEAP8[$19>>0] = 0;
 $20 = HEAP32[4185]|0;
 HEAP16[$20>>1] = 0;
 HEAP32[4182] = 1;
 HEAP32[4183] = 1;
 $21 = HEAP32[4185]|0;
 $22 = ((($21)) + 2|0);
 HEAP16[$22>>1] = 1;
 _update_cline();
 STACKTOP = sp;return;
}
function _cmd_buf_alloc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = HEAP32[4186]|0;
 $5 = ($4|0)==(0);
 $6 = HEAP32[4186]|0;
 $7 = (($6) + 80)|0;
 $8 = $5 ? 80 : $7;
 $1 = $8;
 $9 = HEAP32[4184]|0;
 $10 = $1;
 $11 = (_re_alloc($9,$10)|0);
 $2 = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  _show_error(6649,$vararg_buffer);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $13 = HEAP32[4185]|0;
 $14 = $1;
 $15 = $14<<1;
 $16 = (_re_alloc($13,$15)|0);
 $3 = $16;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $2;
  _free($18);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $19 = $1;
  HEAP32[4186] = $19;
  $20 = $2;
  HEAP32[4184] = $20;
  $21 = $3;
  HEAP32[4185] = $21;
  $0 = 1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _cmd_input($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $12 = sp + 8|0;
 $2 = $0;
 $14 = HEAP8[19093]|0;
 $15 = ($14<<24>>24)!=(0);
 do {
  if ($15) {
   HEAP8[19093] = 0;
   $16 = HEAP32[4193]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP8[11849]|0;
    $19 = $18 << 24 >> 24;
    $2 = $19;
    label = 5;
    break;
   } else {
    HEAP32[4331] = 1;
    break;
   }
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = $2;
   $21 = ($20|0)==(0);
   if ($21) {
    _beep();
    $1 = 1;
    $299 = $1;
    STACKTOP = sp;return ($299|0);
   }
   $22 = HEAP32[4183]|0;
   $23 = HEAP32[4186]|0;
   $24 = (($23) - 40)|0;
   $25 = ($22>>>0)>=($24>>>0);
   if ($25) {
    $26 = (_cmd_buf_alloc()|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     $28 = HEAP32[4184]|0;
     _free($28);
     $29 = HEAP32[4185]|0;
     _free($29);
     HEAP32[4186] = 0;
     HEAP32[4182] = 0;
     HEAP32[4183] = 0;
     $30 = HEAP32[4184]|0;
     $31 = HEAP32[4183]|0;
     $32 = (($30) + ($31)|0);
     HEAP8[$32>>0] = 0;
     HEAP32[4325] = 0;
     $1 = 2;
     $299 = $1;
     STACKTOP = sp;return ($299|0);
    }
   }
   $33 = HEAP32[4193]|0;
   $34 = ($33|0)!=(0);
   L17: do {
    if ($34) {
     $204 = HEAP32[4182]|0;
     $205 = (($204) + -1)|0;
     HEAP32[4182] = $205;
     $206 = HEAP32[4183]|0;
     $207 = (($206) + -1)|0;
     HEAP32[4183] = $207;
     $208 = HEAP32[4184]|0;
     $209 = HEAP32[4182]|0;
     $210 = (($208) + ($209)|0);
     $211 = HEAP32[4184]|0;
     $212 = HEAP32[4182]|0;
     $213 = (($211) + ($212)|0);
     $214 = ((($213)) + 1|0);
     $215 = HEAP32[4183]|0;
     $216 = HEAP32[4182]|0;
     $217 = (($215) - ($216))|0;
     _memmove(($210|0),($214|0),($217|0))|0;
     $218 = HEAP32[4182]|0;
     $10 = $218;
     $219 = HEAP32[4185]|0;
     $220 = $10;
     $221 = (($219) + ($220<<1)|0);
     $11 = $221;
     while(1) {
      $222 = $10;
      $223 = HEAP32[4183]|0;
      $224 = ($222>>>0)<=($223>>>0);
      if (!($224)) {
       break;
      }
      $225 = $11;
      $226 = ((($225)) + 2|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = $227&65535;
      $229 = (($228) - 1)|0;
      $230 = $229&65535;
      $231 = $11;
      HEAP16[$231>>1] = $230;
      $232 = $10;
      $233 = (($232) + 1)|0;
      $10 = $233;
      $234 = $11;
      $235 = ((($234)) + 2|0);
      $11 = $235;
     }
     $236 = HEAP32[4327]|0;
     $237 = ((($236)) + 36|0);
     $238 = HEAP32[4185]|0;
     $239 = HEAP32[4182]|0;
     $240 = (($238) + ($239<<1)|0);
     $241 = HEAP16[$240>>1]|0;
     $242 = $241&65535;
     (_flexrm($237,$242,1)|0);
     HEAP32[4193] = 0;
    } else {
     $35 = $2;
     do {
      switch ($35|0) {
      case 27:  {
       break L6;
       break;
      }
      case 22: case 17:  {
       HEAP32[4193] = 1;
       $2 = 94;
       break L17;
       break;
      }
      case 13: case 10:  {
       $36 = HEAP32[4184]|0;
       $37 = HEAP32[4183]|0;
       $38 = (($36) + ($37)|0);
       HEAP8[$38>>0] = 0;
       HEAP32[4182] = 0;
       HEAP32[4183] = 0;
       HEAP32[4325] = 0;
       $1 = 0;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 23: case 140: case 127: case 8:  {
       $39 = HEAP32[4182]|0;
       $5 = $39;
       $40 = $2;
       L29: do {
        switch ($40|0) {
        case 8: case 127:  {
         $41 = HEAP32[4182]|0;
         $42 = (($41) + -1)|0;
         HEAP32[4182] = $42;
         break;
        }
        case 140:  {
         $43 = HEAP32[4182]|0;
         $44 = HEAP32[4183]|0;
         $45 = ($43>>>0)<($44>>>0);
         if ($45) {
          $46 = $5;
          $47 = (($46) + 1)|0;
          $5 = $47;
         }
         break;
        }
        case 23:  {
         while(1) {
          $48 = HEAP32[4182]|0;
          $49 = ($48>>>0)>(1);
          if (!($49)) {
           break;
          }
          $50 = HEAP32[4184]|0;
          $51 = HEAP32[4182]|0;
          $52 = (($51) - 1)|0;
          $53 = (($50) + ($52)|0);
          $54 = HEAP8[$53>>0]|0;
          $55 = $54 << 24 >> 24;
          $7 = $55;
          $56 = $7;
          $57 = ($56|0)==(32);
          $58 = $7;
          $59 = ($58|0)==(9);
          $60 = $57 ? 1 : $59;
          if (!($60)) {
           break;
          }
          $61 = HEAP32[4182]|0;
          $62 = (($61) + -1)|0;
          HEAP32[4182] = $62;
         }
         while(1) {
          $63 = HEAP32[4182]|0;
          $64 = ($63>>>0)>(1);
          if (!($64)) {
           break L29;
          }
          $65 = HEAP32[4184]|0;
          $66 = HEAP32[4182]|0;
          $67 = (($66) - 1)|0;
          $68 = (($65) + ($67)|0);
          $69 = HEAP8[$68>>0]|0;
          $70 = $69 << 24 >> 24;
          $7 = $70;
          $71 = $7;
          $72 = ($71|0)==(32);
          $73 = $7;
          $74 = ($73|0)==(9);
          $75 = $72 ? 1 : $74;
          $76 = $75 ^ 1;
          if (!($76)) {
           break L29;
          }
          $77 = HEAP32[4182]|0;
          $78 = (($77) + -1)|0;
          HEAP32[4182] = $78;
         }
         break;
        }
        default: {
        }
        }
       } while(0);
       $79 = HEAP32[4185]|0;
       $80 = $5;
       $81 = (($79) + ($80<<1)|0);
       $82 = HEAP16[$81>>1]|0;
       $83 = $82&65535;
       $84 = HEAP32[4185]|0;
       $85 = HEAP32[4182]|0;
       $86 = (($84) + ($85<<1)|0);
       $87 = HEAP16[$86>>1]|0;
       $88 = $87&65535;
       $89 = (($83) - ($88))|0;
       $3 = $89;
       $90 = HEAP32[4184]|0;
       $91 = HEAP32[4182]|0;
       $92 = (($90) + ($91)|0);
       $93 = HEAP32[4184]|0;
       $94 = $5;
       $95 = (($93) + ($94)|0);
       $96 = HEAP32[4183]|0;
       $97 = $5;
       $98 = (($96) - ($97))|0;
       _memmove(($92|0),($95|0),($98|0))|0;
       $99 = HEAP32[4185]|0;
       $100 = HEAP32[4182]|0;
       $101 = (($99) + ($100<<1)|0);
       $102 = HEAP32[4185]|0;
       $103 = $5;
       $104 = (($102) + ($103<<1)|0);
       $105 = HEAP32[4183]|0;
       $106 = $5;
       $107 = (($105) - ($106))|0;
       $108 = (($107) + 1)|0;
       $109 = $108<<1;
       _memmove(($101|0),($104|0),($109|0))|0;
       $110 = $5;
       $111 = HEAP32[4182]|0;
       $112 = (($110) - ($111))|0;
       $113 = HEAP32[4183]|0;
       $114 = (($113) - ($112))|0;
       HEAP32[4183] = $114;
       $115 = HEAP32[4182]|0;
       $6 = $115;
       while(1) {
        $116 = $6;
        $117 = HEAP32[4183]|0;
        $118 = ($116>>>0)<=($117>>>0);
        if (!($118)) {
         break;
        }
        $119 = $3;
        $120 = HEAP32[4185]|0;
        $121 = $6;
        $122 = (($120) + ($121<<1)|0);
        $123 = HEAP16[$122>>1]|0;
        $124 = $123&65535;
        $125 = (($124) - ($119))|0;
        $126 = $125&65535;
        HEAP16[$122>>1] = $126;
        $127 = $6;
        $128 = (($127) + 1)|0;
        $6 = $128;
       }
       $129 = HEAP32[4327]|0;
       $130 = ((($129)) + 36|0);
       $131 = HEAP32[4185]|0;
       $132 = HEAP32[4182]|0;
       $133 = (($131) + ($132<<1)|0);
       $134 = HEAP16[$133>>1]|0;
       $135 = $134&65535;
       $136 = $3;
       (_flexrm($130,$135,$136)|0);
       $137 = HEAP32[4182]|0;
       $138 = ($137|0)==(0);
       if ($138) {
        HEAP32[4325] = 0;
        $1 = 2;
        $299 = $1;
        STACKTOP = sp;return ($299|0);
       } else {
        $139 = HEAP32[4184]|0;
        $140 = HEAP32[4183]|0;
        $141 = (($139) + ($140)|0);
        HEAP8[$141>>0] = 0;
        _update_cline();
        $1 = 1;
        $299 = $1;
        STACKTOP = sp;return ($299|0);
       }
       break;
      }
      case 9:  {
       $142 = HEAP32[4184]|0;
       $143 = HEAP32[4183]|0;
       $144 = (($142) + ($143)|0);
       HEAP8[$144>>0] = 0;
       $145 = HEAP32[4184]|0;
       $146 = (_should_fexpand($145)|0);
       $147 = ($146|0)!=(0);
       if (!($147)) {
        break L17;
       }
       $148 = HEAP32[4184]|0;
       $149 = HEAP32[4183]|0;
       $150 = (($148) + ($149)|0);
       HEAP8[$150>>0] = 0;
       $151 = HEAP32[4184]|0;
       $152 = (_strrchr($151,32)|0);
       $8 = $152;
       $153 = $8;
       $154 = ($153|0)==(0|0);
       if (!($154)) {
        $155 = $8;
        $156 = ((($155)) + 1|0);
        $157 = HEAP8[$156>>0]|0;
        $158 = $157 << 24 >> 24;
        $159 = ($158|0)==(0);
        if (!($159)) {
         $160 = $8;
         $161 = ((($160)) + 1|0);
         $8 = $161;
         $162 = $8;
         $163 = (_fexpand($162,1)|0);
         $9 = $163;
         $164 = $9;
         $165 = HEAP8[$164>>0]|0;
         $166 = $165 << 24 >> 24;
         $167 = ($166|0)!=(0);
         if ($167) {
          $168 = $8;
          $169 = HEAP32[4184]|0;
          $170 = $168;
          $171 = $169;
          $172 = (($170) - ($171))|0;
          $173 = (($172) - 1)|0;
          HEAP32[4182] = $173;
          HEAP32[4183] = $173;
          $174 = HEAP32[4185]|0;
          $175 = HEAP32[4182]|0;
          $176 = (($175) - 1)|0;
          $177 = (($174) + ($176<<1)|0);
          $178 = HEAP16[$177>>1]|0;
          $179 = $178&65535;
          $180 = (($179) + 1)|0;
          $3 = $180;
          $181 = $9;
          $182 = (_common_prefix($181)|0);
          $183 = ($182|0)>(1);
          if ($183) {
           _beep();
          }
          $184 = $9;
          HEAP32[$vararg_buffer>>2] = $184;
          _stuff(10859,$vararg_buffer);
         } else {
          _beep();
         }
         $1 = 1;
         $299 = $1;
         STACKTOP = sp;return ($299|0);
        }
       }
       _beep();
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 21: case -1:  {
       HEAP32[4182] = 1;
       HEAP32[4183] = 1;
       $185 = HEAP32[4184]|0;
       $186 = HEAP32[4183]|0;
       $187 = (($185) + ($186)|0);
       HEAP8[$187>>0] = 0;
       $188 = HEAP32[4327]|0;
       $189 = ((($188)) + 36|0);
       $190 = ((($189)) + 12|0);
       HEAP32[$190>>2] = 1;
       _update_cline();
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 134:  {
       $194 = HEAP32[4182]|0;
       $195 = ($194>>>0)>(1);
       if ($195) {
        $196 = HEAP32[4182]|0;
        $197 = (($196) + -1)|0;
        HEAP32[4182] = $197;
        _update_cline();
       } else {
        _beep();
       }
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 135:  {
       $198 = HEAP32[4182]|0;
       $199 = HEAP32[4183]|0;
       $200 = ($198>>>0)<($199>>>0);
       if ($200) {
        $201 = HEAP32[4182]|0;
        $202 = (($201) + 1)|0;
        HEAP32[4182] = $202;
        _update_cline();
       } else {
        _beep();
       }
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 131:  {
       HEAP32[4182] = 1;
       _update_cline();
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 139:  {
       $203 = HEAP32[4183]|0;
       HEAP32[4182] = $203;
       _update_cline();
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 128:  {
       _stuff_to_map(6700);
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      case 138: case 137: case 136: case 133: case 132: case 130: case 129:  {
       _beep();
       $1 = 1;
       $299 = $1;
       STACKTOP = sp;return ($299|0);
       break;
      }
      default: {
       break L17;
      }
      }
     } while(0);
    }
   } while(0);
   $243 = $2;
   $244 = (_vischar($243,$12,-1)|0);
   $4 = $244;
   $245 = HEAP32[4183]|0;
   $246 = HEAP32[4186]|0;
   $247 = ($245>>>0)>=($246>>>0);
   if ($247) {
    $248 = (_cmd_buf_alloc()|0);
    $249 = ($248|0)!=(0);
    if (!($249)) {
     $250 = HEAP32[4184]|0;
     _free($250);
     $251 = HEAP32[4185]|0;
     _free($251);
     HEAP32[4186] = 0;
     HEAP32[4182] = 0;
     HEAP32[4183] = 0;
     $252 = HEAP32[4184]|0;
     $253 = HEAP32[4183]|0;
     $254 = (($252) + ($253)|0);
     HEAP8[$254>>0] = 0;
     HEAP32[4325] = 0;
     $1 = 2;
     $299 = $1;
     STACKTOP = sp;return ($299|0);
    }
   }
   $255 = HEAP32[4327]|0;
   $256 = ((($255)) + 36|0);
   $257 = HEAP32[4185]|0;
   $258 = HEAP32[4182]|0;
   $259 = (($257) + ($258<<1)|0);
   $260 = HEAP16[$259>>1]|0;
   $261 = $260&65535;
   $262 = HEAP32[$12>>2]|0;
   (_flexinsstr($256,$261,$262)|0);
   $263 = HEAP32[4183]|0;
   $264 = (($263) + 1)|0;
   HEAP32[4183] = $264;
   $265 = HEAP32[4184]|0;
   $266 = HEAP32[4182]|0;
   $267 = (($265) + ($266)|0);
   $268 = ((($267)) + 1|0);
   $269 = HEAP32[4184]|0;
   $270 = HEAP32[4182]|0;
   $271 = (($269) + ($270)|0);
   $272 = HEAP32[4183]|0;
   $273 = HEAP32[4182]|0;
   $274 = (($272) - ($273))|0;
   _memmove(($268|0),($271|0),($274|0))|0;
   $275 = HEAP32[4183]|0;
   $13 = $275;
   while(1) {
    $276 = $13;
    $277 = HEAP32[4182]|0;
    $278 = ($276>>>0)>($277>>>0);
    if (!($278)) {
     break;
    }
    $279 = HEAP32[4185]|0;
    $280 = $13;
    $281 = (($280) - 1)|0;
    $282 = (($279) + ($281<<1)|0);
    $283 = HEAP16[$282>>1]|0;
    $284 = $283&65535;
    $285 = $4;
    $286 = (($284) + ($285))|0;
    $287 = $286&65535;
    $288 = HEAP32[4185]|0;
    $289 = $13;
    $290 = (($288) + ($289<<1)|0);
    HEAP16[$290>>1] = $287;
    $291 = $13;
    $292 = (($291) + -1)|0;
    $13 = $292;
   }
   $293 = $2;
   $294 = $293&255;
   $295 = HEAP32[4184]|0;
   $296 = HEAP32[4182]|0;
   $297 = (($296) + 1)|0;
   HEAP32[4182] = $297;
   $298 = (($295) + ($296)|0);
   HEAP8[$298>>0] = $294;
   _update_cline();
   $1 = 1;
   $299 = $1;
   STACKTOP = sp;return ($299|0);
  }
 } while(0);
 HEAP32[4182] = 0;
 HEAP32[4183] = 0;
 $191 = HEAP32[4184]|0;
 $192 = HEAP32[4183]|0;
 $193 = (($191) + ($192)|0);
 HEAP8[$193>>0] = 0;
 HEAP32[4325] = 0;
 _update_cline();
 $1 = 2;
 $299 = $1;
 STACKTOP = sp;return ($299|0);
}
function _common_prefix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $1 = $0;
 $8 = $1;
 _makeargv($8,$2,$3,9853);
 $9 = HEAP32[$2>>2]|0;
 $10 = ($9|0)>(1);
 if (!($10)) {
  $34 = HEAP32[$3>>2]|0;
  _free($34);
  $35 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 $4 = 1;
 while(1) {
  $11 = $4;
  $12 = HEAP32[$2>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $5 = $14;
  $15 = HEAP32[$3>>2]|0;
  $16 = $4;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $6 = $18;
  while(1) {
   $19 = $5;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $7 = $21;
   $22 = $6;
   $23 = ((($22)) + 1|0);
   $6 = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($21|0)==($25|0);
   $27 = $7;
   $28 = ($27|0)!=(0);
   $29 = $26 ? $28 : 0;
   $30 = $5;
   if (!($29)) {
    break;
   }
   $31 = ((($30)) + 1|0);
   $5 = $31;
  }
  HEAP8[$30>>0] = 0;
  $32 = $4;
  $33 = (($32) + 1)|0;
  $4 = $33;
 }
 $34 = HEAP32[$3>>2]|0;
 _free($34);
 $35 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _get_cmd() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4184]|0;
 return ($0|0);
}
function _get_pos() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4185]|0;
 $1 = HEAP32[4182]|0;
 $2 = (($0) + ($1<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = HEAP32[4193]|0;
 $6 = (($4) - ($5))|0;
 return ($6|0);
}
function _cursupdate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4327]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[4327]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_cntplines($2,$5)|0);
 $7 = HEAP32[4327]|0;
 $8 = ((($7)) + 52|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[4327]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_plines($11)|0);
 $13 = HEAP32[4327]|0;
 $14 = ((($13)) + 72|0);
 HEAP32[$14>>2] = $12;
 _calc_position_in_line();
 return;
}
function _calc_position_in_line() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond3$not = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = HEAP32[4327]|0;
 $0 = $8;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $7;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $5 = $17;
 $18 = HEAP32[(3708)>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $19 ? 8 : 0;
 $3 = $20;
 $4 = 0;
 $1 = 0;
 while(1) {
  $21 = $1;
  $22 = $5;
  $23 = ($21|0)<=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = $3;
  $26 = (($25) + ($24))|0;
  $3 = $26;
  $27 = $2;
  $28 = $1;
  $29 = (($28) + 1)|0;
  $1 = $29;
  $30 = (($27) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $6 = $32;
  $33 = $3;
  $34 = (_vischar($32,0,$33)|0);
  $4 = $34;
 }
 $35 = HEAP32[4325]|0;
 $36 = ($35|0)!=(2);
 $37 = $6;
 $38 = ($37|0)==(9);
 $or$cond = $36 & $38;
 $or$cond$not = $or$cond ^ 1;
 $39 = HEAP32[(3564)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond3 = $or$cond$not | $40;
 $or$cond3$not = $or$cond3 ^ 1;
 $41 = HEAP32[(4308)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond5 = $or$cond3$not & $42;
 if ($or$cond5) {
  $43 = $4;
  $44 = (($43) - 1)|0;
  $45 = $3;
  $46 = (($45) + ($44))|0;
  $3 = $46;
 }
 $47 = $3;
 $48 = HEAP32[(3708)>>2]|0;
 $49 = ($48|0)!=(0);
 $50 = $49 ? 8 : 0;
 $51 = (($47) - ($50))|0;
 $52 = $0;
 $53 = ((($52)) + 60|0);
 HEAP32[$53>>2] = $51;
 while(1) {
  $54 = $3;
  $55 = $0;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54>>>0)>=($57>>>0);
  if (!($58)) {
   break;
  }
  $59 = $0;
  $60 = ((($59)) + 52|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
  $63 = $0;
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = (($66) - ($65))|0;
  $3 = $67;
 }
 $68 = $3;
 $69 = $0;
 $70 = ((($69)) + 56|0);
 HEAP32[$70>>2] = $68;
 $71 = $0;
 $72 = ((($71)) + 52|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $0;
 $75 = ((($74)) + 20|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) - 1)|0;
 $78 = ($73>>>0)>=($77>>>0);
 if ($78) {
  $79 = $0;
  $80 = ((($79)) + 20|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) - 2)|0;
  $83 = $0;
  $84 = ((($83)) + 52|0);
  HEAP32[$84>>2] = $82;
 }
 $85 = $0;
 $86 = ((($85)) + 68|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = $0;
 $90 = ((($89)) + 60|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $0;
 $93 = ((($92)) + 64|0);
 HEAP32[$93>>2] = $91;
 $94 = $0;
 $95 = ((($94)) + 68|0);
 HEAP32[$95>>2] = 0;
 STACKTOP = sp;return;
}
function _disp_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[4325] = 5;
 $6 = $3;
 HEAP32[4187] = $6;
 $7 = $4;
 $8 = HEAP32[4327]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)>($10>>>0);
 if ($11) {
  $12 = HEAP32[4327]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $4 = $14;
 }
 $15 = $4;
 HEAP32[4188] = $15;
 $16 = HEAP32[4327]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = (($18>>>0) / ($19>>>0))&-1;
 $21 = $4;
 $22 = Math_imul($20, $21)|0;
 HEAP32[4189] = $22;
 $23 = $5;
 HEAP32[4190] = $23;
 (_disp_screen(0)|0);
 STACKTOP = sp;return;
}
function _disp_screen($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $2 = $0;
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = HEAP32[4191]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP8[19093]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   _xvClear();
   $4 = 0;
   L4: while(1) {
    $23 = $4;
    $24 = HEAP32[4189]|0;
    $25 = ($23|0)<($24|0);
    if (!($25)) {
     label = 26;
     break;
    }
    $3 = 0;
    while(1) {
     $26 = $3;
     $27 = $5;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) - 1)|0;
     $31 = ($26>>>0)<($30>>>0);
     if (!($31)) {
      break;
     }
     $32 = HEAP32[4192]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      $34 = HEAP32[4187]|0;
      $35 = (FUNCTION_TABLE_i[$34 & 63]()|0);
      HEAP32[4192] = $35;
      $36 = ($35|0)==(0|0);
      if ($36) {
       label = 14;
       break L4;
      }
     }
     $6 = 0;
     while(1) {
      $37 = HEAP32[4192]|0;
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = ($39|0)!=(0);
      if (!($40)) {
       break;
      }
      $41 = HEAP32[4192]|0;
      $42 = HEAP8[$41>>0]|0;
      $43 = $42 << 24 >> 24;
      $44 = HEAP32[4190]|0;
      $45 = ($44|0)!=(0);
      $46 = $6;
      $47 = $45 ? -1 : $46;
      $48 = (_vischar($43,$7,$47)|0);
      $8 = $48;
      $49 = $8;
      $50 = $6;
      $51 = (($50) + ($49))|0;
      $6 = $51;
      $52 = HEAP32[4188]|0;
      $53 = ($51|0)<=($52|0);
      if (!($53)) {
       break;
      }
      $54 = $5;
      $55 = ((($54)) + 64|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $5;
      $58 = $3;
      $59 = $4;
      $60 = $6;
      $61 = (($59) + ($60))|0;
      $62 = $8;
      $63 = (($61) - ($62))|0;
      $64 = HEAP32[$7>>2]|0;
      FUNCTION_TABLE_viiii[$56 & 63]($57,$58,$63,$64);
      $65 = HEAP32[4192]|0;
      $66 = ((($65)) + 1|0);
      HEAP32[4192] = $66;
     }
     $67 = HEAP32[4192]|0;
     $68 = HEAP8[$67>>0]|0;
     $69 = $68 << 24 >> 24;
     $70 = ($69|0)==(0);
     do {
      if ($70) {
       $71 = HEAP32[4190]|0;
       $72 = ($71|0)!=(0);
       if ($72) {
        $73 = $6;
        $74 = HEAP32[4188]|0;
        $75 = ($73|0)<($74|0);
        if (!($75)) {
         break;
        }
        $76 = $5;
        $77 = ((($76)) + 68|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = $5;
        $80 = $3;
        $81 = $4;
        $82 = $6;
        $83 = (($81) + ($82))|0;
        FUNCTION_TABLE_viiii[$78 & 63]($79,$80,$83,36);
       }
       HEAP32[4192] = 0;
      }
     } while(0);
     $84 = $3;
     $85 = (($84) + 1)|0;
     $3 = $85;
    }
    $86 = HEAP32[4188]|0;
    $87 = $4;
    $88 = (($87) + ($86))|0;
    $4 = $88;
   }
   if ((label|0) == 14) {
    _prompt(11139);
    HEAP32[4191] = 1;
    $1 = 0;
    $89 = $1;
    STACKTOP = sp;return ($89|0);
   }
   else if ((label|0) == 26) {
    _prompt(6687);
    $1 = 0;
    $89 = $1;
    STACKTOP = sp;return ($89|0);
   }
  }
 }
 _move_window_to_cursor();
 _redraw_all(1);
 HEAP32[4325] = 0;
 $17 = HEAP32[4191]|0;
 $18 = ($17|0)!=(0);
 $19 = $2;
 $20 = ($19|0)==(58);
 $or$cond = $18 & $20;
 if ($or$cond) {
  _stuff(12804,$vararg_buffer);
 }
 HEAP32[4191] = 0;
 $21 = HEAP8[19093]|0;
 $22 = ($21<<24>>24)!=(0);
 if ($22) {
  HEAP8[19093] = 0;
  HEAP32[4331] = 1;
 }
 $1 = 1;
 $89 = $1;
 STACKTOP = sp;return ($89|0);
}
function _prompt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = HEAP32[4327]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 $3 = $10;
 $11 = $2;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = $3;
 FUNCTION_TABLE_viii[$13 & 31]($14,$15,0);
 $16 = $2;
 $17 = ((($16)) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = $2;
 $21 = ((($20)) + 24|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vii[$18 & 31]($19,$23);
 $24 = $2;
 $25 = ((($24)) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = $3;
 $29 = $1;
 FUNCTION_TABLE_viiii[$26 & 63]($27,$28,0,$29);
 $30 = $2;
 $31 = ((($30)) + 72|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $2;
 $34 = $2;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_vii[$32 & 31]($33,$36);
 $37 = $2;
 $38 = ((($37)) + 60|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $2;
 $41 = $3;
 $42 = $1;
 $43 = (_strlen($42)|0);
 FUNCTION_TABLE_viii[$39 & 31]($40,$41,$43);
 $44 = $2;
 $45 = ((($44)) + 80|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $2;
 FUNCTION_TABLE_vi[$46 & 127]($47);
 STACKTOP = sp;return;
}
function _i_proc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_ptr21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer27 = sp + 32|0;
 $vararg_buffer25 = sp + 24|0;
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer18 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 136|0;
 $23 = sp + 72|0;
 $29 = sp + 40|0;
 $2 = $0;
 $30 = HEAP32[4327]|0;
 $31 = HEAP32[$30>>2]|0;
 $3 = $31;
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = (_plines($33)|0);
 $5 = $34;
 $35 = HEAP8[19093]|0;
 $36 = ($35<<24>>24)!=(0);
 do {
  if ($36) {
   HEAP8[19093] = 0;
   $37 = HEAP32[4193]|0;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = HEAP8[11849]|0;
    $40 = $39 << 24 >> 24;
    $2 = $40;
    label = 5;
    break;
   } else {
    HEAP32[4331] = 1;
    HEAP32[4194] = 0;
    break;
   }
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $41 = HEAP32[4194]|0;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $43 = HEAP32[4193]|0;
    $44 = ($43|0)==(0);
    $45 = $2;
    $46 = ($45|0)==(1);
    $or$cond = $44 & $46;
    if (!($or$cond)) {
     $50 = HEAP32[4193]|0;
     $51 = ($50|0)!=(0);
     L11: do {
      if ($51) {
       $297 = $3;
       $298 = HEAP32[$297>>2]|0;
       $299 = $3;
       $300 = ((($299)) + 4|0);
       $301 = HEAP32[$300>>2]|0;
       _replchars($298,$301,1,19254);
       $302 = HEAP32[(16800)>>2]|0;
       $303 = HEAP32[(16804)>>2]|0;
       $304 = ($302>>>0)>=($303>>>0);
       if (!($304)) {
        $305 = HEAP32[(16804)>>2]|0;
        $306 = (($305) + -1)|0;
        HEAP32[(16804)>>2] = $306;
       }
       HEAP32[4193] = 0;
      } else {
       $52 = $2;
       switch ($52|0) {
       case 27:  {
        break L6;
        break;
       }
       case 0:  {
        $53 = $3;
        $54 = HEAP32[$53>>2]|0;
        $55 = HEAP32[4195]|0;
        $56 = ($54|0)==($55|0);
        if ($56) {
         $57 = $3;
         $58 = ((($57)) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = HEAP32[(16784)>>2]|0;
         $61 = ($59|0)==($60|0);
         if ($61) {
          _yp_stuff_input(60,1,0);
          HEAP32[$vararg_buffer>>2] = 27;
          _stuff(12683,$vararg_buffer);
         } else {
          label = 15;
         }
        } else {
         label = 15;
        }
        if ((label|0) == 15) {
         _beep();
        }
        $1 = 0;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       case 4: case 20:  {
        $109 = $2;
        $110 = ($109|0)==(4);
        do {
         if ($110) {
          $111 = $3;
          $112 = ((($111)) + 4|0);
          $113 = HEAP32[$112>>2]|0;
          $114 = HEAP32[4329]|0;
          $115 = (($114) + 1)|0;
          $116 = ($113|0)==($115|0);
          if ($116) {
           $117 = $3;
           ;HEAP32[$7>>2]=HEAP32[$117>>2]|0;HEAP32[$7+4>>2]=HEAP32[$117+4>>2]|0;
           (_dec($7)|0);
           $118 = HEAP32[$7>>2]|0;
           $119 = ((($118)) + 8|0);
           $120 = HEAP32[$119>>2]|0;
           $121 = ((($7)) + 4|0);
           $122 = HEAP32[$121>>2]|0;
           $123 = (($120) + ($122)|0);
           $124 = HEAP8[$123>>0]|0;
           $8 = $124;
           $125 = $8;
           $126 = $125 << 24 >> 24;
           $127 = ($126|0)==(48);
           if (!($127)) {
            $128 = $8;
            $129 = $128 << 24 >> 24;
            $130 = ($129|0)==(94);
            if (!($130)) {
             break;
            }
           }
           $131 = $8;
           $132 = $131 << 24 >> 24;
           $133 = ($132|0)==(94);
           if ($133) {
            $134 = $3;
            $135 = HEAP32[$134>>2]|0;
            $136 = (_get_indent($135)|0);
            HEAP32[4330] = $136;
           }
           $137 = $3;
           $138 = HEAP32[$137>>2]|0;
           $139 = HEAP32[4329]|0;
           $140 = (($139) + 1)|0;
           _replchars($138,0,$140,19254);
           $141 = $3;
           $142 = HEAP32[$141>>2]|0;
           $143 = (_set_indent($142,0)|0);
           HEAP32[4329] = $143;
           $144 = $3;
           $145 = HEAP32[$144>>2]|0;
           _move_cursor($145,0);
           _cursupdate();
           $146 = $5;
           $147 = $3;
           $148 = HEAP32[$147>>2]|0;
           $149 = (_plines($148)|0);
           $150 = ($146|0)!=($149|0);
           $151 = $150&1;
           _updateline($151);
           $152 = $2;
           (_flexaddch(16792,$152)|0);
           $1 = 1;
           $463 = $1;
           STACKTOP = sp;return ($463|0);
          }
         }
        } while(0);
        $153 = $3;
        $154 = ((($153)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = HEAP32[4329]|0;
        $157 = ($155|0)<=($156|0);
        $158 = HEAP32[(4116)>>2]|0;
        $159 = ($158|0)>(0);
        $or$cond3 = $157 & $159;
        if ($or$cond3) {
         $160 = HEAP32[(4116)>>2]|0;
         $11 = $160;
         $161 = $3;
         $162 = HEAP32[$161>>2]|0;
         $9 = $162;
         $163 = $3;
         $164 = HEAP32[$163>>2]|0;
         $165 = (_get_indent($164)|0);
         $10 = $165;
         $166 = $2;
         $167 = ($166|0)==(4);
         if ($167) {
          $168 = $10;
          $169 = (($168) - 1)|0;
          $170 = $11;
          $171 = (($169|0) / ($170|0))&-1;
          $172 = $11;
          $173 = Math_imul($171, $172)|0;
          $10 = $173;
         } else {
          $174 = $11;
          $175 = $10;
          $176 = $11;
          $177 = (($175|0) % ($176|0))&-1;
          $178 = (($174) - ($177))|0;
          $179 = $10;
          $180 = (($179) + ($178))|0;
          $10 = $180;
         }
         $181 = $9;
         $182 = $10;
         $183 = (_set_indent($181,$182)|0);
         HEAP32[4329] = $183;
         $184 = $3;
         $185 = HEAP32[$184>>2]|0;
         $186 = HEAP32[4329]|0;
         _move_cursor($185,$186);
         _cursupdate();
         $187 = $5;
         $188 = $3;
         $189 = HEAP32[$188>>2]|0;
         $190 = (_plines($189)|0);
         $191 = ($187|0)!=($190|0);
         $192 = $191&1;
         _updateline($192);
         $193 = $2;
         (_flexaddch(16792,$193)|0);
        } else {
         _beep();
        }
        $1 = 1;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       case 127: case 8:  {
        $194 = $3;
        $195 = HEAP32[$194>>2]|0;
        $196 = HEAP32[4195]|0;
        $197 = ($195|0)==($196|0);
        if ($197) {
         $198 = $3;
         $199 = ((($198)) + 4|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = HEAP32[(16784)>>2]|0;
         $202 = ($200|0)<=($201|0);
         if ($202) {
          _beep();
          $1 = 1;
          $463 = $1;
          STACKTOP = sp;return ($463|0);
         }
        }
        $203 = $3;
        $204 = HEAP32[$203>>2]|0;
        $205 = HEAP32[4195]|0;
        $206 = ($204|0)!=($205|0);
        if ($206) {
         $207 = $3;
         $208 = ((($207)) + 4|0);
         $209 = HEAP32[$208>>2]|0;
         $210 = ($209|0)<=(0);
         if ($210) {
          _beep();
          $1 = 1;
          $463 = $1;
          STACKTOP = sp;return ($463|0);
         }
        }
        (_one_left(0)|0);
        $211 = $3;
        $212 = ((($211)) + 4|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = HEAP32[4329]|0;
        $215 = ($213|0)<($214|0);
        if ($215) {
         $216 = HEAP32[4329]|0;
         $217 = (($216) + -1)|0;
         HEAP32[4329] = $217;
        }
        $218 = $3;
        $219 = HEAP32[$218>>2]|0;
        $220 = $3;
        $221 = ((($220)) + 4|0);
        $222 = HEAP32[$221>>2]|0;
        _replchars($219,$222,1,19254);
        (_flexaddch(16792,8)|0);
        _cursupdate();
        $223 = HEAP32[4327]|0;
        $224 = ((($223)) + 56|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = ($225|0)==(0);
        $227 = $226&1;
        _updateline($227);
        $1 = 1;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       case 23: case 21:  {
        $228 = $2;
        $229 = ($228|0)==(21);
        $230 = $3;
        do {
         if ($229) {
          $231 = HEAP32[$230>>2]|0;
          $232 = HEAP32[4195]|0;
          $233 = ($231|0)==($232|0);
          if ($233) {
           $234 = HEAP32[(16784)>>2]|0;
           $14 = $234;
           break;
          } else {
           $14 = 0;
           break;
          }
         } else {
          $235 = (_bck_word($230,0,1)|0);
          $15 = $235;
          $236 = $15;
          $237 = ($236|0)==(0|0);
          if ($237) {
           $1 = 1;
           $463 = $1;
           STACKTOP = sp;return ($463|0);
          }
          $238 = $15;
          $239 = ((($238)) + 4|0);
          $240 = HEAP32[$239>>2]|0;
          $14 = $240;
          $241 = $3;
          $242 = HEAP32[$241>>2]|0;
          $243 = HEAP32[4195]|0;
          $244 = ($242|0)==($243|0);
          if ($244) {
           $245 = $14;
           $246 = HEAP32[(16784)>>2]|0;
           $247 = ($245|0)<($246|0);
           if ($247) {
            $248 = HEAP32[(16784)>>2]|0;
            $14 = $248;
           }
          }
         }
        } while(0);
        $249 = $14;
        $250 = HEAP32[4329]|0;
        $251 = ($249|0)<($250|0);
        $252 = HEAP32[(3132)>>2]|0;
        $253 = ($252|0)!=(0);
        $or$cond5 = $251 & $253;
        if ($or$cond5) {
         $254 = HEAP32[4329]|0;
         $14 = $254;
        }
        $255 = $3;
        $256 = ((($255)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $14;
        $259 = ($257|0)<=($258|0);
        if ($259) {
         $1 = 1;
         $463 = $1;
         STACKTOP = sp;return ($463|0);
        } else {
         $260 = $3;
         $261 = HEAP32[$260>>2]|0;
         $262 = (_plines($261)|0);
         $12 = $262;
         $263 = $3;
         $264 = HEAP32[$263>>2]|0;
         $265 = $14;
         $266 = $3;
         $267 = ((($266)) + 4|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = $14;
         $270 = (($268) - ($269))|0;
         _replchars($264,$265,$270,19254);
         $271 = $3;
         $272 = HEAP32[$271>>2]|0;
         $273 = (_plines($272)|0);
         $13 = $273;
         $274 = $14;
         $275 = $3;
         $276 = ((($275)) + 4|0);
         HEAP32[$276>>2] = $274;
         $277 = $2;
         (_flexaddch(16792,$277)|0);
         _cursupdate();
         $278 = $12;
         $279 = $13;
         $280 = ($278|0)!=($279|0);
         $281 = $280&1;
         _updateline($281);
         $1 = 1;
         $463 = $1;
         STACKTOP = sp;return ($463|0);
        }
        break;
       }
       case 10: case 13:  {
        (_flexaddch(16792,10)|0);
        $282 = HEAP32[4329]|0;
        $16 = $282;
        $283 = $3;
        $284 = HEAP32[$283>>2]|0;
        $18 = $284;
        $285 = $3;
        $286 = ((($285)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $17 = $287;
        $288 = $3;
        $289 = (_openfwd($288,1)|0);
        $290 = ($289|0)==(0);
        if ($290) {
         HEAP32[$vararg_buffer22>>2] = 27;
         _stuff(12683,$vararg_buffer22);
         _show_error(5948,$vararg_buffer25);
         $1 = 1;
         $463 = $1;
         STACKTOP = sp;return ($463|0);
        }
        $291 = $16;
        $292 = $17;
        $293 = ($291|0)==($292|0);
        if ($293) {
         $294 = $18;
         $295 = $16;
         _replchars($294,0,$295,19254);
        }
        _move_window_to_cursor();
        _cursupdate();
        _updateline(1);
        $1 = 1;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       case 2:  {
        HEAP32[4194] = 1;
        $1 = 0;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       case 22: case 17:  {
        $296 = $2;
        (_flexaddch(16792,$296)|0);
        HEAP32[4193] = 1;
        $2 = 94;
        break L11;
        break;
       }
       case 128:  {
        _stuff_to_map(6700);
        $1 = 0;
        $463 = $1;
        STACKTOP = sp;return ($463|0);
        break;
       }
       default: {
        break L11;
       }
       }
      }
     } while(0);
     $307 = $2;
     (_flexaddch(16792,$307)|0);
     $308 = $3;
     $309 = HEAP32[$308>>2]|0;
     $310 = $3;
     $311 = ((($310)) + 4|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = $2;
     $314 = (_mkstr($313)|0);
     _replchars($309,$312,0,$314);
     $4 = 0;
     $315 = HEAP32[4193]|0;
     $316 = ($315|0)==(0);
     $317 = HEAP32[(4572)>>2]|0;
     $318 = ($317|0)!=(0);
     $or$cond7 = $316 & $318;
     do {
      if ($or$cond7) {
       $319 = HEAP32[4327]|0;
       $320 = ((($319)) + 60|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = HEAP32[4327]|0;
       $323 = ((($322)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = HEAP32[(4572)>>2]|0;
       $326 = (($324) - ($325))|0;
       $327 = ($321>>>0)>=($326>>>0);
       if ($327) {
        $328 = $2;
        $329 = ($328|0)==(32);
        $330 = $2;
        $331 = ($330|0)==(9);
        $or$cond9 = $329 | $331;
        if ($or$cond9) {
         $4 = 1;
        }
        $332 = $3;
        $333 = HEAP32[$332>>2]|0;
        $334 = ((($333)) + 8|0);
        $335 = HEAP32[$334>>2]|0;
        $21 = $335;
        $336 = $3;
        $337 = ((($336)) + 4|0);
        $338 = HEAP32[$337>>2]|0;
        $20 = $338;
        $19 = $338;
        while(1) {
         $339 = $19;
         $340 = ($339|0)>(0);
         if (!($340)) {
          break;
         }
         $341 = $21;
         $342 = $19;
         $343 = (($341) + ($342)|0);
         $344 = HEAP8[$343>>0]|0;
         $345 = $344 << 24 >> 24;
         $22 = $345;
         $346 = $22;
         $347 = ($346|0)==(32);
         $348 = $22;
         $349 = ($348|0)==(9);
         $or$cond11 = $347 | $349;
         if ($or$cond11) {
          label = 83;
          break;
         }
         $366 = $19;
         $20 = $366;
         $367 = $19;
         $368 = (($367) + -1)|0;
         $19 = $368;
        }
        L109: do {
         if ((label|0) == 83) {
          while(1) {
           label = 0;
           $350 = $19;
           $351 = ($350|0)>(0);
           if (!($351)) {
            break L109;
           }
           $352 = $21;
           $353 = $19;
           $354 = (($353) - 1)|0;
           $355 = (($352) + ($354)|0);
           $356 = HEAP8[$355>>0]|0;
           $357 = $356 << 24 >> 24;
           $22 = $357;
           $358 = ($357|0)!=(0);
           if (!($358)) {
            break L109;
           }
           $359 = $22;
           $360 = ($359|0)==(32);
           $361 = $22;
           $362 = ($361|0)==(9);
           $363 = $360 ? 1 : $362;
           if (!($363)) {
            break L109;
           }
           $364 = $19;
           $365 = (($364) + -1)|0;
           $19 = $365;
           label = 83;
          }
         }
        } while(0);
        $369 = $19;
        $370 = ($369|0)>(0);
        if ($370) {
         $371 = $3;
         $372 = HEAP32[$371>>2]|0;
         HEAP32[$23>>2] = $372;
         $373 = $19;
         $374 = ((($23)) + 4|0);
         HEAP32[$374>>2] = $373;
         $375 = $3;
         $376 = ((($375)) + 4|0);
         $377 = HEAP32[$376>>2]|0;
         $378 = $20;
         $379 = (($377) - ($378))|0;
         $24 = $379;
         $380 = (_openfwd($23,1)|0);
         $381 = ($380|0)==(0);
         if ($381) {
          _show_error(5948,$vararg_buffer27);
          break;
         }
         $382 = $3;
         $383 = ((($382)) + 4|0);
         $384 = HEAP32[$383>>2]|0;
         $25 = $384;
         $385 = $3;
         $386 = HEAP32[$385>>2]|0;
         $26 = $386;
         while(1) {
          $387 = $26;
          $388 = ((($387)) + 8|0);
          $389 = HEAP32[$388>>2]|0;
          $390 = $25;
          $391 = (($389) + ($390)|0);
          $392 = HEAP8[$391>>0]|0;
          $393 = $392 << 24 >> 24;
          $27 = $393;
          $394 = ($393|0)!=(0);
          if ($394) {
           $395 = $27;
           $396 = ($395|0)==(32);
           $397 = $27;
           $398 = ($397|0)==(9);
           $399 = $396 ? 1 : $398;
           $464 = $399;
          } else {
           $464 = 0;
          }
          $400 = $26;
          $401 = $25;
          if (!($464)) {
           break;
          }
          _replchars($400,$401,1,19254);
         }
         $402 = $24;
         $403 = (($401) + ($402))|0;
         _move_cursor($400,$403);
        }
       }
      }
     } while(0);
     $404 = $2;
     _s_inschar($404);
     $405 = $5;
     $406 = $3;
     $407 = HEAP32[$406>>2]|0;
     $408 = (_plines($407)|0);
     $409 = ($405|0)!=($408|0);
     $410 = $409&1;
     _updateline($410);
     $411 = HEAP32[(4140)>>2]|0;
     $412 = ($411|0)!=(0);
     do {
      if ($412) {
       $413 = $2;
       $414 = ($413|0)==(41);
       $415 = $2;
       $416 = ($415|0)==(125);
       $or$cond15 = $414 | $416;
       $417 = $2;
       $418 = ($417|0)==(93);
       $or$cond17 = $or$cond15 | $418;
       if ($or$cond17) {
        $419 = (_showmatch()|0);
        $28 = $419;
        $420 = $28;
        $421 = ($420|0)==(0|0);
        if ($421) {
         _beep();
         break;
        }
        $422 = $28;
        $423 = HEAP32[$422>>2]|0;
        $424 = ((($423)) + 16|0);
        $425 = HEAP32[$424>>2]|0;
        $426 = HEAP32[4327]|0;
        $427 = ((($426)) + 8|0);
        $428 = HEAP32[$427>>2]|0;
        $429 = ((($428)) + 16|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = ($425>>>0)<($430>>>0);
        if (!($431)) {
         $432 = $28;
         $433 = HEAP32[$432>>2]|0;
         $434 = ((($433)) + 16|0);
         $435 = HEAP32[$434>>2]|0;
         $436 = HEAP32[4327]|0;
         $437 = ((($436)) + 12|0);
         $438 = HEAP32[$437>>2]|0;
         $439 = ((($438)) + 16|0);
         $440 = HEAP32[$439>>2]|0;
         $441 = ($435>>>0)<($440>>>0);
         if ($441) {
          _xvUpdateAllBufferWindows();
          $442 = $3;
          ;HEAP32[$29>>2]=HEAP32[$442>>2]|0;HEAP32[$29+4>>2]=HEAP32[$442+4>>2]|0;
          $443 = $28;
          $444 = HEAP32[$443>>2]|0;
          $445 = $28;
          $446 = ((($445)) + 4|0);
          $447 = HEAP32[$446>>2]|0;
          _move_cursor($444,$447);
          _cursupdate();
          _wind_goto();
          $448 = HEAP32[4327]|0;
          $449 = ((($448)) + 16|0);
          $450 = HEAP32[$449>>2]|0;
          $451 = ((($450)) + 80|0);
          $452 = HEAP32[$451>>2]|0;
          $453 = HEAP32[4327]|0;
          $454 = ((($453)) + 16|0);
          $455 = HEAP32[$454>>2]|0;
          FUNCTION_TABLE_vi[$452 & 127]($455);
          _Wait200ms();
          $456 = HEAP32[$29>>2]|0;
          $457 = ((($29)) + 4|0);
          $458 = HEAP32[$457>>2]|0;
          _move_cursor($456,$458);
          _cursupdate();
         }
        }
       }
      }
     } while(0);
     $459 = $4;
     $460 = ($459|0)!=(0);
     if ($460) {
      _begin_line(1);
     } else {
      $461 = HEAP32[4193]|0;
      $462 = ($461|0)!=(0);
      if (!($462)) {
       (_one_right(1)|0);
      }
     }
     $1 = 1;
     $463 = $1;
     STACKTOP = sp;return ($463|0);
    }
   }
   $47 = HEAP32[4194]|0;
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $2 = 60;
   }
   $49 = $2;
   _yp_stuff_input($49,1,0);
   HEAP32[4194] = 0;
   $1 = 0;
   $463 = $1;
   STACKTOP = sp;return ($463|0);
  }
 } while(0);
 $62 = HEAP32[4197]|0;
 $63 = ($62|0)>(0);
 if ($63) {
  $64 = (_flexgetstr(16792)|0);
  HEAP32[$vararg_buffer18>>2] = $64;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = 27;
  _stuff(6695,$vararg_buffer18);
  HEAP32[(16804)>>2] = 0;
  HEAP32[(16800)>>2] = 0;
  $65 = HEAP32[4197]|0;
  $66 = (($65) + -1)|0;
  HEAP32[4197] = $66;
  $1 = 0;
  $463 = $1;
  STACKTOP = sp;return ($463|0);
 }
 $67 = $3;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $6 = $70;
 $71 = HEAP32[4327]|0;
 $72 = ((($71)) + 68|0);
 HEAP32[$72>>2] = 1;
 $73 = $3;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[4329]|0;
 $77 = ($75|0)==($76|0);
 if ($77) {
  $78 = $6;
  $79 = HEAP32[4329]|0;
  $80 = (($78) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81 << 24 >> 24;
  $83 = ($82|0)==(0);
  if ($83) {
   $84 = $3;
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[4329]|0;
   _replchars($85,0,$86,19254);
   _begin_line(0);
  }
 }
 HEAP32[4329] = 0;
 while(1) {
  $87 = $3;
  $88 = (_xvMoveLeft($87,0)|0);
  $89 = ($88|0)!=(0);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[4327]|0;
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[4327]|0;
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($96)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($94) + ($98)|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100 << 24 >> 24;
  $102 = ($101|0)==(0);
  if (!($102)) {
   break;
  }
 }
 HEAP32[4325] = 0;
 _end_command();
 $103 = (_flexgetstr(16792)|0);
 (_yank_str(60,$103,0)|0);
 HEAP32[(16804)>>2] = 0;
 HEAP32[(16800)>>2] = 0;
 $104 = HEAP32[4328]|0;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if (!($106)) {
  $107 = HEAP32[4328]|0;
  $108 = $107 | 1;
  HEAP32[4328] = $108;
  _move_window_to_cursor();
  _cursupdate();
 }
 _xvUpdateAllBufferWindows();
 $1 = 1;
 $463 = $1;
 STACKTOP = sp;return ($463|0);
}
function _mkstr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 HEAP8[19070] = $3;
 HEAP8[(19071)>>0] = 0;
 STACKTOP = sp;return (19070|0);
}
function _startinsert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[16780>>2]=HEAP32[$5>>2]|0;HEAP32[16780+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if ($7) {
  HEAP32[(16784)>>2] = 0;
 }
 HEAP32[(16804)>>2] = 0;
 HEAP32[(16800)>>2] = 0;
 $8 = $3;
 HEAP32[4197] = $8;
 HEAP32[4330] = 0;
 HEAP32[4325] = 2;
 STACKTOP = sp;return;
}
function _r_proc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $5 = HEAP32[4327]|0;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = HEAP8[19093]|0;
 $8 = ($7<<24>>24)!=(0);
 do {
  if ($8) {
   HEAP8[19093] = 0;
   HEAP32[4202] = 0;
   $9 = HEAP32[4193]|0;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = HEAP8[11849]|0;
    $12 = $11 << 24 >> 24;
    $2 = $12;
    label = 5;
    break;
   } else {
    HEAP32[4331] = 1;
    break;
   }
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $13 = HEAP32[4202]|0;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = HEAP32[4193]|0;
    $16 = ($15|0)==(0);
    $17 = $2;
    $18 = ($17|0)==(1);
    $or$cond = $16 & $18;
    if (!($or$cond)) {
     $22 = HEAP32[4193]|0;
     $23 = ($22|0)!=(0);
     L11: do {
      if ($23) {
       $117 = HEAP32[(16800)>>2]|0;
       $118 = HEAP32[(16804)>>2]|0;
       $119 = ($117>>>0)>=($118>>>0);
       if (!($119)) {
        $120 = HEAP32[(16804)>>2]|0;
        $121 = (($120) + -1)|0;
        HEAP32[(16804)>>2] = $121;
       }
       HEAP32[4193] = 0;
      } else {
       $24 = $2;
       switch ($24|0) {
       case 27:  {
        break L6;
        break;
       }
       case 127: case 8:  {
        $26 = HEAP32[4203]|0;
        $27 = ($26|0)==(2);
        if ($27) {
         $28 = HEAP32[4327]|0;
         $29 = ((($28)) + 60|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = HEAP32[4204]|0;
         $32 = ($30|0)>($31|0);
         if ($32) {
          (_one_left(0)|0);
          $33 = $3;
          $34 = HEAP32[$33>>2]|0;
          $35 = $3;
          $36 = ((($35)) + 4|0);
          $37 = HEAP32[$36>>2]|0;
          $38 = $3;
          $39 = ((($38)) + 4|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = HEAP32[4205]|0;
          $42 = ($40|0)<($41|0);
          if ($42) {
           $43 = HEAP32[4206]|0;
           $44 = $3;
           $45 = ((($44)) + 4|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = (($43) + ($46)|0);
           $48 = HEAP8[$47>>0]|0;
           $49 = $48 << 24 >> 24;
           $50 = (_mkstr($49)|0);
           $51 = $50;
          } else {
           $51 = 19254;
          }
          _replchars($34,$37,1,$51);
          _updateline(0);
          (_flexaddch(16792,8)|0);
         } else {
          label = 18;
         }
        } else {
         label = 18;
        }
        if ((label|0) == 18) {
         _beep();
         $52 = HEAP32[4203]|0;
         $53 = ($52|0)==(0);
         if ($53) {
          $54 = $2;
          _end_replace($54);
         }
        }
        $1 = 1;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 134:  {
        $55 = HEAP32[4203]|0;
        $56 = ($55|0)==(2);
        if ($56) {
         $57 = HEAP32[4327]|0;
         $58 = ((($57)) + 60|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = HEAP32[4204]|0;
         $61 = ($59|0)>($60|0);
         if ($61) {
          $62 = (_one_left(0)|0);
          $63 = ($62|0)!=(0);
          if ($63) {
           $64 = $2;
           (_flexaddch(16792,$64)|0);
           $1 = 1;
           $154 = $1;
           STACKTOP = sp;return ($154|0);
          }
         }
        }
        _beep();
        $65 = HEAP32[4203]|0;
        $66 = ($65|0)==(0);
        if ($66) {
         $67 = $2;
         _end_replace($67);
        }
        $1 = 0;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 135:  {
        $68 = HEAP32[4203]|0;
        $69 = ($68|0)==(2);
        if ($69) {
         $70 = (_one_right(0)|0);
         $71 = ($70|0)!=(0);
         if ($71) {
          $72 = $2;
          (_flexaddch(16792,$72)|0);
          $1 = 1;
          $154 = $1;
          STACKTOP = sp;return ($154|0);
         }
        }
        _beep();
        $73 = HEAP32[4203]|0;
        $74 = ($73|0)==(0);
        if ($74) {
         $75 = $2;
         _end_replace($75);
        }
        $1 = 0;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 10: case 13:  {
        $76 = $3;
        $77 = HEAP32[$76>>2]|0;
        $78 = ((($77)) + 4|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = HEAP32[4326]|0;
        $81 = ((($80)) + 8|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($79|0)==($82|0);
        $84 = HEAP32[4203]|0;
        $85 = ($84|0)==(2);
        $or$cond3 = $83 & $85;
        if ($or$cond3) {
         _beep();
         $1 = 1;
         $154 = $1;
         STACKTOP = sp;return ($154|0);
        }
        $86 = HEAP32[4203]|0;
        $87 = ($86|0)==(0);
        do {
         if ($87) {
          $88 = HEAP32[4328]|0;
          $89 = $88 & -2;
          HEAP32[4328] = $89;
          $90 = $3;
          $91 = HEAP32[$90>>2]|0;
          $92 = $3;
          $93 = ((($92)) + 4|0);
          $94 = HEAP32[$93>>2]|0;
          _replchars($91,$94,1,19254);
          $95 = $3;
          $96 = (_openfwd($95,1)|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           $98 = $2;
           (_flexaddch(16792,$98)|0);
           HEAP32[4203] = 1;
           _end_replace(10);
           break;
          }
          _show_error(5948,$vararg_buffer);
          $1 = 1;
          $154 = $1;
          STACKTOP = sp;return ($154|0);
         } else {
          (_flexaddch(16792,10)|0);
          $99 = HEAP32[4327]|0;
          $100 = HEAP32[$99>>2]|0;
          $101 = (_xvMoveDown($100,1,0)|0);
          $102 = ($101|0)!=(0);
          if ($102) {
           _info_update();
           $103 = HEAP32[4327]|0;
           $104 = HEAP32[$103>>2]|0;
           $105 = HEAP32[4204]|0;
           _xvMoveToColumn($104,$105);
          }
          $106 = HEAP32[4206]|0;
          _free($106);
          $107 = $3;
          $108 = HEAP32[$107>>2]|0;
          $109 = ((($108)) + 8|0);
          $110 = HEAP32[$109>>2]|0;
          $111 = (_strsave($110)|0);
          HEAP32[4206] = $111;
          $112 = HEAP32[4206]|0;
          $113 = ($112|0)==(0|0);
          if (!($113)) {
           $114 = HEAP32[4206]|0;
           $115 = (_strlen($114)|0);
           HEAP32[4205] = $115;
           break;
          }
          HEAP32[4325] = 0;
          $1 = 1;
          $154 = $1;
          STACKTOP = sp;return ($154|0);
         }
        } while(0);
        $1 = 1;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 2:  {
        HEAP32[4202] = 1;
        $1 = 0;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 22: case 17:  {
        $116 = $2;
        (_flexaddch(16792,$116)|0);
        HEAP32[4193] = 1;
        $2 = 94;
        break L11;
        break;
       }
       case 128:  {
        _stuff_to_map(6700);
        $1 = 0;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       case 140: case 139: case 138: case 137: case 136: case 133: case 132: case 131: case 130: case 129:  {
        $1 = 0;
        $154 = $1;
        STACKTOP = sp;return ($154|0);
        break;
       }
       default: {
        break L11;
       }
       }
      }
     } while(0);
     $122 = HEAP32[4193]|0;
     $123 = ($122|0)!=(0);
     if (!($123)) {
      $124 = $2;
      (_flexaddch(16792,$124)|0);
     }
     $125 = HEAP32[4203]|0;
     $126 = ($125|0)==(2);
     $127 = HEAP32[4203]|0;
     $128 = ($127|0)==(0);
     $or$cond5 = $126 | $128;
     if ($or$cond5) {
      $129 = HEAP32[4327]|0;
      $130 = HEAP32[$129>>2]|0;
      $131 = HEAP32[$130>>2]|0;
      $132 = (_plines($131)|0);
      $4 = $132;
      $133 = $3;
      $134 = HEAP32[$133>>2]|0;
      $135 = $3;
      $136 = ((($135)) + 4|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = $2;
      $139 = (_mkstr($138)|0);
      _replchars($134,$137,1,$139);
      $140 = $4;
      $141 = HEAP32[4327]|0;
      $142 = HEAP32[$141>>2]|0;
      $143 = HEAP32[$142>>2]|0;
      $144 = (_plines($143)|0);
      $145 = ($140|0)!=($144|0);
      $146 = $145&1;
      _updateline($146);
      $147 = HEAP32[4193]|0;
      $148 = ($147|0)!=(0);
      if (!($148)) {
       (_one_right(1)|0);
      }
     }
     $149 = HEAP32[4193]|0;
     $150 = ($149|0)==(0);
     $151 = HEAP32[4203]|0;
     $152 = ($151|0)==(0);
     $or$cond7 = $150 & $152;
     if ($or$cond7) {
      HEAP32[4203] = 1;
      $153 = $2;
      _end_replace($153);
     }
     $1 = 1;
     $154 = $1;
     STACKTOP = sp;return ($154|0);
    }
   }
   $19 = HEAP32[4202]|0;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $2 = 60;
   }
   $21 = $2;
   _yp_stuff_input($21,1,0);
   HEAP32[4202] = 0;
   $1 = 0;
   $154 = $1;
   STACKTOP = sp;return ($154|0);
  }
 } while(0);
 $25 = $2;
 _end_replace($25);
 $1 = 1;
 $154 = $1;
 STACKTOP = sp;return ($154|0);
}
function _end_replace($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4197]|0;
 $3 = ($2|0)>(0);
 $4 = HEAP32[4203]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = HEAP32[4203]|0;
  $7 = ($6|0)==(1);
  if ($7) {
   HEAP32[4203] = 0;
   $8 = $1;
   HEAP32[$vararg_buffer>>2] = $8;
   _stuff(12683,$vararg_buffer);
  } else {
   $9 = HEAP32[4203]|0;
   $10 = ($9|0)==(2);
   if ($10) {
    $11 = (_flexgetstr(16792)|0);
    HEAP32[$vararg_buffer2>>2] = $11;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = 27;
    _stuff(6695,$vararg_buffer2);
   }
  }
  HEAP32[(16804)>>2] = 0;
  HEAP32[(16800)>>2] = 0;
  $12 = HEAP32[4197]|0;
  $13 = (($12) + -1)|0;
  HEAP32[4197] = $13;
  STACKTOP = sp;return;
 }
 HEAP32[4325] = 0;
 _end_command();
 HEAP32[4329] = 0;
 $14 = HEAP32[4203]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = (_flexgetstr(16792)|0);
 (_yank_str(60,$16,0)|0);
 HEAP32[(16804)>>2] = 0;
 HEAP32[(16800)>>2] = 0;
 $17 = HEAP32[4203]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  $19 = HEAP32[4206]|0;
  _free($19);
 }
 while(1) {
  $20 = (_one_left(0)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[4327]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[4327]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($26) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)==(0);
  if (!($34)) {
   break;
  }
 }
 $35 = HEAP32[4328]|0;
 $36 = $35 & 1;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $38 = HEAP32[4328]|0;
  $39 = $38 | 1;
  HEAP32[4328] = $39;
  _move_window_to_cursor();
  _cursupdate();
 }
 _xvUpdateAllBufferWindows();
 STACKTOP = sp;return;
}
function _startreplace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ($6|0)==(114);
 if ($7) {
  $8 = HEAP32[4327]|0;
  $9 = HEAP32[$8>>2]|0;
  $4 = $9;
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $4;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) + ($16)|0);
  $5 = $17;
  $18 = $3;
  $19 = (($18) + 1)|0;
  $20 = $5;
  $21 = (_strlen($20)|0);
  $22 = ($19>>>0)>($21>>>0);
  if ($22) {
   _beep();
   _unstuff();
   STACKTOP = sp;return;
  }
 }
 $23 = (_start_command()|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[4327]|0;
 $26 = ((($25)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[4204] = $27;
 $28 = $2;
 $29 = ($28|0)==(114);
 do {
  if ($29) {
   HEAP32[4203] = 0;
   HEAP32[4206] = 0;
  } else {
   HEAP32[4203] = 2;
   $30 = HEAP32[4327]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_strsave($34)|0);
   HEAP32[4206] = $35;
   $36 = HEAP32[4206]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $38 = HEAP32[4206]|0;
    $39 = (_strlen($38)|0);
    HEAP32[4205] = $39;
    HEAP32[(16804)>>2] = 0;
    HEAP32[(16800)>>2] = 0;
    break;
   }
   _beep();
   _end_command();
   STACKTOP = sp;return;
  }
 } while(0);
 $40 = $3;
 HEAP32[4197] = $40;
 HEAP32[4325] = 3;
 STACKTOP = sp;return;
}
function _exQuit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $2 = 1;
  } else {
   $6 = (_xvChangesNotSaved()|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    _show_error(6750,$vararg_buffer);
    $2 = 0;
    break;
   } else {
    $8 = (_more_files()|0);
    $9 = ($8|0)!=(0);
    $10 = $9 ^ 1;
    $11 = $10&1;
    $2 = $11;
    break;
   }
  }
 } while(0);
 $12 = $2;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[4327]|0;
 $3 = $14;
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[4326] = $17;
  _unpreserve();
  $18 = $3;
  $19 = (_xvNextWindow($18)|0);
  $3 = $19;
  $20 = HEAP32[4327]|0;
  $21 = ($19|0)!=($20|0);
  if (!($21)) {
   break;
  }
 }
 $22 = HEAP32[4327]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[4326] = $24;
 HEAP32[4325] = 6;
 STACKTOP = sp;return;
}
function _more_files() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP32[4207]|0;
 $3 = HEAP32[4208]|0;
 $4 = (($3) + 1)|0;
 $5 = (($2) - ($4))|0;
 $1 = $5;
 $6 = $1;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $1;
  $9 = $1;
  $10 = ($9|0)>(1);
  $11 = $10 ? 7396 : 19254;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _show_error(6795,$vararg_buffer);
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _exSplitWindow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = (_xvOpenWindow(0)|0);
 $0 = $3;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = HEAP32[4326]|0;
 _xvMapWindowOntoBuffer($6,$7);
 _show_file_info(1);
 _redraw_window(0);
 $8 = HEAP32[4328]|0;
 $2 = $8;
 $9 = HEAP32[4328]|0;
 $10 = $9 & -16;
 HEAP32[4328] = $10;
 $11 = HEAP32[4327]|0;
 $12 = HEAP32[$11>>2]|0;
 $1 = $12;
 $13 = $0;
 HEAP32[4327] = $13;
 $14 = HEAP32[4327]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[4327]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
 } else {
  $19 = 0;
 }
 HEAP32[4326] = $19;
 _init_sline();
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 _move_cursor($21,$24);
 _redraw_window(0);
 $25 = $2;
 HEAP32[4328] = $25;
 _move_window_to_cursor();
 _cursupdate();
 _redraw_window(0);
 _show_file_info(1);
 STACKTOP = sp;return;
}
function _exNewBuffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = (_new_buffer()|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _show_error(6818,$vararg_buffer);
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $10 = $4;
 $11 = (_xvOpenWindow($10)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $5;
  _free_buffer($14);
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $15 = $6;
 $16 = $5;
 _xvMapWindowOntoBuffer($15,$16);
 _show_file_info(1);
 _redraw_window(0);
 $17 = $5;
 HEAP32[4326] = $17;
 $18 = $6;
 HEAP32[4327] = $18;
 _init_sline();
 $19 = $3;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $3;
  (_exEditFile(0,$21)|0);
 } else {
  $22 = $5;
  $23 = ((($22)) + 24|0);
  HEAP32[$23>>2] = 0;
  $24 = $5;
  $25 = ((($24)) + 20|0);
  HEAP32[$25>>2] = 0;
  _show_file_info(1);
 }
 $2 = 1;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _exEditFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 52|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $13 = HEAP32[4326]|0;
 $5 = $13;
 HEAP32[$6>>2] = 1;
 $14 = $3;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = $5;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 1;
  $20 = ($19|0)!=(0);
  if ($20) {
   _show_error(6703,$vararg_buffer);
   $2 = 0;
   $186 = $2;
   STACKTOP = sp;return ($186|0);
  }
 }
 $21 = $4;
 $22 = ($21|0)==(0|0);
 if ($22) {
  label = 6;
 } else {
  $23 = $4;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(0);
  if ($26) {
   label = 6;
  } else {
   $31 = $5;
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   do {
    if ($34) {
     $35 = $4;
     $36 = $5;
     $37 = ((($36)) + 20|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_strcmp($35,$38)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      $41 = $5;
      $42 = ((($41)) + 28|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 & 1;
      $45 = ($44|0)!=(0);
      if ($45) {
       $46 = $5;
       $47 = ((($46)) + 28|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = $48 & 1;
       $50 = ($49|0)==(0);
       $51 = $3;
       $52 = ($51|0)!=(0);
       $or$cond = $50 | $52;
       if ($or$cond) {
        break;
       }
      }
      $2 = 1;
      $186 = $2;
      STACKTOP = sp;return ($186|0);
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   if ((label|0) == 13) {
    $53 = (_alt_file_name()|0);
    $54 = ($53|0)!=(0|0);
    if ($54) {
     $55 = $4;
     $56 = (_alt_file_name()|0);
     $57 = (_strcmp($55,$56)|0);
     $58 = ($57|0)==(0);
     if ($58) {
      (_pop_alternate($6)|0);
     }
    }
    $59 = $5;
    $60 = ((($59)) + 20|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0|0);
    if ($62) {
     $63 = $5;
     $64 = ((($63)) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[4327]|0;
     $67 = HEAP32[$66>>2]|0;
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 16|0);
     $70 = HEAP32[$69>>2]|0;
     _push_alternate($65,$70);
     $71 = $5;
     $72 = ((($71)) + 20|0);
     $73 = HEAP32[$72>>2]|0;
     _free($73);
     $74 = $5;
     $75 = ((($74)) + 20|0);
     HEAP32[$75>>2] = 0;
    }
    $76 = $4;
    $77 = (_strsave($76)|0);
    $78 = $5;
    $79 = ((($78)) + 20|0);
    HEAP32[$79>>2] = $77;
    $80 = $5;
    $81 = ((($80)) + 20|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(0|0);
    if ($83) {
     $2 = 0;
     $186 = $2;
     STACKTOP = sp;return ($186|0);
    }
   }
   _unpreserve();
  }
 }
 if ((label|0) == 6) {
  $27 = $5;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   _show_error(6835,$vararg_buffer2);
   $2 = 0;
   $186 = $2;
   STACKTOP = sp;return ($186|0);
  }
 }
 $84 = $5;
 $85 = (_clear_buffer($84)|0);
 $86 = ($85|0)==(0);
 if ($86) {
  _show_error(5948,$vararg_buffer4);
  $2 = 0;
  $186 = $2;
  STACKTOP = sp;return ($186|0);
 }
 $87 = HEAP32[4327]|0;
 $11 = $87;
 while(1) {
  $88 = HEAP32[4326]|0;
  $89 = $5;
  $90 = ($88|0)==($89|0);
  if ($90) {
   _xvUnMapWindow();
   $91 = HEAP32[4327]|0;
   $92 = $5;
   _xvMapWindowOntoBuffer($91,$92);
  }
  $93 = HEAP32[4327]|0;
  $94 = (_xvNextWindow($93)|0);
  HEAP32[4327] = $94;
  $95 = HEAP32[4327]|0;
  $96 = ($95|0)!=(0|0);
  if ($96) {
   $97 = HEAP32[4327]|0;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99;
  } else {
   $100 = 0;
  }
  HEAP32[4326] = $100;
  $101 = HEAP32[4327]|0;
  $102 = $11;
  $103 = ($101|0)!=($102|0);
  if (!($103)) {
   break;
  }
 }
 $104 = HEAP32[(3876)>>2]|0;
 $105 = ($104|0)!=(0);
 if ($105) {
  $119 = 1;
 } else {
  $106 = $5;
  $107 = ((($106)) + 20|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (_access($108,0)|0);
  $110 = ($109|0)!=(0);
  if ($110) {
   $117 = 1;
  } else {
   $111 = $5;
   $112 = ((($111)) + 20|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (_access($113,2)|0);
   $115 = ($114|0)==(0);
   $117 = $115;
  }
  $116 = $117 ^ 1;
  $119 = $116;
 }
 $118 = $119&1;
 $10 = $118;
 $120 = $5;
 $121 = ((($120)) + 20|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $10;
 $124 = ($123|0)!=(0);
 $125 = $124 ? 12170 : 19254;
 $126 = (_get_file($122,$8,$9,$125,6847)|0);
 $7 = $126;
 _update_sline();
 while(1) {
  $127 = HEAP32[4327]|0;
  $128 = (_xvNextDisplayedWindow($127)|0);
  HEAP32[4327] = $128;
  $129 = HEAP32[4327]|0;
  $130 = ($129|0)!=(0|0);
  if ($130) {
   $131 = HEAP32[4327]|0;
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133;
  } else {
   $134 = 0;
  }
  HEAP32[4326] = $134;
  $135 = HEAP32[4327]|0;
  $136 = $11;
  $137 = ($135|0)==($136|0);
  if ($137) {
   break;
  }
  $138 = HEAP32[4326]|0;
  $139 = $5;
  $140 = ($138|0)==($139|0);
  if (!($140)) {
   continue;
  }
  $141 = HEAP32[4327]|0;
  $142 = ((($141)) + 36|0);
  $143 = (_flexgetstr($142)|0);
  HEAP32[$vararg_buffer6>>2] = $143;
  _show_message(12801,$vararg_buffer6);
 }
 $144 = $7;
 $145 = ($144|0)==(-1);
 if ($145) {
  $2 = 0;
  $186 = $2;
  STACKTOP = sp;return ($186|0);
 }
 $146 = $7;
 $147 = ($146|0)>=(0);
 if ($147) {
  $148 = $10;
  $149 = ($148|0)!=(0);
  $150 = $5;
  $151 = ((($150)) + 28|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $152 & -3;
  $154 = $152 | 2;
  $$sink = $149 ? $154 : $153;
  HEAP32[$151>>2] = $$sink;
  $155 = $7;
  $156 = ($155|0)==(0);
  if ($156) {
   $2 = 1;
   $186 = $2;
   STACKTOP = sp;return ($186|0);
  } else {
   $157 = HEAP32[$8>>2]|0;
   _replbuffer($157);
   $158 = $5;
   $159 = HEAP32[$6>>2]|0;
   $160 = (_gotoline($158,$159)|0);
   _move_cursor($160,0);
   _begin_line(1);
   _setpcmark();
   $161 = HEAP32[4328]|0;
   $12 = $161;
   $162 = HEAP32[4328]|0;
   $163 = $162 & -16;
   HEAP32[4328] = $163;
   _redraw_window(0);
   $164 = $12;
   HEAP32[4328] = $164;
   $2 = 1;
   $186 = $2;
   STACKTOP = sp;return ($186|0);
  }
 }
 $165 = $5;
 $166 = ((($165)) + 20|0);
 $167 = HEAP32[$166>>2]|0;
 _push_alternate($167,1);
 $168 = $5;
 $169 = ((($168)) + 20|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $172 = $5;
  $173 = ((($172)) + 20|0);
  $174 = HEAP32[$173>>2]|0;
  _free($174);
 }
 $175 = $5;
 $176 = ((($175)) + 24|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = $5;
  $180 = ((($179)) + 24|0);
  $181 = HEAP32[$180>>2]|0;
  _free($181);
 }
 $182 = $5;
 $183 = ((($182)) + 24|0);
 HEAP32[$183>>2] = 0;
 $184 = $5;
 $185 = ((($184)) + 20|0);
 HEAP32[$185>>2] = 0;
 $2 = 0;
 $186 = $2;
 STACKTOP = sp;return ($186|0);
}
function _exCloseWindow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $5 = HEAP32[4326]|0;
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 $11 = $2;
 $12 = ($11|0)!=(0);
 $or$cond = $10 | $12;
 if (!($or$cond)) {
  $13 = $3;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)<(2);
  if ($16) {
   _show_error(6703,$vararg_buffer);
   $1 = 0;
   $59 = $1;
   STACKTOP = sp;return ($59|0);
  }
 }
 $17 = HEAP32[4327]|0;
 $18 = HEAP32[4327]|0;
 $19 = (_xvNextWindow($18)|0);
 $20 = ($17|0)==($19|0);
 if ($20) {
  $21 = (_more_files()|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $1 = 0;
   $59 = $1;
   STACKTOP = sp;return ($59|0);
  } else {
   (_xvCloseWindow()|0);
   HEAP32[4325] = 6;
   $1 = 1;
   $59 = $1;
   STACKTOP = sp;return ($59|0);
  }
 }
 $23 = $3;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $3;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = $3;
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[4327]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   _push_alternate($33,$38);
   $39 = $3;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   _free($41);
   $42 = $3;
   $43 = ((($42)) + 20|0);
   HEAP32[$43>>2] = 0;
   _unpreserve();
  }
 }
 $44 = (_xvCloseWindow()|0);
 HEAP32[4327] = $44;
 $45 = HEAP32[4327]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  HEAP32[4325] = 6;
  $1 = 1;
  $59 = $1;
  STACKTOP = sp;return ($59|0);
 }
 $47 = $3;
 $48 = ((($47)) + 32|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  $51 = $3;
  _free_buffer($51);
 }
 $52 = HEAP32[4327]|0;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[4326] = $54;
 $55 = HEAP32[4328]|0;
 $4 = $55;
 $56 = HEAP32[4328]|0;
 $57 = $56 & -12;
 HEAP32[4328] = $57;
 _move_window_to_cursor();
 $58 = $4;
 HEAP32[4328] = $58;
 _redraw_window(0);
 _show_file_info(1);
 $1 = 1;
 $59 = $1;
 STACKTOP = sp;return ($59|0);
}
function _exXit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP32[4326]|0;
 $1 = $2;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)<(2);
  if ($11) {
   $12 = $1;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    _show_error(6859,$vararg_buffer);
    $0 = 0;
    $22 = $0;
    STACKTOP = sp;return ($22|0);
   }
   $16 = $1;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_writeit($18,0,0,0)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $0 = 0;
    $22 = $0;
    STACKTOP = sp;return ($22|0);
   }
  }
 }
 $21 = (_exCloseWindow(0)|0);
 $0 = $21;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _exArgs() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 40|0;
 $7 = HEAP32[4207]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  _show_message(6874,$vararg_buffer);
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $2 = 0;
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 $4 = $12;
 $13 = ((($1)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($1)) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($1)) + 8|0);
 HEAP32[$15>>2] = 0;
 $3 = 0;
 while(1) {
  $16 = $3;
  $17 = HEAP32[4207]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   label = 23;
   break;
  }
  $19 = HEAP32[4209]|0;
  $20 = $3;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $5 = $22;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $5;
   $25 = (_strlen($24)|0);
   $26 = (($25) + 3)|0;
   $6 = $26;
   $27 = $2;
   $28 = ($26|0)>($27|0);
   if ($28) {
    $29 = $6;
    $2 = $29;
   }
   $30 = ((($1)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($1)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)>=($33>>>0);
   if ($34) {
    $42 = 0;
   } else {
    $35 = ((($1)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($1)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) - ($38))|0;
    $42 = $39;
   }
   $40 = $4;
   $41 = ($42>>>0)<=($40>>>0);
   if ($41) {
    $43 = $3;
    $44 = ($43|0)>(0);
    if ($44) {
     $45 = (_flexaddch($1,32)|0);
     $46 = ($45|0)!=(0);
     if (!($46)) {
      label = 13;
      break;
     }
    }
    $47 = $3;
    $48 = HEAP32[4208]|0;
    $49 = ($47|0)==($48|0);
    if ($49) {
     $50 = (_flexaddch($1,91)|0);
     $51 = ($50|0)!=(0);
     if (!($51)) {
      label = 16;
      break;
     }
    }
    $52 = $5;
    HEAP32[$vararg_buffer1>>2] = $52;
    $53 = (_lformat($1,12801,$vararg_buffer1)|0);
    $54 = ($53|0)!=(0);
    if (!($54)) {
     label = 18;
     break;
    }
    $55 = $3;
    $56 = HEAP32[4208]|0;
    $57 = ($55|0)==($56|0);
    if ($57) {
     $58 = (_flexaddch($1,93)|0);
     $59 = ($58|0)!=(0);
     if (!($59)) {
      label = 21;
      break;
     }
    }
   }
  }
  $60 = $3;
  $61 = (($60) + 1)|0;
  $3 = $61;
 }
 if ((label|0) == 13) {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 18) {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 21) {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 23) {
  $62 = ((($1)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($1)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63>>>0)>=($65>>>0);
  if ($66) {
   $74 = 0;
  } else {
   $67 = ((($1)) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($1)) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) - ($70))|0;
   $74 = $71;
  }
  $72 = $4;
  $73 = ($74>>>0)<=($72>>>0);
  if ($73) {
   $75 = (_flexgetstr($1)|0);
   HEAP32[$vararg_buffer3>>2] = $75;
   _show_message(12801,$vararg_buffer3);
  } else {
   HEAP32[4210] = 0;
   $76 = $2;
   _disp_init(48,$76,0);
  }
  _flexdelete($1);
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _show_arg() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[4210]|0;
 $2 = HEAP32[4207]|0;
 $3 = ($1|0)>=($2|0);
 if ($3) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  HEAP32[(16856)>>2] = 0;
  HEAP32[(16852)>>2] = 0;
  $4 = HEAP32[4210]|0;
  $5 = HEAP32[4208]|0;
  $6 = ($4|0)==($5|0);
  $7 = $6 ? 91 : 32;
  $8 = HEAP32[4209]|0;
  $9 = HEAP32[4210]|0;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[4210]|0;
  $13 = HEAP32[4208]|0;
  $14 = ($12|0)==($13|0);
  $15 = $14 ? 93 : 32;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $15;
  (_lformat(16844,6883,$vararg_buffer)|0);
  $16 = HEAP32[4210]|0;
  $17 = (($16) + 1)|0;
  HEAP32[4210] = $17;
  $18 = (_flexgetstr(16844)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _exNext($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 1;
 $17 = $6;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  _xvAutoWrite();
  $19 = HEAP32[4326]|0;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 1;
  $23 = ($22|0)!=(0);
  if ($23) {
   _show_error(6703,$vararg_buffer);
   $3 = 0;
   $159 = $3;
   STACKTOP = sp;return ($159|0);
  }
 }
 $24 = HEAP32[4328]|0;
 $7 = $24;
 $25 = $4;
 $26 = ($25|0)>(0);
 do {
  if ($26) {
   $27 = HEAP32[4207]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    $29 = $4;
    $30 = $29<<2;
    $31 = (_alloc($30)|0);
    HEAP32[4209] = $31;
    $32 = HEAP32[4209]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $3 = 0;
     $159 = $3;
     STACKTOP = sp;return ($159|0);
    }
   } else {
    $9 = 0;
    while(1) {
     $34 = $9;
     $35 = HEAP32[4207]|0;
     $36 = ($34|0)<($35|0);
     if (!($36)) {
      break;
     }
     $37 = HEAP32[4209]|0;
     $38 = $9;
     $39 = (($37) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     _free($40);
     $41 = $9;
     $42 = (($41) + 1)|0;
     $9 = $42;
    }
    $43 = $4;
    $44 = HEAP32[4207]|0;
    $45 = ($43|0)!=($44|0);
    if ($45) {
     $46 = HEAP32[4209]|0;
     $47 = $4;
     $48 = $47<<2;
     $49 = (_re_alloc($46,$48)|0);
     HEAP32[4209] = $49;
     $50 = HEAP32[4209]|0;
     $51 = ($50|0)==(0|0);
     if ($51) {
      HEAP32[4207] = 0;
      $3 = 0;
      $159 = $3;
      STACKTOP = sp;return ($159|0);
     }
    }
   }
   $9 = 0;
   while(1) {
    $52 = $9;
    $53 = $4;
    $54 = ($52|0)<($53|0);
    if (!($54)) {
     break;
    }
    $55 = $5;
    $56 = $9;
    $57 = (($55) + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_strsave($58)|0);
    $60 = HEAP32[4209]|0;
    $61 = $9;
    $62 = (($60) + ($61<<2)|0);
    HEAP32[$62>>2] = $59;
    $63 = HEAP32[4209]|0;
    $64 = $9;
    $65 = (($63) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if ($67) {
     label = 17;
     break;
    }
    $75 = $9;
    $76 = (($75) + 1)|0;
    $9 = $76;
   }
   if ((label|0) == 17) {
    while(1) {
     label = 0;
     $68 = $9;
     $69 = (($68) + -1)|0;
     $9 = $69;
     $70 = ($69|0)>=(0);
     $71 = HEAP32[4209]|0;
     if (!($70)) {
      break;
     }
     $72 = $9;
     $73 = (($71) + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     _free($74);
     label = 17;
    }
    _free($71);
    HEAP32[4209] = 0;
    HEAP32[4207] = 0;
    $3 = 0;
    $159 = $3;
    STACKTOP = sp;return ($159|0);
   }
   $77 = $4;
   HEAP32[4207] = $77;
   HEAP32[4208] = 0;
   $78 = HEAP32[4328]|0;
   $79 = $78 & -15;
   HEAP32[4328] = $79;
   $80 = $6;
   $81 = HEAP32[4209]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = (_exEditFile($80,$82)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    $8 = 0;
   }
   _move_window_to_cursor();
   $85 = HEAP32[4327]|0;
   $13 = $85;
   $14 = 0;
   while(1) {
    $86 = $13;
    $87 = (_xvNextWindow($86)|0);
    $13 = $87;
    $88 = $14;
    $89 = (($88) + 1)|0;
    $14 = $89;
    $90 = $13;
    $91 = HEAP32[4327]|0;
    $92 = ($90|0)!=($91|0);
    if (!($92)) {
     break;
    }
   }
   $93 = HEAP32[4207]|0;
   $94 = HEAP32[4208]|0;
   $95 = (($93) - ($94))|0;
   $12 = $95;
   $96 = HEAP32[4327]|0;
   $97 = ((($96)) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $15 = $100;
   $101 = $15;
   $102 = (($101|0) / 2)&-1;
   $103 = $12;
   $104 = ($102|0)<($103|0);
   if ($104) {
    $105 = $15;
    $106 = (($105|0) / 2)&-1;
    $12 = $106;
   }
   $107 = $12;
   $108 = HEAP32[(3180)>>2]|0;
   $109 = ($107|0)>($108|0);
   if ($109) {
    $110 = HEAP32[(3180)>>2]|0;
    $12 = $110;
   }
   $111 = $12;
   $112 = $14;
   $113 = ($111|0)>($112|0);
   if ($113) {
    $114 = $15;
    $115 = $12;
    $116 = (($114|0) / ($115|0))&-1;
    $10 = $116;
    $117 = $15;
    $118 = $12;
    $119 = $10;
    $120 = Math_imul($118, $119)|0;
    $121 = (($117) - ($120))|0;
    $11 = $121;
   }
   while(1) {
    $122 = HEAP32[4208]|0;
    $123 = (($122) + 1)|0;
    $124 = HEAP32[4207]|0;
    $125 = ($123|0)<($124|0);
    if (!($125)) {
     break;
    }
    $126 = (_xvCanSplit()|0);
    $127 = ($126|0)!=(0);
    if (!($127)) {
     break;
    }
    $128 = HEAP32[4209]|0;
    $129 = HEAP32[4208]|0;
    $130 = (($129) + 1)|0;
    HEAP32[4208] = $130;
    $131 = (($128) + ($130<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $10;
    $134 = $11;
    $135 = (($133) + ($134))|0;
    $136 = (_exNewBuffer($132,$135)|0);
    $16 = $136;
    $137 = $11;
    $138 = ($137|0)>(0);
    if ($138) {
     $11 = 0;
    }
    _move_window_to_cursor();
    $139 = $16;
    $140 = ($139|0)!=(0);
    if (!($140)) {
     label = 36;
     break;
    }
   }
   if ((label|0) == 36) {
    $141 = HEAP32[4208]|0;
    $142 = (($141) + -1)|0;
    HEAP32[4208] = $142;
   }
   _xvEqualiseWindows(0);
   _redraw_window(0);
  } else {
   $143 = HEAP32[4208]|0;
   $144 = (($143) + 1)|0;
   $145 = HEAP32[4207]|0;
   $146 = ($144|0)<($145|0);
   if (!($146)) {
    _show_message(6890,$vararg_buffer1);
    $8 = 0;
    break;
   }
   $147 = HEAP32[4328]|0;
   $148 = $147 & -15;
   HEAP32[4328] = $148;
   $149 = $6;
   $150 = HEAP32[4209]|0;
   $151 = HEAP32[4208]|0;
   $152 = (($151) + 1)|0;
   HEAP32[4208] = $152;
   $153 = (($150) + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (_exEditFile($149,$154)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    $8 = 0;
   }
   _move_window_to_cursor();
   _xvUpdateAllBufferWindows();
  }
 } while(0);
 $157 = $7;
 HEAP32[4328] = $157;
 $158 = $8;
 $3 = $158;
 $159 = $3;
 STACKTOP = sp;return ($159|0);
}
function _exRewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $5 = HEAP32[4207]|0;
 $6 = ($5|0)<=(1);
 if ($6) {
  $1 = 1;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[4208] = 0;
 $7 = $2;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  _xvAutoWrite();
  $9 = HEAP32[4326]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 1;
  $13 = ($12|0)!=(0);
  if ($13) {
   _show_error(6703,$vararg_buffer);
   $1 = 0;
   $23 = $1;
   STACKTOP = sp;return ($23|0);
  }
 }
 $14 = HEAP32[4328]|0;
 $3 = $14;
 $15 = HEAP32[4328]|0;
 $16 = $15 & -15;
 HEAP32[4328] = $16;
 $17 = $2;
 $18 = HEAP32[4209]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_exEditFile($17,$19)|0);
 $4 = $20;
 _move_window_to_cursor();
 _xvUpdateAllBufferWindows();
 $21 = $3;
 HEAP32[4328] = $21;
 $22 = $4;
 $1 = $22;
 $23 = $1;
 STACKTOP = sp;return ($23|0);
}
function _exAppendToFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[4326]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $5 = $13;
 }
 $14 = $5;
 $15 = ($14|0)==(0|0);
 if ($15) {
  _show_error(6859,$vararg_buffer);
  $4 = 0;
  $21 = $4;
  STACKTOP = sp;return ($21|0);
 } else {
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = (_appendit($16,$17,$18,$19)|0);
  $4 = $20;
  $21 = $4;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _exWriteToFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = HEAP32[4326]|0;
 $9 = $10;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $9;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $5 = $15;
 } else {
  $16 = $5;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(33);
  if ($19) {
   $20 = $5;
   $21 = ((($20)) + 1|0);
   $22 = $6;
   $23 = $7;
   $24 = (_xvWriteToCommand($21,$22,$23)|0);
   $4 = $24;
   $65 = $4;
   STACKTOP = sp;return ($65|0);
  }
 }
 $25 = $5;
 $26 = ($25|0)==(0|0);
 if ($26) {
  _show_error(6859,$vararg_buffer);
  $4 = 0;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 $27 = $9;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 do {
  if ($30) {
   $31 = $6;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $33 = $6;
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $7;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = $7;
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - -1)|0;
    $46 = ($45|0)==(0);
    if (!($46)) {
     break;
    }
   }
   $47 = $5;
   $48 = (_strsave($47)|0);
   $49 = $9;
   $50 = ((($49)) + 20|0);
   HEAP32[$50>>2] = $48;
   $51 = $9;
   $52 = ((($51)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0|0);
   if ($54) {
    $55 = $9;
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    _free($57);
   }
   $58 = $9;
   $59 = ((($58)) + 24|0);
   HEAP32[$59>>2] = 0;
  }
 } while(0);
 $60 = $5;
 $61 = $6;
 $62 = $7;
 $63 = $8;
 $64 = (_writeit($60,$61,$62,$63)|0);
 $4 = $64;
 $65 = $4;
 STACKTOP = sp;return ($65|0);
}
function _exWQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_exWriteToFile($4,0,0,$5)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 _exQuit($8);
 STACKTOP = sp;return;
}
function _exReadFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[4326]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $3 = $12;
 }
 $13 = $3;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(33);
 $17 = $3;
 if (!($16)) {
  $26 = (_get_file($17,$5,$6,19254,7079)|0);
  $7 = $26;
  $27 = $7;
  $28 = ($27|0)>(0);
  if ($28) {
   $29 = HEAP32[4328]|0;
   $30 = $29 & -5;
   HEAP32[4328] = $30;
   $31 = $4;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$5>>2]|0;
   _repllines($33,0,$34);
   $35 = HEAP32[4328]|0;
   $36 = $35 | 4;
   HEAP32[4328] = $36;
   _xvUpdateAllBufferWindows();
   $37 = $4;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   _move_cursor($39,0);
   _begin_line(1);
  }
  $40 = $7;
  $41 = ($40|0)>=(0);
  $42 = $41&1;
  $2 = $42;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $18 = ((($17)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(0);
 if ($21) {
  _show_error(6904,$vararg_buffer);
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 } else {
  $22 = $3;
  $23 = ((($22)) + 1|0);
  $24 = $4;
  $25 = (_xvReadFromCommand($23,$24)|0);
  $2 = $25;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _exEditAlternateFile() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_alt_file_name()|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _show_error(6932,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[4328]|0;
 $0 = $4;
 $5 = HEAP32[4328]|0;
 $6 = $5 & -3;
 HEAP32[4328] = $6;
 $7 = (_xvCanSplit()|0);
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = (_alt_file_name()|0);
   $10 = (_exNewBuffer($9,0)|0);
   $1 = $10;
  } else {
   _xvAutoWrite();
   $11 = HEAP32[4326]|0;
   $12 = ((($11)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 1;
   $15 = ($14|0)!=(0);
   if ($15) {
    _show_error(6958,$vararg_buffer1);
    $1 = 0;
    break;
   } else {
    $16 = (_alt_file_name()|0);
    $17 = (_exEditFile(0,$16)|0);
    $1 = $17;
    break;
   }
  }
 } while(0);
 $18 = $1;
 $19 = ($18|0)!=(0);
 if ($19) {
  _move_window_to_cursor();
  _redraw_window(0);
 }
 $20 = $0;
 HEAP32[4328] = $20;
 STACKTOP = sp;return;
}
function _exShowFileStatus($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[4326]|0;
 $2 = $3;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _show_file_info(1);
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $1;
 $14 = (_strsave($13)|0);
 $15 = $2;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = $14;
 _unpreserve();
 (_preservebuf()|0);
 _show_file_info(1);
 STACKTOP = sp;return;
}
function _exShellCommand($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $5 = HEAP32[4501]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  _show_error(11103,$vararg_buffer);
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 _sys_endv();
 _xvAutoWriteAll();
 $7 = HEAP32[(3204)>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (_xvChangesNotSaved()|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   _show_error(6703,$vararg_buffer4);
   $1 = 0;
   $29 = $1;
   STACKTOP = sp;return ($29|0);
  }
 }
 _WarnUnSaved();
 $11 = $2;
 $12 = HEAP32[1423]|0;
 (_fputs($11,$12)|0);
 $13 = HEAP32[1423]|0;
 (_fputs(11136,$13)|0);
 $14 = HEAP32[1423]|0;
 (_fflush($14)|0);
 $15 = $2;
 $16 = (_call_system($15)|0);
 $4 = $16;
 $17 = HEAP32[1423]|0;
 (_fputs(11139,$17)|0);
 $18 = HEAP32[1423]|0;
 (_fflush($18)|0);
 while(1) {
  $19 = HEAP32[1391]|0;
  $20 = (_getc($19)|0);
  $3 = $20;
  $21 = ($20|0)!=(10);
  $22 = $3;
  $23 = ($22|0)!=(13);
  $or$cond = $21 & $23;
  $24 = $3;
  $25 = ($24|0)!=(-1);
  $or$cond3 = $or$cond & $25;
  if (!($or$cond3)) {
   break;
  }
 }
 _sys_startv();
 _redraw_all(1);
 $26 = $4;
 $27 = ($26|0)==(0);
 $28 = $27&1;
 $1 = $28;
 $29 = $1;
 STACKTOP = sp;return ($29|0);
}
function _WarnUnSaved() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(4524)>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  return;
 }
 $2 = (_xvChangesNotSaved()|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[1423]|0;
 (_fputs(6985,$4)|0);
 $5 = HEAP32[1423]|0;
 (_fflush($5)|0);
 return;
}
function _exInteractiveShell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = 0;
 $4 = HEAP32[4501]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  _show_error(11103,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[(4100)>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _show_error(7016,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  _xvAutoWriteAll();
  $11 = HEAP32[(3204)>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = (_xvChangesNotSaved()|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    _show_error(6703,$vararg_buffer3);
    STACKTOP = sp;return;
   }
  }
 }
 _sys_endv();
 _WarnUnSaved();
 $15 = $2;
 $16 = (_call_shell($15)|0);
 $3 = $16;
 _sys_startv();
 _redraw_all(1);
 $17 = $3;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $2;
 $20 = (___errno_location()|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(0);
 if ($22) {
  $23 = (___errno_location()|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_strerror($24)|0);
  $26 = $25;
 } else {
  $26 = 7039;
 }
 HEAP32[$vararg_buffer5>>2] = $19;
 $vararg_ptr7 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $26;
 _show_error(7053,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _exSuspend($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4325]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  _xvAutoWriteAll();
  $6 = HEAP32[(3204)>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = (_xvChangesNotSaved()|0);
   $9 = ($8|0)!=(0);
   if ($9) {
    _show_error(6703,$vararg_buffer);
    STACKTOP = sp;return;
   }
  }
 }
 _sys_endv();
 _WarnUnSaved();
 $10 = (_getpid()|0);
 (_kill(($10|0),19)|0);
 HEAP32[4502] = 1;
 _sys_startv();
 _redraw_all(1);
 STACKTOP = sp;return;
}
function _exEquals($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[4327]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 _show_message(7075,$vararg_buffer);
 STACKTOP = sp;return;
}
function _exHelp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[4328]|0;
 $0 = $1;
 $2 = HEAP32[4328]|0;
 $3 = $2 & -15;
 HEAP32[4328] = $3;
 $4 = HEAP32[(3452)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[(3452)>>2]|0;
  $7 = (_fexpand($6,0)|0);
  $8 = (_exNewBuffer($7,0)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = HEAP32[4326]|0;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 | 2;
   HEAP32[$11>>2] = $13;
   _move_window_to_cursor();
   _show_file_info(1);
   _redraw_window(0);
  }
 }
 $14 = $0;
 HEAP32[4328] = $14;
 STACKTOP = sp;return;
}
function _exSource($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $2 = $0;
 $7 = 1;
 $9 = HEAP32[4217]|0;
 $8 = $9;
 HEAP32[4217] = 0;
 $10 = $2;
 $11 = (_get_file($10,$3,$4,19254,7079)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $8;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $2;
   HEAP32[$vararg_buffer>>2] = $16;
   _show_error(7093,$vararg_buffer);
  }
  $1 = 0;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $17 = HEAP32[$3>>2]|0;
 $6 = $17;
 while(1) {
  $18 = $6;
  $19 = HEAP32[$4>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)!=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $6;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_exCommand($25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 8;
   break;
  }
  $28 = $6;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 8) {
  $7 = 0;
 }
 $31 = HEAP32[$3>>2]|0;
 _throw($31);
 $32 = $8;
 HEAP32[4217] = $32;
 $33 = $7;
 $1 = $33;
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _exChangeDirectory($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = HEAP32[4215]|0;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = (_getenv((7109|0))|0);
  $3 = $9;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $1 = 7114;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  }
  $11 = $3;
  $12 = (_strsave($11)|0);
  HEAP32[4215] = $12;
  $13 = HEAP32[4215]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $1 = 7148;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  }
 }
 $15 = $2;
 $16 = ($15|0)==(0|0);
 do {
  if ($16) {
   $17 = HEAP32[4215]|0;
   $2 = $17;
  } else {
   $18 = $2;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(45);
   if ($21) {
    $22 = $2;
    $23 = ((($22)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = HEAP32[4216]|0;
     $28 = ($27|0)==(0|0);
     if (!($28)) {
      $29 = HEAP32[4216]|0;
      $2 = $29;
      break;
     }
     $1 = 7189;
     $53 = $1;
     STACKTOP = sp;return ($53|0);
    }
   }
  }
 } while(0);
 $30 = (_alloc(1025)|0);
 $4 = $30;
 $31 = $4;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $1 = 5948;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $33 = $4;
 $34 = (_getcwd($33,1025)|0);
 $35 = ($34|0)==(0|0);
 if ($35) {
  $36 = $4;
  _free($36);
  $4 = 0;
 }
 $37 = $2;
 $38 = (_chdir($37)|0);
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = (___errno_location()|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_strerror($41)|0);
  $1 = $42;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $43 = HEAP32[4216]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = HEAP32[4216]|0;
  _free($45);
  HEAP32[4216] = 0;
 }
 $46 = $4;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $4;
  $49 = $4;
  $50 = (_strlen($49)|0);
  $51 = (($50) + 1)|0;
  $52 = (_re_alloc($48,$51)|0);
  HEAP32[4216] = $52;
 }
 $1 = 0;
 $53 = $1;
 STACKTOP = sp;return ($53|0);
}
function _exLineOperation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 32|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $6;
  $19 = $15;
 } else {
  $16 = HEAP32[4327]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
 }
 HEAP32[$9>>2] = $19;
 $20 = $7;
 $21 = ($20|0)!=(0|0);
 $22 = $7;
 $23 = HEAP32[$9>>2]|0;
 $24 = $21 ? $22 : $23;
 HEAP32[$10>>2] = $24;
 $25 = ((($10)) + 4|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($9)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = $5;
 $28 = ($27|0)==(116);
 $29 = $5;
 $30 = ($29|0)==(109);
 $or$cond = $28 | $30;
 $31 = $8;
 $32 = ($31|0)==(0|0);
 $or$cond3 = $or$cond & $32;
 if ($or$cond3) {
  _show_error(7211,$vararg_buffer);
  $4 = 0;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 $33 = $5;
 $34 = ($33|0)==(109);
 if ($34) {
  $35 = $8;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $12 = $37;
  $38 = $12;
  $39 = HEAP32[$9>>2]|0;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38>>>0)>=($41>>>0);
  if ($42) {
   $43 = $12;
   $44 = HEAP32[$10>>2]|0;
   $45 = ((($44)) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43>>>0)<=($46>>>0);
   if ($47) {
    _show_error(7236,$vararg_buffer4);
    $4 = 0;
    $67 = $4;
    STACKTOP = sp;return ($67|0);
   }
  }
 }
 $48 = $5;
 $49 = ($48|0)==(100);
 $50 = $5;
 $51 = ($50|0)==(121);
 $52 = $49 ? 1 : $51;
 $53 = $52 ? 64 : 61;
 $54 = (_do_yank($9,$10,0,$53)|0);
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $4 = 0;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 $56 = (_start_command()|0);
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $4 = 0;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 $58 = $5;
 switch ($58|0) {
 case 109: case 100:  {
  $59 = HEAP32[$9>>2]|0;
  _move_cursor($59,0);
  $60 = HEAP32[$9>>2]|0;
  $61 = HEAP32[$9>>2]|0;
  $62 = HEAP32[$10>>2]|0;
  $63 = (_cntllines($61,$62)|0);
  _repllines($60,$63,0);
  _xvUpdateAllBufferWindows();
  _cursupdate();
  _begin_line(1);
  break;
 }
 default: {
 }
 }
 $64 = $5;
 switch ($64|0) {
 case 109: case 116:  {
  $65 = $8;
  HEAP32[$11>>2] = $65;
  $66 = ((($11)) + 4|0);
  HEAP32[$66>>2] = 0;
  _do_put($11,0,61);
  _xvUpdateAllBufferWindows();
  _cursupdate();
  break;
 }
 default: {
 }
 }
 _end_command();
 $4 = 1;
 $67 = $4;
 STACKTOP = sp;return ($67|0);
}
function _exJoin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[4327]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $4 = $13;
 }
 $14 = $5;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = $4;
  $5 = $16;
 }
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = $5;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) - -1)|0;
 $24 = ($23|0)==(0);
 $25 = $5;
 if ($24) {
  $28 = $25;
 } else {
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27;
 }
 $7 = $28;
 $29 = $4;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) - -1)|0;
 $33 = ($32|0)==(0);
 if ($33) {
  _beep();
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 $34 = (_start_command()|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 $8 = 1;
 while(1) {
  $36 = $4;
  $37 = $5;
  $38 = ($36|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $4;
  $40 = $7;
  $41 = ($39|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $42 = $4;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - -1)|0;
  $48 = ($47|0)==(0);
  if ($48) {
   break;
  }
  $49 = $4;
  $50 = $6;
  $51 = (_xvJoinLine($49,$50)|0);
  $52 = ($51|0)!=(0);
  if (!($52)) {
   label = 16;
   break;
  }
  $53 = $4;
  _move_cursor($53,0);
  $54 = $4;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $4 = $56;
 }
 if ((label|0) == 16) {
  _beep();
  $8 = 0;
 }
 _xvUpdateAllBufferWindows();
 _end_command();
 $57 = $8;
 $3 = $57;
 $58 = $3;
 STACKTOP = sp;return ($58|0);
}
function _xvi_handle_event($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[(16884)>>2] = 0;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 L1: do {
  switch ($7|0) {
  case 0:  {
   $8 = HEAP32[4218]|0;
   $9 = (($8) + 1)|0;
   HEAP32[4218] = $9;
   $10 = $2;
   $11 = ((($10)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   _map_char($12);
   break;
  }
  case 1:  {
   $13 = (_map_waiting()|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    _map_timeout();
    break L1;
   }
   $15 = HEAP32[4218]|0;
   $16 = ($15|0)>=(60);
   if ($16) {
    (_exPreserveAllBuffers()|0);
    HEAP32[4218] = 0;
   }
   break;
  }
  case 2:  {
   _redraw_all(1);
   break;
  }
  case 3:  {
   $17 = $2;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $2;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = ((($23)) + 8|0);
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_vs_resize($19,$22,$26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    (_exPreserveAllBuffers()|0);
    _show_error(5948,$vararg_buffer);
   }
   $29 = $2;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   _xvAdjustWindows($31);
   _move_cursor_to_window();
   _cursupdate();
   _wind_goto();
   break;
  }
  case 4:  {
   $32 = $2;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 8|0);
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   _mouseclick($34,$38);
   break;
  }
  case 5:  {
   $39 = $2;
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $2;
   $43 = ((($42)) + 8|0);
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $2;
   $47 = ((($46)) + 8|0);
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   $51 = ((($50)) + 8|0);
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   _mousedrag($41,$45,$49,$53);
   break;
  }
  case 6:  {
   $54 = $2;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   _mousemove($56);
   break;
  }
  case 9: case 10:  {
   (_exPreserveAllBuffers()|0);
   HEAP32[(16884)>>2] = 1;
   HEAP32[4325] = 6;
   break;
  }
  case 8:  {
   $57 = HEAP32[4325]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    _exSuspend(0);
    break L1;
   }
   $59 = HEAP32[4325]|0;
   $60 = ($59|0)==(1);
   if ($60) {
    _map_char(27);
    break L1;
   } else {
    _beep();
    break L1;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $3 = 0;
 L25: while(1) {
  $61 = (_map_getc()|0);
  $4 = $61;
  $62 = ($61|0)!=(-1);
  $63 = HEAP32[4325]|0;
  if (!($62)) {
   break;
  }
  switch ($63|0) {
  case 1: case 0:  {
   $5 = 49;
   break;
  }
  case 4:  {
   $5 = 50;
   break;
  }
  case 5:  {
   $5 = 51;
   break;
  }
  case 2:  {
   $5 = 52;
   break;
  }
  case 3:  {
   $5 = 53;
   break;
  }
  default: {
  }
  }
  $64 = HEAP32[4325]|0;
  $65 = ($64|0)!=(6);
  if ($65) {
   $66 = $5;
   $67 = $4;
   $68 = (FUNCTION_TABLE_ii[$66 & 127]($67)|0);
   $69 = ($68|0)!=(0);
   if ($69) {
    $3 = 1;
   }
  }
  $70 = HEAP32[4325]|0;
  switch ($70|0) {
  case 1:  {
   break;
  }
  case 2: case 0: case 3:  {
   $71 = HEAP32[(4164)>>2]|0;
   $72 = ($71|0)!=(0);
   if ($72) {
    _update_sline();
   }
   break;
  }
  default: {
   continue L25;
  }
  }
  $73 = $3;
  $74 = ($73|0)!=(0);
  if ($74) {
   _move_window_to_cursor();
   _cursupdate();
  }
  _wind_goto();
 }
 $75 = ($63|0)==(6);
 if ($75) {
  HEAP32[4219] = 1;
  $1 = 16876;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $76 = HEAP32[4331]|0;
 $77 = ($76|0)!=(0);
 if ($77) {
  _show_message(7278,$vararg_buffer1);
  _wind_goto();
  HEAP32[4331] = 0;
 }
 $78 = $2;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 80|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $2;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 FUNCTION_TABLE_vi[$82 & 127]($85);
 $86 = (_map_waiting()|0);
 $87 = ($86|0)!=(0);
 if ($87) {
  $88 = HEAP32[(4452)>>2]|0;
  $$sink$sink = $88;
 } else {
  $89 = HEAP32[4218]|0;
  $90 = ($89|0)>=(60);
  $91 = HEAP32[(3828)>>2]|0;
  $92 = ($91*1000)|0;
  $$sink = $90 ? $92 : 0;
  $$sink$sink = $$sink;
 }
 HEAP32[(16880)>>2] = $$sink$sink;
 HEAP32[4219] = 0;
 $1 = 16876;
 $93 = $1;
 STACKTOP = sp;return ($93|0);
}
function _n_proc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = HEAP32[4328]|0;
 $2 = $4;
 $5 = $1;
 $6 = (_normal($5)|0);
 $3 = $6;
 $7 = $2;
 HEAP32[4328] = $7;
 $8 = $3;
 STACKTOP = sp;return ($8|0);
}
function _c_proc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 1;
 $5 = $1;
 $6 = (_cmd_input($5)|0);
 switch ($6|0) {
 case 2:  {
  _info_update();
  break;
 }
 case 1:  {
  $4 = 0;
  break;
 }
 case 0:  {
  $7 = (_get_cmd()|0);
  $2 = $7;
  $8 = $2;
  $9 = (_strsave($8)|0);
  $3 = $9;
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 63: case 47:  {
   $13 = $2;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = $2;
   $17 = ((($16)) + 1|0);
   $18 = (_xvProcessSearch($15,$17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    _unstuff();
   }
   break;
  }
  case 33:  {
   $20 = $2;
   $21 = ((($20)) + 1|0);
   $22 = (_do_pipe($21)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    _unstuff();
   }
   break;
  }
  case 58:  {
   HEAP32[4217] = 1;
   $24 = $2;
   $25 = ((($24)) + 1|0);
   $26 = (_exCommand($25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    _unstuff();
   }
   break;
  }
  default: {
  }
  }
  $28 = $3;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $3;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = $3;
   (_yank_str($32,$33,1)|0);
   $34 = $3;
   _free($34);
  }
  break;
 }
 default: {
 }
 }
 $35 = $4;
 STACKTOP = sp;return ($35|0);
}
function _d_proc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_disp_screen($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _set_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_txtformset($5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $2 = 1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $8 = $3;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _show_error(7331,$vararg_buffer);
 }
 $2 = 0;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _txtformset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)<(0);
 $5 = $2;
 $6 = ($5>>>0)>(6);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = $2;
  $8 = (2928 + (($7*12)|0)|0);
  ;HEAP32[16888>>2]=HEAP32[$8>>2]|0;HEAP32[16888+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[16888+8>>2]=HEAP32[$8+8>>2]|0;
  $9 = $2;
  $10 = (2896 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[753] = $11;
  $1 = 1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _get_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer23 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp;
 $25 = sp + 104|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = 0;
 $17 = 0;
 $27 = HEAP32[4217]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = HEAP32[(3392)>>2]|0;
  $30 = $29 & 16;
  $31 = ($30|0)!=(0);
  $32 = $6;
  if ($31) {
   $33 = HEAP32[753]|0;
   $34 = $9;
   HEAP32[$vararg_buffer>>2] = $32;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $33;
   $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $34;
   _show_message(7361,$vararg_buffer);
  } else {
   $35 = $9;
   HEAP32[$vararg_buffer6>>2] = $32;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $35;
   _show_message(7373,$vararg_buffer6);
  }
  $36 = HEAP32[4327]|0;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 80|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[4327]|0;
  $42 = ((($41)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vi[$40 & 127]($43);
 }
 $44 = $6;
 $45 = (_fopen($44,13220)|0);
 $11 = $45;
 $46 = $11;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $8;
  HEAP32[$48>>2] = 0;
  $49 = $7;
  HEAP32[$49>>2] = 0;
  $50 = $6;
  $51 = (_access($50,0)|0);
  $52 = ($51|0)==(0);
  $53 = HEAP32[4217]|0;
  $54 = ($53|0)!=(0);
  if ($52) {
   if ($54) {
    $55 = $6;
    HEAP32[$vararg_buffer10>>2] = $55;
    _show_error(7380,$vararg_buffer10);
   }
   $5 = -2;
   $202 = $5;
   STACKTOP = sp;return ($202|0);
  } else {
   if ($54) {
    $56 = $6;
    $57 = $10;
    HEAP32[$vararg_buffer13>>2] = $56;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = $57;
    _show_message(7373,$vararg_buffer13);
   }
   $5 = -1;
   $202 = $5;
   STACKTOP = sp;return ($202|0);
  }
 }
 $23 = 16384;
 while(1) {
  $58 = $11;
  $59 = $23;
  $60 = (_setvbuf($58,0,0,$59)|0);
  $61 = ($60|0)!=(0);
  $62 = $23;
  $63 = ($62>>>0)>(1);
  $64 = $61 ? $63 : 0;
  if (!($64)) {
   break;
  }
  $65 = $23;
  $66 = (($65>>>0) / 2)&-1;
  $23 = $66;
 }
 $14 = 0;
 $13 = 0;
 $12 = 0;
 $21 = 0;
 $15 = 0;
 $19 = 0;
 $67 = HEAP32[4328]|0;
 $22 = $67;
 $68 = HEAP32[4328]|0;
 $69 = $68 & -129;
 HEAP32[4328] = $69;
 $70 = HEAP32[(3108)>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $11;
  _autodetect($72);
 }
 L28: while(1) {
  $73 = $19;
  $74 = ($73|0)!=(4);
  if (!($74)) {
   break;
  }
  $75 = HEAP8[19093]|0;
  $76 = ($75<<24>>24)!=(0);
  if ($76) {
   label = 21;
   break;
  }
  $77 = $11;
  $78 = (_getc($77)|0);
  $24 = $78;
  $79 = $24;
  $80 = ($79|0)==(-1);
  L32: do {
   if ($80) {
    label = 24;
   } else {
    $81 = $24;
    $82 = HEAP32[(16896)>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     label = 24;
    } else {
     $86 = $12;
     $87 = (($86) + 1)|0;
     $12 = $87;
     $88 = $19;
     switch ($88|0) {
     case 0:  {
      $89 = (_initline()|0);
      $18 = $89;
      $90 = ($89|0)==(0|0);
      if ($90) {
       label = 63;
       break L28;
      }
      $91 = $18;
      $92 = ((($91)) + 8|0);
      $93 = HEAP32[$92>>2]|0;
      $20 = $93;
      break;
     }
     case 1:  {
      break;
     }
     case 2:  {
      $102 = $24;
      $103 = HEAP32[(16892)>>2]|0;
      $104 = ($102|0)==($103|0);
      if ($104) {
       $19 = 3;
       break L32;
      } else {
       $19 = 1;
       $105 = $24;
       $106 = $11;
       (_ungetc($105,$106)|0);
       $107 = HEAP32[4222]|0;
       $24 = $107;
       break L32;
      }
      break;
     }
     default: {
      break L32;
     }
     }
     $94 = $24;
     $95 = HEAP32[4222]|0;
     $96 = ($94|0)==($95|0);
     if (!($96)) {
      $99 = $24;
      $100 = HEAP32[(16892)>>2]|0;
      $101 = ($99|0)==($100|0);
      if (!($101)) {
       break;
      }
      $19 = 3;
      break;
     }
     $97 = HEAP32[(16892)>>2]|0;
     $98 = ($97|0)==(-1);
     if ($98) {
      $19 = 3;
      break;
     } else {
      $19 = 2;
      continue L28;
     }
    }
   }
  } while(0);
  if ((label|0) == 24) {
   label = 0;
   $84 = $19;
   $85 = ($84|0)!=(0);
   if (!($85)) {
    label = 26;
    break;
   }
   $15 = 1;
   $19 = 3;
  }
  $108 = $19;
  $109 = ($108|0)==(3);
  if ($109) {
   $110 = $20;
   $111 = $21;
   $112 = (($110) + ($111)|0);
   HEAP8[$112>>0] = 0;
   $113 = $18;
   $114 = $21;
   $115 = (($114) + 1)|0;
   $116 = (_lnresize($113,$115)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    label = 63;
    break;
   }
   $118 = $16;
   $119 = ($118|0)==(0|0);
   $120 = $18;
   if ($119) {
    $16 = $120;
    $121 = $16;
    $17 = $121;
   } else {
    $122 = $17;
    $123 = ((($122)) + 4|0);
    HEAP32[$123>>2] = $120;
    $124 = $17;
    $125 = $18;
    HEAP32[$125>>2] = $124;
    $126 = $18;
    $17 = $126;
   }
   $127 = $13;
   $128 = (($127) + 1)|0;
   $13 = $128;
   $21 = 0;
   $19 = 0;
   continue;
  }
  $129 = $24;
  $130 = ($129|0)==(0);
  if ($130) {
   $131 = $14;
   $132 = (($131) + 1)|0;
   $14 = $132;
   continue;
  }
  $133 = HEAP32[(3228)>>2]|0;
  $134 = ($133|0)!=(0);
  if ($134) {
   $135 = $24;
   $136 = (_isprint($135)|0);
   $137 = ($136|0)==(0);
   $138 = $24;
   $139 = ($138|0)!=(9);
   $or$cond = $137 & $139;
   $140 = $24;
   $141 = ($140|0)!=(12);
   $or$cond3 = $or$cond & $141;
   if ($or$cond3) {
    continue;
   }
  }
  $142 = $21;
  $143 = $18;
  $144 = ((($143)) + 12|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) - 1)|0;
  $147 = ($142|0)>=($146|0);
  if ($147) {
   $148 = $18;
   $149 = $21;
   $150 = (($149) + 2)|0;
   $151 = (_lnresize($148,$150)|0);
   $152 = ($151|0)!=(0);
   if (!($152)) {
    label = 63;
    break;
   }
   $153 = $18;
   $154 = ((($153)) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   $20 = $155;
  }
  $19 = 1;
  $156 = $24;
  $157 = $156&255;
  $158 = $20;
  $159 = $21;
  $160 = (($159) + 1)|0;
  $21 = $160;
  $161 = (($158) + ($159)|0);
  HEAP8[$161>>0] = $157;
 }
 if ((label|0) == 21) {
  HEAP8[19093] = 0;
  HEAP32[4331] = 1;
  $13 = -5;
  label = 64;
 }
 else if ((label|0) == 26) {
  $19 = 4;
 }
 else if ((label|0) == 63) {
  $13 = -4;
  label = 64;
 }
 if ((label|0) == 64) {
  $196 = $16;
  _throw($196);
  $197 = $11;
  (_fclose($197)|0);
  $198 = $8;
  HEAP32[$198>>2] = 0;
  $199 = $7;
  HEAP32[$199>>2] = 0;
  $200 = $22;
  HEAP32[4328] = $200;
  $201 = $13;
  $5 = $201;
  $202 = $5;
  STACKTOP = sp;return ($202|0);
 }
 $162 = $11;
 (_fclose($162)|0);
 $163 = HEAP32[4217]|0;
 $164 = ($163|0)!=(0);
 if ($164) {
  $165 = ((($25)) + 4|0);
  HEAP32[$165>>2] = 0;
  $166 = ((($25)) + 12|0);
  HEAP32[$166>>2] = 0;
  $167 = ((($25)) + 8|0);
  HEAP32[$167>>2] = 0;
  $168 = $14;
  $169 = ($168>>>0)>(0);
  if ($169) {
   $170 = $14;
   $171 = $14;
   $172 = ($171|0)==(1);
   $173 = $172 ? 19254 : 7396;
   HEAP32[$vararg_buffer17>>2] = $170;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $173;
   (_lformat($25,7398,$vararg_buffer17)|0);
  }
  $174 = $15;
  $175 = ($174|0)!=(0);
  if ($175) {
   (_lformat($25,7422,$vararg_buffer21)|0);
  }
  $176 = (_flexgetstr($25)|0);
  $26 = $176;
  $177 = HEAP32[(3392)>>2]|0;
  $178 = $177 & 16;
  $179 = ($178|0)!=(0);
  $180 = $6;
  if ($179) {
   $181 = HEAP32[753]|0;
   $182 = $9;
   $183 = $13;
   $184 = $12;
   $185 = $26;
   HEAP32[$vararg_buffer23>>2] = $180;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = $181;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = $182;
   $vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
   HEAP32[$vararg_ptr28>>2] = $183;
   $vararg_ptr29 = ((($vararg_buffer23)) + 16|0);
   HEAP32[$vararg_ptr29>>2] = $184;
   $vararg_ptr30 = ((($vararg_buffer23)) + 20|0);
   HEAP32[$vararg_ptr30>>2] = $185;
   _show_message(7446,$vararg_buffer23);
  } else {
   $186 = $9;
   $187 = $13;
   $188 = $12;
   $189 = $26;
   HEAP32[$vararg_buffer31>>2] = $180;
   $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
   HEAP32[$vararg_ptr34>>2] = $186;
   $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
   HEAP32[$vararg_ptr35>>2] = $187;
   $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
   HEAP32[$vararg_ptr36>>2] = $188;
   $vararg_ptr37 = ((($vararg_buffer31)) + 16|0);
   HEAP32[$vararg_ptr37>>2] = $189;
   _show_message(7468,$vararg_buffer31);
  }
  _flexdelete($25);
 }
 $190 = $16;
 $191 = $7;
 HEAP32[$191>>2] = $190;
 $192 = $17;
 $193 = $8;
 HEAP32[$193>>2] = $192;
 $194 = $22;
 HEAP32[4328] = $194;
 $195 = $13;
 $5 = $195;
 $202 = $5;
 STACKTOP = sp;return ($202|0);
}
function _autodetect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 $4 = (_guess_format($3,$2)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $10 = $1;
  _rewind($10);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$2>>2]|0;
 (_txtformset($6)|0);
 $7 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 _set_param(14,$vararg_buffer);
 $8 = HEAP32[(3392)>>2]|0;
 $9 = $8 | 16;
 HEAP32[(3392)>>2] = $9;
 $10 = $1;
 _rewind($10);
 STACKTOP = sp;return;
}
function _initline() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_newline(81)|0);
 $0 = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_newline(1)|0);
  $0 = $3;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _guess_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 L1: while(1) {
  $5 = $3;
  $6 = (_getc($5)|0);
  switch ($6|0) {
  case -1:  {
   label = 3;
   break L1;
   break;
  }
  case 0:  {
   label = 4;
   break L1;
   break;
  }
  case 10:  {
   label = 5;
   break L1;
   break;
  }
  case 13:  {
   label = 6;
   break L1;
   break;
  }
  case 30:  {
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 3) {
  $2 = 0;
 }
 else if ((label|0) == 4) {
  $7 = $4;
  HEAP32[$7>>2] = 0;
  $2 = 1;
 }
 else if ((label|0) == 5) {
  $8 = $4;
  HEAP32[$8>>2] = 6;
  $2 = 1;
 }
 else if ((label|0) == 6) {
  $9 = $3;
  $10 = (_getc($9)|0);
  $11 = ($10|0)==(10);
  $12 = $11 ? 2 : 1;
  $13 = $4;
  HEAP32[$13>>2] = $12;
  $2 = 1;
 }
 else if ((label|0) == 7) {
  $14 = $4;
  HEAP32[$14>>2] = 4;
  $2 = 1;
 }
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _appendit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = HEAP32[(3392)>>2]|0;
 $10 = $9 & 16;
 $11 = ($10|0)!=(0);
 $12 = $11 ? 7485 : 12165;
 $13 = $5;
 $14 = HEAP32[753]|0;
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 _show_message($12,$vararg_buffer);
 $15 = $8;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $5;
  $18 = (_access($17,0)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = $5;
   HEAP32[$vararg_buffer2>>2] = $20;
   _show_error(7495,$vararg_buffer2);
   $4 = 0;
   $25 = $4;
   STACKTOP = sp;return ($25|0);
  }
 }
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = (_write_file($21,$22,$23,1)|0);
 $4 = $24;
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _write_file($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 48|0;
 $11 = sp + 44|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = HEAP32[(4620)>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = $5;
  $15 = (_access($14,0)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   $17 = $5;
   $18 = (_access($17,2)|0);
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = $5;
    HEAP32[$vararg_buffer>>2] = $20;
    _show_error(7526,$vararg_buffer);
    $4 = 0;
    $43 = $4;
    STACKTOP = sp;return ($43|0);
   }
  }
 }
 $21 = $8;
 $22 = ($21|0)!=(0);
 $23 = $5;
 if ($22) {
  $24 = (_fopen($23,7549)|0);
  $9 = $24;
 } else {
  $25 = (_fopen($23,13212)|0);
  $9 = $25;
 }
 $26 = $9;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $5;
  HEAP32[$vararg_buffer1>>2] = $28;
  _show_error(7551,$vararg_buffer1);
  $4 = 0;
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 $29 = $9;
 $30 = $6;
 $31 = $7;
 $32 = (_put_file($29,$30,$31,$10,$11)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $4 = 0;
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 $34 = HEAP32[(3392)>>2]|0;
 $35 = $34 & 16;
 $36 = ($35|0)!=(0);
 $37 = $5;
 if ($36) {
  $38 = HEAP32[753]|0;
  $39 = HEAP32[$11>>2]|0;
  $40 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $37;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $38;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $39;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $40;
  _show_message(7568,$vararg_buffer4);
 } else {
  $41 = HEAP32[$11>>2]|0;
  $42 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $37;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $41;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $42;
  _show_message(7586,$vararg_buffer10);
 }
 $4 = 1;
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _put_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = HEAP32[4326]|0;
 $14 = $18;
 $15 = 16384;
 while(1) {
  $19 = $6;
  $20 = $15;
  $21 = (_setvbuf($19,0,0,$20)|0);
  $22 = ($21|0)!=(0);
  $23 = $15;
  $24 = ($23>>>0)>(1);
  $25 = $22 ? $24 : 0;
  if (!($25)) {
   break;
  }
  $26 = $15;
  $27 = (($26>>>0) / 2)&-1;
  $15 = $27;
 }
 $28 = $7;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = $14;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $11 = $32;
 } else {
  $33 = $7;
  $11 = $33;
 }
 $13 = 0;
 $12 = 0;
 while(1) {
  $34 = $11;
  $35 = $14;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $11;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $16 = $41;
  while(1) {
   $42 = $16;
   $43 = ((($42)) + 1|0);
   $16 = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44 << 24 >> 24;
   $17 = $45;
   $46 = ($45|0)!=(0);
   if (!($46)) {
    break;
   }
   $47 = $17;
   $48 = $6;
   (_putc($47,$48)|0);
   $49 = $12;
   $50 = (($49) + 1)|0;
   $12 = $50;
  }
  $51 = HEAP32[4222]|0;
  $52 = $6;
  (_putc($51,$52)|0);
  $53 = $12;
  $54 = (($53) + 1)|0;
  $12 = $54;
  $55 = HEAP32[(16892)>>2]|0;
  $56 = ($55|0)!=(-1);
  if ($56) {
   $57 = HEAP32[(16892)>>2]|0;
   $58 = $6;
   (_putc($57,$58)|0);
   $59 = $12;
   $60 = (($59) + 1)|0;
   $12 = $60;
  }
  $61 = $6;
  $62 = (_ferror($61)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   label = 15;
   break;
  }
  $65 = $13;
  $66 = (($65) + 1)|0;
  $13 = $66;
  $67 = $8;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $69 = $8;
   $70 = $11;
   $71 = ($69|0)==($70|0);
   if ($71) {
    break;
   }
  }
  $72 = $11;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $11 = $74;
 }
 if ((label|0) == 15) {
  $64 = $6;
  (_fclose($64)|0);
  $5 = 0;
  $86 = $5;
  STACKTOP = sp;return ($86|0);
 }
 $75 = $6;
 $76 = (_fclose($75)|0);
 $77 = ($76|0)!=(0);
 if ($77) {
  $5 = 0;
  $86 = $5;
  STACKTOP = sp;return ($86|0);
 }
 $78 = $9;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $12;
  $81 = $9;
  HEAP32[$81>>2] = $80;
 }
 $82 = $10;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = $13;
  $85 = $10;
  HEAP32[$85>>2] = $84;
 }
 $5 = 1;
 $86 = $5;
 STACKTOP = sp;return ($86|0);
}
function _writeit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$old = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = HEAP32[4326]|0;
 $9 = $11;
 $10 = 0;
 $12 = $9;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 do {
  if ($15) {
   $16 = $9;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (_strcmp($18,$19)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = HEAP32[(3876)>>2]|0;
    $23 = ($22|0)!=(0);
    if ($23) {
     $$old = $8;
     $$old1 = ($$old|0)!=(0);
     if ($$old1) {
      label = 7;
     }
    } else {
     $24 = $9;
     $25 = ((($24)) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $26 & 2;
     $28 = ($27|0)==(0);
     $29 = $8;
     $30 = ($29|0)!=(0);
     $or$cond = $28 | $30;
     if ($or$cond) {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     $10 = 1;
     break;
    }
    $31 = $5;
    HEAP32[$vararg_buffer>>2] = $31;
    _show_error(7599,$vararg_buffer);
    $4 = 0;
    $83 = $4;
    STACKTOP = sp;return ($83|0);
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $32 = $8;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $34 = $5;
   $35 = (_access($34,0)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = $5;
    HEAP32[$vararg_buffer2>>2] = $37;
    _show_error(7622,$vararg_buffer2);
    $4 = 0;
    $83 = $4;
    STACKTOP = sp;return ($83|0);
   }
  }
 }
 $38 = HEAP32[(3392)>>2]|0;
 $39 = $38 & 16;
 $40 = ($39|0)!=(0);
 $41 = $40 ? 7485 : 12165;
 $42 = $5;
 $43 = HEAP32[753]|0;
 HEAP32[$vararg_buffer5>>2] = $42;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $43;
 _show_message($41,$vararg_buffer5);
 $44 = $10;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = (_preservebuf()|0);
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $4 = 0;
   $83 = $4;
   STACKTOP = sp;return ($83|0);
  }
 }
 $48 = $5;
 $49 = $6;
 $50 = $7;
 $51 = (_write_file($48,$49,$50,0)|0);
 $52 = ($51|0)!=(0);
 if (!($52)) {
  $4 = 0;
  $83 = $4;
  STACKTOP = sp;return ($83|0);
 }
 $53 = HEAP32[(3804)>>2]|0;
 $54 = ($53|0)<(3);
 if ($54) {
  $55 = $9;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $59 = $9;
   $60 = ((($59)) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   (_remove($61)|0);
  }
 }
 $62 = $10;
 $63 = ($62|0)!=(0);
 do {
  if ($63) {
   $64 = $6;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    $66 = $6;
    $67 = $9;
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($66|0)==($69|0);
    if (!($70)) {
     break;
    }
   }
   $71 = $7;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    $73 = $7;
    $74 = $9;
    $75 = ((($74)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = HEAP32[$76>>2]|0;
    $78 = ($73|0)==($77|0);
    if (!($78)) {
     break;
    }
   }
   $79 = $9;
   $80 = ((($79)) + 28|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 & -2;
   HEAP32[$80>>2] = $82;
  }
 } while(0);
 $4 = 1;
 $83 = $4;
 STACKTOP = sp;return ($83|0);
}
function _searchc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = $14&255;
 HEAP8[19072] = $15;
 $16 = $6;
 HEAP32[4225] = $16;
 $17 = $7;
 HEAP32[4226] = $17;
 $18 = HEAP32[4327]|0;
 $19 = HEAP32[$18>>2]|0;
 ;HEAP32[16908>>2]=HEAP32[$19>>2]|0;HEAP32[16908+4>>2]=HEAP32[$19+4>>2]|0;
 $20 = $5;
 $21 = $20&255;
 $11 = $21;
 $22 = $6;
 $23 = ($22|0)==(0);
 if ($23) {
  $9 = 54;
  $10 = 55;
 } else {
  $9 = 55;
  $10 = 54;
 }
 $12 = 0;
 while(1) {
  $24 = $12;
  $25 = $8;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $13 = 0;
  while(1) {
   $27 = $9;
   $28 = (FUNCTION_TABLE_ii[$27 & 127](16908)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[4227]|0;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[(16912)>>2]|0;
   $34 = (($32) + ($33)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $11;
   $38 = $37&255;
   $39 = ($36|0)==($38|0);
   if ($39) {
    label = 9;
    break;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $13 = 1;
  }
  $40 = $13;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   label = 11;
   break;
  }
  $42 = $12;
  $43 = (($42) + 1)|0;
  $12 = $43;
 }
 if ((label|0) == 11) {
  $4 = 0;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $44 = $7;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $10;
  (FUNCTION_TABLE_ii[$46 & 127](16908)|0);
 }
 $4 = 16908;
 $47 = $4;
 STACKTOP = sp;return ($47|0);
}
function _crepsearch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = HEAP8[19072]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(0);
 if ($12) {
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 $13 = HEAP32[4225]|0;
 $9 = $13;
 $14 = $5;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[4225]|0;
 if ($15) {
  $17 = ($16|0)==(0);
  $18 = $17 ? 1 : 0;
  $8 = $18;
 } else {
  $8 = $16;
 }
 $19 = HEAP8[19072]|0;
 $20 = $19 << 24 >> 24;
 $21 = $8;
 $22 = HEAP32[4226]|0;
 $23 = $6;
 $24 = (_searchc($20,$21,$22,$23)|0);
 $7 = $24;
 $25 = $9;
 HEAP32[4225] = $25;
 $26 = $7;
 $3 = $26;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _showmatch() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = 0;
 $6 = 0;
 $7 = HEAP32[4327]|0;
 $8 = HEAP32[$7>>2]|0;
 ;HEAP32[16916>>2]=HEAP32[$8>>2]|0;HEAP32[16916+4>>2]=HEAP32[$8+4>>2]|0;
 $6 = 0;
 L1: while(1) {
  $9 = $6;
  $10 = ($9|0)!=(0);
  $11 = $10 ^ 1;
  if (!($11)) {
   break;
  }
  $12 = HEAP32[4229]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[(16920)>>2]|0;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $1 = $17;
  $18 = $1;
  $19 = $18 << 24 >> 24;
  switch ($19|0) {
  case 40:  {
   $3 = 41;
   $2 = 54;
   $6 = 1;
   continue L1;
   break;
  }
  case 41:  {
   $3 = 40;
   $2 = 55;
   $6 = 1;
   continue L1;
   break;
  }
  case 123:  {
   $3 = 125;
   $2 = 54;
   $6 = 1;
   continue L1;
   break;
  }
  case 125:  {
   $3 = 123;
   $2 = 55;
   $6 = 1;
   continue L1;
   break;
  }
  case 91:  {
   $3 = 93;
   $2 = 54;
   $6 = 1;
   continue L1;
   break;
  }
  case 93:  {
   $3 = 91;
   $2 = 55;
   $6 = 1;
   continue L1;
   break;
  }
  default: {
   $20 = (_inc(16916)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    label = 11;
    break L1;
   } else {
    continue L1;
   }
  }
  }
 }
 if ((label|0) == 11) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 while(1) {
  $22 = $2;
  $23 = (FUNCTION_TABLE_ii[$22 & 127](16916)|0);
  $24 = ($23|0)!=(-1);
  if (!($24)) {
   label = 19;
   break;
  }
  $25 = HEAP32[4229]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[(16920)>>2]|0;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $4 = $30;
  $31 = $4;
  $32 = $31 << 24 >> 24;
  $33 = $1;
  $34 = $33 << 24 >> 24;
  $35 = ($32|0)==($34|0);
  if ($35) {
   $36 = $5;
   $37 = (($36) + 1)|0;
   $5 = $37;
   continue;
  }
  $38 = $4;
  $39 = $38 << 24 >> 24;
  $40 = $3;
  $41 = $40 << 24 >> 24;
  $42 = ($39|0)==($41|0);
  if (!($42)) {
   continue;
  }
  $43 = $5;
  $44 = ($43|0)==(0);
  if ($44) {
   label = 17;
   break;
  }
  $45 = $5;
  $46 = (($45) + -1)|0;
  $5 = $46;
 }
 if ((label|0) == 17) {
  $0 = 16916;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _fwd_word($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 HEAP32[4231] = $8;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = (_cls($18)|0);
 $7 = $19;
 $20 = $4;
 ;HEAP32[16928>>2]=HEAP32[$20>>2]|0;HEAP32[16928+4>>2]=HEAP32[$20+4>>2]|0;
 $21 = (_inc(16928)|0);
 $22 = ($21|0)==(-1);
 if ($22) {
  $3 = 0;
  $78 = $3;
  STACKTOP = sp;return ($78|0);
 }
 $23 = $7;
 $24 = ($23|0)!=(0);
 if ($24) {
  while(1) {
   $25 = HEAP32[4232]|0;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[(16932)>>2]|0;
   $29 = (($27) + ($28)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = (_cls($31)|0);
   $33 = $7;
   $34 = ($32|0)==($33|0);
   if (!($34)) {
    break;
   }
   $35 = (_inc(16928)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   $3 = 16928;
   $78 = $3;
   STACKTOP = sp;return ($78|0);
  }
  $37 = HEAP32[4232]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[(16932)>>2]|0;
  $41 = (($39) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_cls($43)|0);
  $45 = ($44|0)!=(0);
  if ($45) {
   $3 = 16928;
   $78 = $3;
   STACKTOP = sp;return ($78|0);
  }
 }
 $46 = $6;
 $47 = ($46|0)!=(0);
 if ($47) {
  while(1) {
   $48 = HEAP32[4232]|0;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[(16932)>>2]|0;
   $52 = (($50) + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = (_cls($54)|0);
   $56 = ($55|0)==(0);
   if (!($56)) {
    break;
   }
   $57 = HEAP32[(16932)>>2]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = HEAP32[4232]|0;
    $60 = ((($59)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = ($63|0)==(0);
    if ($64) {
     break;
    }
   }
   $65 = (_inc(16928)|0);
   $66 = ($65|0)==(-1);
   if ($66) {
    label = 14;
    break;
   }
  }
  if ((label|0) == 14) {
   $67 = HEAP32[(16932)>>2]|0;
   $68 = ($67|0)!=(0);
   if ($68) {
    (_dec(16928)|0);
   }
  }
  $69 = HEAP32[4232]|0;
  $70 = $4;
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[(16932)>>2]|0;
   $74 = $4;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($73|0)==($76|0);
   if ($77) {
    $3 = 0;
    $78 = $3;
    STACKTOP = sp;return ($78|0);
   }
  }
 }
 $3 = 16928;
 $78 = $3;
 STACKTOP = sp;return ($78|0);
}
function _cls($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0&255;
 $2 = $3;
 $4 = $2;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)==(32);
 if (!($6)) {
  $7 = $2;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(9);
  if (!($9)) {
   $10 = $2;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = $2;
    $14 = $13 << 24 >> 24;
    $15 = ($14>>>0)<(128);
    if ($15) {
     $16 = $2;
     $17 = $16 << 24 >> 24;
     $18 = (_isalnum($17)|0);
     $19 = ($18|0)!=(0);
     if (!($19)) {
      label = 7;
     }
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     $20 = $2;
     $21 = $20 << 24 >> 24;
     $22 = ($21|0)==(95);
     if (!($22)) {
      $23 = HEAP32[4231]|0;
      $24 = ($23|0)==(0);
      $25 = $24 ? 2 : 1;
      $1 = $25;
      $26 = $1;
      STACKTOP = sp;return ($26|0);
     }
    }
    $1 = 1;
    $26 = $1;
    STACKTOP = sp;return ($26|0);
   }
  }
 }
 $1 = 0;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _bck_word($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 HEAP32[4231] = $8;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = (_cls($18)|0);
 $7 = $19;
 $20 = $4;
 ;HEAP32[16936>>2]=HEAP32[$20>>2]|0;HEAP32[16936+4>>2]=HEAP32[$20+4>>2]|0;
 $21 = (_dec(16936)|0);
 $22 = ($21|0)==(-1);
 if ($22) {
  $3 = 0;
  $86 = $3;
  STACKTOP = sp;return ($86|0);
 }
 $23 = HEAP32[4234]|0;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[(16940)>>2]|0;
 $27 = (($25) + ($26)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = (_cls($29)|0);
 $31 = $7;
 $32 = ($30|0)==($31|0);
 $33 = $7;
 $34 = ($33|0)!=(0);
 $or$cond = $32 & $34;
 if ($or$cond) {
  while(1) {
   $35 = HEAP32[4234]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[(16940)>>2]|0;
   $39 = (($37) + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = (_cls($41)|0);
   $43 = $7;
   $44 = ($42|0)==($43|0);
   if (!($44)) {
    label = 7;
    break;
   }
   $45 = (_dec(16936)|0);
   $46 = ($45|0)==(-1);
   if ($46) {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   $3 = 16936;
   $86 = $3;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 7) {
   (_inc(16936)|0);
   $3 = 16936;
   $86 = $3;
   STACKTOP = sp;return ($86|0);
  }
 }
 while(1) {
  $47 = HEAP32[4234]|0;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[(16940)>>2]|0;
  $51 = (($49) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (_cls($53)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   label = 14;
   break;
  }
  $56 = HEAP32[(16940)>>2]|0;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = HEAP32[4234]|0;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(0);
   if ($63) {
    label = 11;
    break;
   }
  }
  $64 = (_dec(16936)|0);
  $65 = ($64|0)==(-1);
  if ($65) {
   label = 13;
   break;
  }
 }
 if ((label|0) == 11) {
  $3 = 16936;
  $86 = $3;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 13) {
  $3 = 16936;
  $86 = $3;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 14) {
  $66 = HEAP32[4234]|0;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[(16940)>>2]|0;
  $70 = (($68) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = (_cls($72)|0);
  $7 = $73;
  while(1) {
   $74 = HEAP32[4234]|0;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[(16940)>>2]|0;
   $78 = (($76) + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 << 24 >> 24;
   $81 = (_cls($80)|0);
   $82 = $7;
   $83 = ($81|0)==($82|0);
   if (!($83)) {
    label = 18;
    break;
   }
   $84 = (_dec(16936)|0);
   $85 = ($84|0)==(-1);
   if ($85) {
    label = 17;
    break;
   }
  }
  if ((label|0) == 17) {
   $3 = 16936;
   $86 = $3;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 18) {
   (_inc(16936)|0);
   $3 = 16936;
   $86 = $3;
   STACKTOP = sp;return ($86|0);
  }
 }
 return (0)|0;
}
function _end_word($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 HEAP32[4231] = $8;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = (_cls($18)|0);
 $7 = $19;
 $20 = $4;
 ;HEAP32[16944>>2]=HEAP32[$20>>2]|0;HEAP32[16944+4>>2]=HEAP32[$20+4>>2]|0;
 $21 = (_inc(16944)|0);
 switch ($21|0) {
 case -1:  {
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
  break;
 }
 case 2:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 do {
  if ((label|0) == 3) {
   $22 = (_inc(16944)|0);
   $23 = ($22|0)==(-1);
   if (!($23)) {
    (_dec(16944)|0);
    break;
   }
   $3 = 0;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  }
 } while(0);
 $24 = HEAP32[4236]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[(16948)>>2]|0;
 $28 = (($26) + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = (_cls($30)|0);
 $32 = $7;
 $33 = ($31|0)==($32|0);
 $34 = $7;
 $35 = ($34|0)!=(0);
 $or$cond = $33 & $35;
 if ($or$cond) {
  while(1) {
   $36 = HEAP32[4236]|0;
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[(16948)>>2]|0;
   $40 = (($38) + ($39)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = (_cls($42)|0);
   $44 = $7;
   $45 = ($43|0)==($44|0);
   if (!($45)) {
    label = 10;
    break;
   }
   $46 = (_inc(16944)|0);
   $47 = ($46|0)==(-1);
   if ($47) {
    label = 9;
    break;
   }
  }
  if ((label|0) == 9) {
   $3 = 16944;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  }
  else if ((label|0) == 10) {
   (_dec(16944)|0);
   $3 = 16944;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  }
 }
 while(1) {
  $48 = HEAP32[4236]|0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[(16948)>>2]|0;
  $52 = (($50) + ($51)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = (_cls($54)|0);
  $56 = ($55|0)==(0);
  if (!($56)) {
   break;
  }
  $57 = (_inc(16944)|0);
  $58 = ($57|0)==(-1);
  if ($58) {
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  $3 = 16944;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 $59 = HEAP32[4236]|0;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[(16948)>>2]|0;
 $63 = (($61) + ($62)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64 << 24 >> 24;
 $66 = (_cls($65)|0);
 $7 = $66;
 while(1) {
  $67 = HEAP32[4236]|0;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[(16948)>>2]|0;
  $71 = (($69) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = (_cls($73)|0);
  $75 = $7;
  $76 = ($74|0)==($75|0);
  if (!($76)) {
   label = 18;
   break;
  }
  $77 = (_inc(16944)|0);
  $78 = ($77|0)==(-1);
  if ($78) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $3 = 16944;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 18) {
  (_dec(16944)|0);
  $3 = 16944;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _xvDoSearch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 HEAP32[$2>>2] = $0;
 $3 = $1;
 $9 = HEAP32[4327]|0;
 $4 = $9;
 _gotocmd(0);
 $10 = $3;
 switch ($10|0) {
 case 47:  {
  $8 = 0;
  HEAP32[4238] = 0;
  break;
 }
 case 63:  {
  $8 = 1;
  HEAP32[4238] = 1;
  break;
 }
 case 110:  {
  $11 = HEAP32[4238]|0;
  $8 = $11;
  break;
 }
 case 78:  {
  $12 = HEAP32[4238]|0;
  $13 = ($12|0)==(0);
  $14 = $13 ? 1 : 0;
  $8 = $14;
  break;
 }
 default: {
 }
 }
 $15 = HEAP32[4328]|0;
 $6 = $15;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $8;
 $24 = (_search($18,$22,$23,$2)|0);
 $5 = $24;
 $25 = $5;
 $26 = ($25|0)==(0|0);
 if ($26) {
  _regerror_jsvim(7661);
  $7 = 0;
  $32 = $6;
  HEAP32[4328] = $32;
  $33 = $7;
  STACKTOP = sp;return ($33|0);
 }
 $27 = HEAP32[$2>>2]|0;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = ($29|0)!=(0);
 if ($30) {
  _regerror_jsvim(7679);
  $7 = 0;
  $32 = $6;
  HEAP32[4328] = $32;
  $33 = $7;
  STACKTOP = sp;return ($33|0);
 } else {
  $31 = $5;
  $7 = $31;
  $32 = $6;
  HEAP32[4328] = $32;
  $33 = $7;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _xvLocateTextObject($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $10 = $5;
 switch ($10|0) {
 case 40:  {
  $7 = 1;
  label = 3;
  break;
 }
 case 41:  {
  label = 3;
  break;
 }
 case 123:  {
  $7 = 1;
  label = 5;
  break;
 }
 case 125:  {
  label = 5;
  break;
 }
 case 91:  {
  $7 = 1;
  label = 7;
  break;
 }
 case 93:  {
  label = 7;
  break;
 }
 default: {
 }
 }
 do {
  if ((label|0) == 3) {
   $11 = HEAP32[(4076)>>2]|0;
   $8 = $11;
  }
  else if ((label|0) == 5) {
   $12 = HEAP32[(3788)>>2]|0;
   $8 = $12;
  }
  else if ((label|0) == 7) {
   $13 = $5;
   $14 = $6;
   $15 = ($13|0)!=($14|0);
   if (!($15)) {
    $16 = HEAP32[(4052)>>2]|0;
    $8 = $16;
    break;
   }
   $3 = 0;
   $106 = $3;
   STACKTOP = sp;return ($106|0);
  }
 } while(0);
 $9 = 0;
 $17 = $5;
 $18 = ($17|0)==(41);
 if ($18) {
  $19 = $4;
  $20 = $8;
  $21 = (_xvFindPattern($19,$20,1,1)|0);
  $9 = $21;
 }
 $22 = $9;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = $4;
  $25 = $8;
  $26 = $7;
  $27 = (_xvFindPattern($24,$25,$26,0)|0);
  $9 = $27;
 }
 $28 = $9;
 $29 = ($28|0)!=(0|0);
 L20: do {
  if ($29) {
   $30 = $5;
   $31 = ($30|0)==(40);
   $32 = $5;
   $33 = ($32|0)==(41);
   $or$cond = $31 | $33;
   if ($or$cond) {
    $34 = $9;
    ;HEAP32[16956>>2]=HEAP32[$34>>2]|0;HEAP32[16956+4>>2]=HEAP32[$34+4>>2]|0;
    $35 = $9;
    _xvMoveToNextNonWhite($35);
    while(1) {
     $36 = $7;
     $37 = ($36|0)==(1);
     if ($37) {
      $38 = $9;
      $39 = $4;
      $40 = (_lt($38,$39)|0);
      $$sink = $40;
     } else {
      $41 = $4;
      $42 = $9;
      $43 = (_lt($41,$42)|0);
      $$sink = $43;
     }
     $44 = ($$sink|0)!=(0);
     $45 = $44 ^ 1;
     $46 = $45&1;
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break L20;
     }
     $48 = $8;
     $49 = $7;
     $50 = (_xvFindPattern(16956,$48,$49,0)|0);
     $9 = $50;
     $51 = $9;
     $52 = ($51|0)!=(0|0);
     if (!($52)) {
      break L20;
     }
     $53 = $9;
     ;HEAP32[16956>>2]=HEAP32[$53>>2]|0;HEAP32[16956+4>>2]=HEAP32[$53+4>>2]|0;
     $54 = $9;
     _xvMoveToNextNonWhite($54);
    }
   }
  }
 } while(0);
 $55 = $9;
 $56 = ($55|0)!=(0|0);
 L32: do {
  if ($56) {
   $57 = $9;
   ;HEAP32[16956>>2]=HEAP32[$57>>2]|0;HEAP32[16956+4>>2]=HEAP32[$57+4>>2]|0;
  } else {
   $58 = $7;
   switch ($58|0) {
   case 1:  {
    $59 = HEAP32[4326]|0;
    $60 = ((($59)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP32[4239] = $61;
    HEAP32[(16960)>>2] = 0;
    break L32;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    break L32;
   }
   }
   $62 = HEAP32[4326]|0;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[$64>>2]|0;
   HEAP32[4239] = $65;
   HEAP32[(16960)>>2] = 0;
   while(1) {
    $66 = (_inc(16956)|0);
    $67 = ($66|0)!=(2);
    if (!($67)) {
     break;
    }
   }
   $68 = HEAP32[(16960)>>2]|0;
   $69 = ($68|0)>(0);
   if ($69) {
    (_dec(16956)|0);
   }
  }
 } while(0);
 $70 = $5;
 $71 = ($70|0)==(40);
 $72 = $5;
 $73 = ($72|0)==(41);
 $or$cond4 = $71 | $73;
 do {
  if ($or$cond4) {
   $74 = $4;
   $75 = HEAP32[(3788)>>2]|0;
   $76 = $7;
   $77 = (_xvFindPattern($74,$75,$76,0)|0);
   $9 = $77;
   $78 = $9;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = ($80|0)==(1);
    $82 = $9;
    if ($81) {
     $83 = (_lt(16956,$82)|0);
     $84 = ($83|0)!=(0);
     if (!($84)) {
      break;
     }
    } else {
     $85 = (_lt($82,16956)|0);
     $86 = ($85|0)!=(0);
     if (!($86)) {
      break;
     }
    }
    $87 = $9;
    ;HEAP32[16956>>2]=HEAP32[$87>>2]|0;HEAP32[16956+4>>2]=HEAP32[$87+4>>2]|0;
   }
  }
 } while(0);
 $88 = $5;
 $89 = ($88|0)!=(91);
 $90 = $5;
 $91 = ($90|0)!=(93);
 $or$cond6 = $89 & $91;
 do {
  if ($or$cond6) {
   $92 = $4;
   $93 = HEAP32[(4052)>>2]|0;
   $94 = $7;
   $95 = (_xvFindPattern($92,$93,$94,0)|0);
   $9 = $95;
   $96 = $9;
   $97 = ($96|0)!=(0|0);
   if ($97) {
    $98 = $7;
    $99 = ($98|0)==(1);
    $100 = $9;
    if ($99) {
     $101 = (_lt(16956,$100)|0);
     $102 = ($101|0)!=(0);
     if (!($102)) {
      break;
     }
    } else {
     $103 = (_lt($100,16956)|0);
     $104 = ($103|0)!=(0);
     if (!($104)) {
      break;
     }
    }
    $105 = $9;
    ;HEAP32[16956>>2]=HEAP32[$105>>2]|0;HEAP32[16956+4>>2]=HEAP32[$105+4>>2]|0;
   }
  }
 } while(0);
 $3 = 16956;
 $106 = $3;
 STACKTOP = sp;return ($106|0);
}
function _xvMoveToNextNonWhite($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $2 = $11;
  $12 = $2;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(0);
  if ($14) {
   break;
  }
  $15 = $2;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(32);
  if ($17) {
   break;
  }
  $18 = $2;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(9);
  if ($20) {
   break;
  }
  $21 = $1;
  $22 = (_inc($21)|0);
  $23 = ($22|0)!=(-1);
  if (!($23)) {
   break;
  }
 }
 while(1) {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($27) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $2 = $32;
  $33 = $2;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $2;
   $37 = $36 << 24 >> 24;
   $38 = ($37|0)==(32);
   if (!($38)) {
    $39 = $2;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(9);
    if (!($41)) {
     label = 10;
     break;
    }
   }
  }
  $42 = $1;
  $43 = (_inc($42)|0);
  $44 = ($43|0)!=(-1);
  if (!($44)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function _flexinit($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>=($9>>>0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = $2;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = 0;
 }
 $15 = $2;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)>=($20>>>0);
 if ($21) {
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  do {
   if ($25) {
    $26 = (_alloc(64)|0);
    $27 = $2;
    HEAP32[$27>>2] = $26;
    $28 = ($26|0)==(0|0);
    if (!($28)) {
     $29 = $2;
     $$sink = 64;$$sink2 = $29;
     break;
    }
    $1 = 0;
    $47 = $1;
    STACKTOP = sp;return ($47|0);
   } else {
    $30 = $2;
    $31 = ((($30)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 64)|0;
    $3 = $33;
    $34 = $2;
    $35 = HEAP32[$34>>2]|0;
    $36 = $3;
    $37 = (_re_alloc($35,$36)|0);
    $38 = $2;
    HEAP32[$38>>2] = $37;
    $39 = ($37|0)==(0|0);
    if (!($39)) {
     $44 = $3;
     $45 = $2;
     $$sink = $44;$$sink2 = $45;
     break;
    }
    $40 = $2;
    $41 = ((($40)) + 4|0);
    HEAP32[$41>>2] = 0;
    $42 = $2;
    $43 = ((($42)) + 12|0);
    HEAP32[$43>>2] = 0;
    $1 = 0;
    $47 = $1;
    STACKTOP = sp;return ($47|0);
   }
  } while(0);
  $46 = ((($$sink2)) + 4|0);
  HEAP32[$46>>2] = $$sink;
 }
 $1 = 1;
 $47 = $1;
 STACKTOP = sp;return ($47|0);
}
function _flexaddch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (_flexinit($4)|0);
 $5 = $3;
 $6 = $5&255;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = (($8) + ($11)|0);
 HEAP8[$13>>0] = $6;
 STACKTOP = sp;return 1;
}
function _flexrm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11))|0;
 $7 = $12;
 $13 = $4;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15>>>0)>=($18>>>0);
 if (!($19)) {
  $20 = $6;
  $21 = $4;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)>=($26>>>0);
  if ($27) {
   $36 = 0;
  } else {
   $28 = $4;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $4;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($30) - ($33))|0;
   $36 = $34;
  }
  $35 = ($20>>>0)>=($36>>>0);
  if (!($35)) {
   $37 = $7;
   $38 = $6;
   $39 = (($37) + ($38))|0;
   $40 = $4;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($39>>>0)>($42>>>0);
   if (!($43)) {
    $44 = $4;
    $45 = HEAP32[$44>>2]|0;
    $46 = $7;
    $47 = (($45) + ($46)|0);
    $48 = $4;
    $49 = HEAP32[$48>>2]|0;
    $50 = $7;
    $51 = (($49) + ($50)|0);
    $52 = $6;
    $53 = (($51) + ($52)|0);
    $54 = $4;
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $7;
    $58 = $6;
    $59 = (($57) + ($58))|0;
    $60 = (($56) - ($59))|0;
    _memmove(($47|0),($53|0),($60|0))|0;
    $61 = $6;
    $62 = $4;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) - ($61))|0;
    HEAP32[$63>>2] = $65;
    $3 = 1;
    $66 = $3;
    STACKTOP = sp;return ($66|0);
   }
  }
 }
 $3 = 0;
 $66 = $3;
 STACKTOP = sp;return ($66|0);
}
function _flexinsstr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 (_flexinit($11)|0);
 $12 = $4;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15))|0;
 $7 = $16;
 $17 = $6;
 $18 = (_strlen($17)|0);
 $8 = $18;
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) - ($24))|0;
 $9 = $25;
 $26 = $7;
 $27 = $4;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26>>>0)>($29>>>0);
 if ($30) {
  $31 = $4;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
 }
 $34 = $9;
 $35 = $8;
 $36 = ($34>>>0)<($35>>>0);
 do {
  if ($36) {
   $37 = $4;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $9;
   $41 = (($40>>>0) / 64)&-1;
   $42 = (($41) + 1)|0;
   $43 = $42<<6;
   $44 = (($39) + ($43))|0;
   $10 = $44;
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = $10;
   $48 = (_re_alloc($46,$47)|0);
   $49 = $4;
   HEAP32[$49>>2] = $48;
   $50 = ($48|0)==(0|0);
   if (!($50)) {
    $55 = $10;
    $56 = $4;
    $57 = ((($56)) + 4|0);
    HEAP32[$57>>2] = $55;
    break;
   }
   $51 = $4;
   $52 = ((($51)) + 4|0);
   HEAP32[$52>>2] = 0;
   $53 = $4;
   $54 = ((($53)) + 12|0);
   HEAP32[$54>>2] = 0;
   $3 = 0;
   $101 = $3;
   STACKTOP = sp;return ($101|0);
  }
 } while(0);
 $58 = $7;
 $59 = $4;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58>>>0)<($61>>>0);
 if ($62) {
  $63 = $4;
  $64 = HEAP32[$63>>2]|0;
  $65 = $7;
  $66 = (($64) + ($65)|0);
  $67 = $8;
  $68 = (($66) + ($67)|0);
  $69 = $4;
  $70 = HEAP32[$69>>2]|0;
  $71 = $7;
  $72 = (($70) + ($71)|0);
  $73 = $4;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $4;
  $77 = ((($76)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($75>>>0)>=($78>>>0);
  if ($79) {
   $89 = 0;
  } else {
   $80 = $4;
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $4;
   $84 = ((($83)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($82) - ($85))|0;
   $89 = $86;
  }
  $87 = $5;
  $88 = (($89) - ($87))|0;
  _memmove(($68|0),($72|0),($88|0))|0;
 }
 $90 = $4;
 $91 = HEAP32[$90>>2]|0;
 $92 = $7;
 $93 = (($91) + ($92)|0);
 $94 = $6;
 $95 = $8;
 _memcpy(($93|0),($94|0),($95|0))|0;
 $96 = $8;
 $97 = $4;
 $98 = ((($97)) + 12|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + ($96))|0;
 HEAP32[$98>>2] = $100;
 $3 = 1;
 $101 = $3;
 STACKTOP = sp;return ($101|0);
}
function _flexgetstr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_flexaddch($3,0)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $2;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) + ($14)|0);
  $1 = $15;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $1 = 19254;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _flexdetach($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(0);
 do {
  if ($7) {
   $8 = ((($3)) + 4|0);
   HEAP32[$8>>2] = 0;
   $9 = ((($3)) + 12|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($3)) + 8|0);
   HEAP32[$10>>2] = 0;
   $11 = $1;
   $12 = (_flexgetstr($11)|0);
   HEAP32[$vararg_buffer>>2] = $12;
   $13 = (_lformat($3,12801,$vararg_buffer)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = (_flexdetach($3)|0);
    $2 = $15;
   } else {
    $2 = 0;
   }
   $16 = $1;
   _flexdelete($16);
  } else {
   $17 = $1;
   $18 = (_flexaddch($17,0)|0);
   $19 = ($18|0)!=(0);
   $20 = $1;
   if ($19) {
    $21 = HEAP32[$20>>2]|0;
    $2 = $21;
    break;
   } else {
    _flexdelete($20);
    $2 = 0;
    break;
   }
  }
 } while(0);
 $22 = $1;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = 0;
 $24 = $1;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = 0;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _lformat($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_vformat($6,$7,$4)|0);
 $5 = $8;
 $9 = $5;
 STACKTOP = sp;return ($9|0);
}
function _flexdelete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function _vformat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next9 = 0, $expanded = 0, $expanded13 = 0, $expanded15 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 L1: while(1) {
  $18 = $5;
  $19 = ((($18)) + 1|0);
  $5 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20 << 24 >> 24;
  $7 = $21;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 49;
   break;
  }
  $23 = $7;
  $24 = ($23|0)==(37);
  if (!($24)) {
   $149 = $4;
   $150 = $7;
   $151 = (_flexaddch($149,$150)|0);
   $152 = ($151|0)!=(0);
   if ($152) {
    continue;
   } else {
    label = 48;
    break;
   }
  }
  $8 = 0;
  HEAP32[4241] = 0;
  HEAP32[4242] = 0;
  HEAP32[4243] = 0;
  $9 = 0;
  $25 = $5;
  $26 = ((($25)) + 1|0);
  $5 = $26;
  $27 = HEAP8[$25>>0]|0;
  $28 = $27 << 24 >> 24;
  $7 = $28;
  $29 = ($28|0)==(45);
  if ($29) {
   HEAP32[4241] = 1;
   $30 = $5;
   $31 = ((($30)) + 1|0);
   $5 = $31;
   $32 = HEAP8[$30>>0]|0;
   $33 = $32 << 24 >> 24;
   $7 = $33;
  }
  $34 = $7;
  $35 = ($34|0)==(48);
  if ($35) {
   $36 = HEAP32[4241]|0;
   $37 = ($36|0)!=(0);
   if ($37) {
    label = 8;
    break;
   }
   $9 = 1;
   $38 = $5;
   $39 = ((($38)) + 1|0);
   $5 = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40 << 24 >> 24;
   $7 = $41;
  }
  while(1) {
   $42 = $7;
   $43 = ($42|0)!=(0);
   $44 = $7;
   $45 = ($44>>>0)<(128);
   $or$cond = $43 & $45;
   if (!($or$cond)) {
    break;
   }
   $46 = $7;
   $47 = (_isdigit($46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    break;
   }
   $49 = HEAP32[4242]|0;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = HEAP32[4242]|0;
    $52 = ($51*10)|0;
    HEAP32[4242] = $52;
   }
   $53 = $7;
   $54 = (($53) - 48)|0;
   $55 = HEAP32[4242]|0;
   $56 = (($55) + ($54))|0;
   HEAP32[4242] = $56;
   $57 = $5;
   $58 = ((($57)) + 1|0);
   $5 = $58;
   $59 = HEAP8[$57>>0]|0;
   $60 = $59 << 24 >> 24;
   $7 = $60;
  }
  $61 = $7;
  $62 = ($61|0)==(46);
  L21: do {
   if ($62) {
    while(1) {
     $63 = $5;
     $64 = ((($63)) + 1|0);
     $5 = $64;
     $65 = HEAP8[$63>>0]|0;
     $66 = $65 << 24 >> 24;
     $7 = $66;
     $67 = ($66|0)!=(0);
     $68 = $7;
     $69 = ($68>>>0)<(128);
     $or$cond6 = $67 & $69;
     if (!($or$cond6)) {
      break L21;
     }
     $70 = $7;
     $71 = (_isdigit($70)|0);
     $72 = ($71|0)!=(0);
     if (!($72)) {
      break L21;
     }
     $73 = HEAP32[4243]|0;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = HEAP32[4243]|0;
      $76 = ($75*10)|0;
      HEAP32[4243] = $76;
     }
     $77 = $7;
     $78 = (($77) - 48)|0;
     $79 = HEAP32[4243]|0;
     $80 = (($79) + ($78))|0;
     HEAP32[4243] = $80;
    }
   }
  } while(0);
  $81 = $7;
  switch ($81|0) {
  case 37:  {
   $82 = $7;
   $83 = $82&255;
   HEAP8[19073] = $83;
   $84 = $4;
   $85 = (_strformat($84,19073)|0);
   $86 = ($85|0)!=(0);
   if ($86) {
    continue L1;
   } else {
    label = 23;
    break L1;
   }
   break;
  }
  case 99:  {
   $87 = $6;
   $arglist_current = HEAP32[$87>>2]|0;
   $88 = $arglist_current;
   $89 = ((0) + 4|0);
   $expanded13 = $89;
   $expanded = (($expanded13) - 1)|0;
   $90 = (($88) + ($expanded))|0;
   $91 = ((0) + 4|0);
   $expanded17 = $91;
   $expanded16 = (($expanded17) - 1)|0;
   $expanded15 = $expanded16 ^ -1;
   $92 = $90 & $expanded15;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $arglist_next = ((($93)) + 4|0);
   HEAP32[$87>>2] = $arglist_next;
   $10 = $94;
   $95 = $10;
   $96 = $95&255;
   HEAP8[19073] = $96;
   $97 = $4;
   $98 = (_strformat($97,19073)|0);
   $99 = ($98|0)!=(0);
   if ($99) {
    continue L1;
   } else {
    label = 25;
    break L1;
   }
   break;
  }
  case 108:  {
   $100 = $5;
   $101 = ((($100)) + 1|0);
   $5 = $101;
   $102 = HEAP8[$100>>0]|0;
   $103 = $102 << 24 >> 24;
   $7 = $103;
   switch ($103|0) {
   case 117: case 100:  {
    break;
   }
   default: {
    label = 28;
    break L1;
   }
   }
   $8 = 1;
   break;
  }
  case 117: case 100:  {
   break;
  }
  case 115:  {
   $135 = $6;
   $arglist_current11 = HEAP32[$135>>2]|0;
   $136 = $arglist_current11;
   $137 = ((0) + 4|0);
   $expanded27 = $137;
   $expanded26 = (($expanded27) - 1)|0;
   $138 = (($136) + ($expanded26))|0;
   $139 = ((0) + 4|0);
   $expanded31 = $139;
   $expanded30 = (($expanded31) - 1)|0;
   $expanded29 = $expanded30 ^ -1;
   $140 = $138 & $expanded29;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   $arglist_next12 = ((($141)) + 4|0);
   HEAP32[$135>>2] = $arglist_next12;
   $17 = $142;
   $143 = $17;
   $16 = $143;
   $144 = ($143|0)==(0|0);
   if ($144) {
    label = 45;
    break L1;
   }
   $145 = $4;
   $146 = $16;
   $147 = (_strformat($145,$146)|0);
   $148 = ($147|0)!=(0);
   if ($148) {
    continue L1;
   } else {
    label = 45;
    break L1;
   }
   break;
  }
  default: {
   label = 46;
   break L1;
  }
  }
  $104 = $8;
  $105 = ($104|0)!=(0);
  $106 = $7;
  $107 = ($106|0)==(117);
  $108 = $6;
  $arglist_current8 = HEAP32[$108>>2]|0;
  $109 = $arglist_current8;
  $110 = ((0) + 4|0);
  $expanded20 = $110;
  $expanded19 = (($expanded20) - 1)|0;
  $111 = (($109) + ($expanded19))|0;
  $112 = ((0) + 4|0);
  $expanded24 = $112;
  $expanded23 = (($expanded24) - 1)|0;
  $expanded22 = $expanded23 ^ -1;
  $113 = $111 & $expanded22;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $arglist_next9 = ((($114)) + 4|0);
  HEAP32[$108>>2] = $arglist_next9;
  if ($105) {
   if ($107) {
    $12 = $115;
    $116 = $12;
    $118 = $116;
   } else {
    $13 = $115;
    $117 = $13;
    $118 = $117;
   }
   $11 = $118;
  } else {
   if ($107) {
    $14 = $115;
    $119 = $14;
    $121 = $119;
   } else {
    $15 = $115;
    $120 = $15;
    $121 = $120;
   }
   $11 = $121;
  }
  $122 = $9;
  $123 = ($122|0)!=(0);
  if ($123) {
   $124 = HEAP32[4243]|0;
   $125 = HEAP32[4242]|0;
   $126 = ($124>>>0)<($125>>>0);
   if ($126) {
    $127 = HEAP32[4242]|0;
    HEAP32[4243] = $127;
    HEAP32[4242] = 0;
   }
  }
  $128 = $4;
  $129 = $11;
  $130 = $7;
  $131 = ($130|0)==(117);
  $132 = $131&1;
  $133 = (_numformat($128,$129,$132)|0);
  $134 = ($133|0)!=(0);
  if (!($134)) {
   label = 42;
   break;
  }
 }
 if ((label|0) == 8) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 23) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 25) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 28) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 42) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 45) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 46) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 48) {
  $3 = 0;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 49) {
  $3 = 1;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _strformat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = HEAP32[4242]|0;
 $8 = ($7|0)==(0);
 $9 = HEAP32[4241]|0;
 $10 = ($9|0)!=(0);
 $or$cond = $8 | $10;
 L1: do {
  if (!($or$cond)) {
   $11 = $4;
   $12 = (_strlen($11)|0);
   $6 = $12;
   $13 = HEAP32[4243]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = HEAP32[4243]|0;
    $16 = $6;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $18 = HEAP32[4243]|0;
     $6 = $18;
    }
   }
   while(1) {
    $19 = HEAP32[4242]|0;
    $20 = $6;
    $21 = ($19>>>0)>($20>>>0);
    if (!($21)) {
     break L1;
    }
    $22 = $3;
    $23 = (_flexaddch($22,32)|0);
    $24 = ($23|0)!=(0);
    if (!($24)) {
     break;
    }
    $25 = HEAP32[4242]|0;
    $26 = (($25) + -1)|0;
    HEAP32[4242] = $26;
   }
   $2 = 0;
   $52 = $2;
   STACKTOP = sp;return ($52|0);
  }
 } while(0);
 while(1) {
  $27 = $4;
  $28 = ((($27)) + 1|0);
  $4 = $28;
  $29 = HEAP8[$27>>0]|0;
  $30 = $29 << 24 >> 24;
  $5 = $30;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $3;
  $33 = $5;
  $34 = (_flexaddch($32,$33)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   label = 11;
   break;
  }
  $36 = HEAP32[4242]|0;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = HEAP32[4242]|0;
   $39 = (($38) + -1)|0;
   HEAP32[4242] = $39;
  }
  $40 = HEAP32[4243]|0;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   continue;
  }
  $42 = HEAP32[4243]|0;
  $43 = (($42) + -1)|0;
  HEAP32[4243] = $43;
  $44 = ($43|0)==(0);
  if ($44) {
   break;
  }
 }
 if ((label|0) == 11) {
  $2 = 0;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 while(1) {
  $45 = HEAP32[4242]|0;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   label = 20;
   break;
  }
  $47 = $3;
  $48 = (_flexaddch($47,32)|0);
  $49 = ($48|0)!=(0);
  if (!($49)) {
   label = 18;
   break;
  }
  $50 = HEAP32[4242]|0;
  $51 = (($50) + -1)|0;
  HEAP32[4242] = $51;
 }
 if ((label|0) == 18) {
  $2 = 0;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 else if ((label|0) == 20) {
  $2 = 1;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _numformat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ($11|0)==(0);
 if ($12) {
  $7 = 12231;
  $8 = 1;
 } else {
  $7 = (19088);
  HEAP8[(19088)>>0] = 0;
  $13 = $6;
  $14 = ($13|0)==(0);
  $15 = $5;
  $16 = ($15|0)<(0);
  $or$cond = $14 & $16;
  if ($or$cond) {
   $10 = 1;
   $17 = $5;
   $18 = (0 - ($17))|0;
   $9 = $18;
  } else {
   $10 = 0;
   $19 = $5;
   $9 = $19;
  }
  while(1) {
   $20 = $9;
   $21 = ($20>>>0)>(0);
   $22 = $7;
   $23 = ($22>>>0)>((19076)>>>0);
   $24 = $21 ? $23 : 0;
   if (!($24)) {
    break;
   }
   $25 = $9;
   $26 = (($25>>>0) % 10)&-1;
   $27 = (($26) + 48)|0;
   $28 = $27&255;
   $29 = $7;
   $30 = ((($29)) + -1|0);
   $7 = $30;
   HEAP8[$30>>0] = $28;
   $31 = $9;
   $32 = (($31>>>0) / 10)&-1;
   $9 = $32;
  }
  $33 = $10;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $7;
   $36 = ((($35)) + -1|0);
   $7 = $36;
   HEAP8[$36>>0] = 45;
  }
  $37 = $7;
  $38 = $37;
  $39 = (((19088)) - ($38))|0;
  $8 = $39;
 }
 while(1) {
  $40 = HEAP32[4242]|0;
  $41 = $8;
  $42 = ($40>>>0)>($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[4242]|0;
  $44 = HEAP32[4243]|0;
  $45 = ($43>>>0)>($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $4;
  $47 = (_flexaddch($46,32)|0);
  $48 = ($47|0)!=(0);
  if (!($48)) {
   label = 14;
   break;
  }
  $49 = HEAP32[4242]|0;
  $50 = (($49) + -1)|0;
  HEAP32[4242] = $50;
 }
 if ((label|0) == 14) {
  $3 = 0;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 while(1) {
  $51 = HEAP32[4243]|0;
  $52 = $8;
  $53 = ($51>>>0)>($52>>>0);
  if (!($53)) {
   label = 21;
   break;
  }
  $54 = $4;
  $55 = (_flexaddch($54,48)|0);
  $56 = ($55|0)!=(0);
  if (!($56)) {
   label = 18;
   break;
  }
  $57 = HEAP32[4243]|0;
  $58 = (($57) + -1)|0;
  HEAP32[4243] = $58;
  $59 = HEAP32[4242]|0;
  $60 = ($59>>>0)>(0);
  if (!($60)) {
   continue;
  }
  $61 = HEAP32[4242]|0;
  $62 = (($61) + -1)|0;
  HEAP32[4242] = $62;
 }
 if ((label|0) == 18) {
  $3 = 0;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 21) {
  HEAP32[4243] = 0;
  $63 = $4;
  $64 = $7;
  $65 = (_strformat($63,$64)|0);
  $3 = $65;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _flexpopch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  $18 = 0;
  STACKTOP = sp;return ($18|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = (($10) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17;
 STACKTOP = sp;return ($18|0);
}
function _tputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = _emscripten_asm_const_iiii(0, ($8|0), ($9|0), ($10|0))|0;
 while(1) {
  $12 = $6;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $6;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  (FUNCTION_TABLE_ii[$15 & 127]($18)|0);
  $19 = $6;
  $20 = ((($19)) + 1|0);
  $6 = $20;
 }
 STACKTOP = sp;return 1;
}
function _tgetflag($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _tgetent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (_strcpy($4,7707)|0);
 STACKTOP = sp;return 1794;
}
function _tgetnum($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_strcmp($3,13595)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $1 = 24;
  } else {
   $6 = $2;
   $7 = (_strcmp($6,13547)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $1 = 80;
    break;
   }
   $9 = $2;
   $10 = (_strcmp($9,13488)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $1 = -1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _tgetstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = (_strcmp(13708,$5)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (___strdup(9548)|0);
   $4 = $8;
  } else {
   $9 = $2;
   $10 = (_strcmp(13646,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (___strdup(13652)|0);
    $4 = $12;
    break;
   }
   $13 = $2;
   $14 = (_strcmp(13657,$13)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = (___strdup(9559)|0);
    $4 = $16;
    break;
   }
   $17 = $2;
   $18 = (_strcmp(13660,$17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = (___strdup(9564)|0);
    $4 = $20;
    break;
   }
   $21 = $2;
   $22 = (_strcmp(13663,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = (___strdup(9569)|0);
    $4 = $24;
    break;
   }
   $25 = $2;
   $26 = (_strcmp(13666,$25)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = (___strdup(9571)|0);
    $4 = $28;
    break;
   }
   $29 = $2;
   $30 = (_strcmp(13687,$29)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = (___strdup(9576)|0);
    $4 = $32;
    break;
   }
   $33 = $2;
   $34 = (_strcmp(13690,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = (___strdup(9580)|0);
    $4 = $36;
    break;
   }
   $37 = $2;
   $38 = (_strcmp(13693,$37)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = (___strdup(9585)|0);
    $4 = $40;
    break;
   }
   $41 = $2;
   $42 = (_strcmp(13696,$41)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = (___strdup(9590)|0);
    $4 = $44;
    break;
   }
   $45 = $2;
   $46 = (_strcmp(13711,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $48 = (___strdup(9595)|0);
    $4 = $48;
   }
  }
 } while(0);
 $49 = $4;
 $50 = (0|0)!=($49|0);
 $51 = $3;
 $52 = (0|0)!=($51|0);
 $or$cond = $50 & $52;
 if (!($or$cond)) {
  $55 = $2;
  $56 = $4;
  $57 = _emscripten_asm_const_iii(1, ($55|0), ($56|0))|0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $53 = $4;
 $54 = $3;
 HEAP32[$54>>2] = $53;
 $55 = $2;
 $56 = $4;
 $57 = _emscripten_asm_const_iii(1, ($55|0), ($56|0))|0;
 $58 = $4;
 STACKTOP = sp;return ($58|0);
}
function _tgoto($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $5;
 $8 = $4;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_sprintf($6,9679,$vararg_buffer)|0);
 $9 = $3;
 STACKTOP = sp;return ($9|0);
}
function _kbgetc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_ii(2, 0)|0;
 return ($0|0);
}
function _stuff($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 HEAP32[$2>>2] = $varargs;
 $3 = HEAP32[(3028)>>2]|0;
 $4 = $1;
 (_vformat($3,$4,$2)|0);
 STACKTOP = sp;return;
}
function _stuff_to_map($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[(3024)>>2]|0;
 $3 = $1;
 (_flexinsstr($2,0,$3)|0);
 STACKTOP = sp;return;
}
function _unstuff() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3028)>>2]|0;
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[(3028)>>2]|0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[(3024)>>2]|0;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[(3024)>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 return;
}
function _map_char($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[(3040)>>2]|0;
 $3 = $1;
 (_flexaddch($2,$3)|0);
 STACKTOP = sp;return;
}
function _map_getc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 while(1) {
  $1 = HEAP32[(3028)>>2]|0;
  $2 = ((($1)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[(3028)>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)>=($6>>>0);
  if (!($7)) {
   label = 16;
   break;
  }
  $8 = HEAP8[19093]|0;
  $9 = ($8<<24>>24)!=(0);
  if ($9) {
   label = 4;
   break;
  }
  $14 = HEAP32[(3024)>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[(3024)>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)>=($19>>>0);
  if ($20) {
   $37 = HEAP32[(3040)>>2]|0;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[(3040)>>2]|0;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($39>>>0)>=($42>>>0);
   if ($43) {
    label = 16;
    break;
   }
   $44 = HEAP32[4258]|0;
   _mapthrough(3032,$44);
   continue;
  }
  $21 = HEAP32[4193]|0;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 9;
   break;
  }
  $25 = HEAP32[4325]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = HEAP32[4256]|0;
   $36 = $27;
  } else {
   $28 = HEAP32[4325]|0;
   $29 = ($28|0)==(2);
   $30 = HEAP32[4325]|0;
   $31 = ($30|0)==(3);
   $or$cond = $29 | $31;
   $32 = HEAP32[4325]|0;
   $33 = ($32|0)==(4);
   $or$cond3 = $or$cond | $33;
   $34 = HEAP32[4257]|0;
   $35 = $or$cond3 ? $34 : 0;
   $36 = $35;
  }
  _mapthrough(3016,$36);
 }
 if ((label|0) == 4) {
  $10 = HEAP32[4193]|0;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   HEAP32[(16988)>>2] = 0;
   HEAP32[(16984)>>2] = 0;
   HEAP32[4331] = 1;
  }
  $12 = HEAP8[11849]|0;
  $13 = $12 << 24 >> 24;
  $0 = $13;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 9) {
  $23 = HEAP32[(3024)>>2]|0;
  $24 = (_flexpopch($23)|0);
  $0 = $24;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 16) {
  $45 = HEAP32[(3028)>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[(3028)>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47>>>0)>=($50>>>0);
  if ($51) {
   $54 = -1;
  } else {
   $52 = HEAP32[(3028)>>2]|0;
   $53 = (_flexpopch($52)|0);
   $54 = $53;
  }
  $0 = $54;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _mapthrough($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $3;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  $9 = $2;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_flexpopch($13)|0);
 $15 = $2;
 $16 = (_process_map($14,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $2;
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function _process_map($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 while(1) {
  $16 = $5;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 18;
   break;
  }
  $18 = $5;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $6;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = $3;
  $26 = ($24|0)==($25|0);
  $27 = $5;
  if ($26) {
   break;
  }
  $92 = ((($27)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $6;
  $95 = ($93>>>0)<($94>>>0);
  if ($95) {
   label = 18;
   break;
  }
  $96 = $5;
  $97 = HEAP32[$96>>2]|0;
  $5 = $97;
 }
 if ((label|0) == 18) {
  $98 = $4;
  _map_failed($98);
  $99 = $4;
  $100 = ((($99)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)!=(0|0);
  $103 = $6;
  $104 = ($103|0)>(0);
  $or$cond = $102 & $104;
  $105 = $4;
  if ($or$cond) {
   $106 = ((($105)) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $3;
   (_flexaddch($107,$108)|0);
  } else {
   $109 = ((($105)) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $3;
   (_flexaddch($110,$111)|0);
  }
  $2 = 0;
  $112 = $2;
  STACKTOP = sp;return ($112|0);
 }
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $6;
 $31 = (($30) + 1)|0;
 $32 = (($29) + ($31)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $86 = $5;
  $87 = $4;
  HEAP32[$87>>2] = $86;
  $88 = $4;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$89>>2] = $91;
  $2 = 1;
  $112 = $2;
  STACKTOP = sp;return ($112|0);
 }
 $36 = HEAP32[(3948)>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $4;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $9 = 0;
   $42 = $5;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_strlen($44)|0);
   $10 = $45;
   $46 = $5;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $10;
   $53 = (_strncmp($48,$51,$52)|0);
   $54 = ($53|0)==(0);
   if ($54) {
    $55 = $4;
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $5;
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$vararg_buffer>>2] = $60;
    (_lformat($57,12801,$vararg_buffer)|0);
    $61 = $10;
    $9 = $61;
   }
   $62 = ((($7)) + 4|0);
   HEAP32[$62>>2] = 0;
   $63 = ((($7)) + 12|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($7)) + 8|0);
   HEAP32[$64>>2] = 0;
   while(1) {
    $65 = $4;
    $66 = ((($65)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_flexpopch($67)|0);
    $8 = $68;
    $69 = ($68|0)!=(0);
    if (!($69)) {
     break;
    }
    $70 = $8;
    (_flexaddch($7,$70)|0);
   }
   $71 = $4;
   $72 = ((($71)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $5;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $9;
   $78 = (($76) + ($77)|0);
   $79 = (_flexgetstr($7)|0);
   HEAP32[$vararg_buffer2>>2] = $78;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $79;
   (_lformat($73,10866,$vararg_buffer2)|0);
   _flexdelete($7);
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 if ((label|0) == 13) {
  $80 = $4;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $5;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $85;
  (_lformat($82,12801,$vararg_buffer6)|0);
 }
 $2 = 0;
 $112 = $2;
 STACKTOP = sp;return ($112|0);
}
function _map_failed($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  (_flexaddch($18,$21)|0);
 }
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 $26 = $1;
 $27 = ((($26)) + 12|0);
 $28 = ((($26)) + 8|0);
 $$sink = $25 ? $28 : $27;
 $29 = HEAP32[$$sink>>2]|0;
 $3 = $29;
 $4 = 1;
 while(1) {
  $30 = $4;
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $3;
  $36 = $2;
  $37 = $4;
  $38 = (($36) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  (_flexaddch($35,$40)|0);
  $41 = $4;
  $42 = (($41) + 1)|0;
  $4 = $42;
 }
 $43 = $1;
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _map_timeout() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[758]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  _map_failed(3032);
  return;
 } else {
  _map_failed(3016);
  return;
 }
}
function _map_waiting() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[758]|0;
 $1 = ($0|0)!=(0|0);
 $2 = HEAP32[754]|0;
 $3 = ($2|0)!=(0|0);
 $4 = $1 ? 1 : $3;
 $5 = $4&1;
 return ($5|0);
}
function _xvi_keymap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_strsave($6)|0);
 $4 = $7;
 $8 = $3;
 $9 = (_strsave($8)|0);
 $5 = $9;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 $12 = $5;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 $14 = $4;
 if ($or$cond) {
  _free($14);
  $15 = $5;
  _free($15);
  STACKTOP = sp;return;
 } else {
  $16 = $5;
  _insert_map(17032,$14,$16);
  STACKTOP = sp;return;
 }
}
function _insert_map($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = (_alloc(16)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)==(0|0);
 $12 = $4;
 if ($11) {
  _free($12);
  $13 = $5;
  _free($13);
  STACKTOP = sp;return;
 }
 $14 = $6;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $12;
 $16 = $5;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = $16;
 $19 = $3;
 $7 = $19;
 $20 = $7;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = $7;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = (_strcmp($26,$27)|0);
  $29 = ($28|0)>(0);
  if (!($29)) {
   $36 = $7;
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $4;
   $41 = (_strcmp($39,$40)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = $4;
    _free($43);
    $44 = $6;
    _free($44);
    $45 = $7;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    _free($48);
    $49 = $5;
    $50 = $7;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 8|0);
    HEAP32[$52>>2] = $49;
    $53 = $7;
    $54 = HEAP32[$53>>2]|0;
    _calc_same($54);
    STACKTOP = sp;return;
   }
   while(1) {
    $55 = $7;
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0|0);
    if (!($57)) {
     label = 16;
     break;
    }
    $58 = $7;
    $59 = HEAP32[$58>>2]|0;
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     $69 = 1;
    } else {
     $62 = $7;
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $4;
     $68 = (_strcmp($66,$67)|0);
     $69 = $68;
    }
    $8 = $69;
    $70 = $8;
    $71 = ($70|0)>=(0);
    if ($71) {
     break;
    }
    $96 = $7;
    $97 = HEAP32[$96>>2]|0;
    $7 = $97;
   }
   if ((label|0) == 16) {
    STACKTOP = sp;return;
   }
   $72 = $8;
   $73 = ($72|0)>(0);
   if ($73) {
    $74 = $7;
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = $6;
    HEAP32[$77>>2] = $76;
    $78 = $6;
    $79 = $7;
    $80 = HEAP32[$79>>2]|0;
    HEAP32[$80>>2] = $78;
    $81 = $7;
    $82 = HEAP32[$81>>2]|0;
    _calc_same($82);
    $83 = $6;
    _calc_same($83);
    STACKTOP = sp;return;
   } else {
    $84 = $4;
    _free($84);
    $85 = $6;
    _free($85);
    $86 = $7;
    $87 = HEAP32[$86>>2]|0;
    $88 = HEAP32[$87>>2]|0;
    $6 = $88;
    $89 = $6;
    $90 = ((($89)) + 8|0);
    $91 = HEAP32[$90>>2]|0;
    _free($91);
    $92 = $5;
    $93 = $6;
    $94 = ((($93)) + 8|0);
    HEAP32[$94>>2] = $92;
    $95 = $6;
    _calc_same($95);
    STACKTOP = sp;return;
   }
  }
 }
 $30 = $7;
 $31 = HEAP32[$30>>2]|0;
 $32 = $6;
 HEAP32[$32>>2] = $31;
 $33 = $6;
 $34 = $7;
 HEAP32[$34>>2] = $33;
 $35 = $6;
 _calc_same($35);
 STACKTOP = sp;return;
}
function _calc_same($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $3 = $15;
 while(1) {
  $16 = $2;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = $3;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($18|0)==($21|0);
  if (!($22)) {
   break;
  }
  $23 = $1;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = $2;
  $28 = ((($27)) + 1|0);
  $2 = $28;
  $29 = $3;
  $30 = ((($29)) + 1|0);
  $3 = $30;
 }
 STACKTOP = sp;return;
}
function _xvi_map($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmd_map$sink = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 L1: do {
  if ($9) {
   while(1) {
    $10 = $3;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    $5 = $12;
    $13 = ($12|0)!=(0);
    if (!($13)) {
     break L1;
    }
    $14 = $5;
    $15 = ($14|0)==(32);
    $16 = $5;
    $17 = ($16|0)==(9);
    $18 = $15 ? 1 : $17;
    if (!($18)) {
     break L1;
    }
    $19 = $3;
    $20 = ((($19)) + 1|0);
    $3 = $20;
   }
  }
 } while(0);
 $21 = $3;
 $22 = ($21|0)==(0|0);
 do {
  if ($22) {
   label = 7;
  } else {
   $23 = $3;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 7;
   } else {
    $33 = $3;
    HEAP32[$6>>2] = $33;
    $34 = (_mapescape($6,$7)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = HEAP32[4217]|0;
     $37 = ($36|0)!=(0);
     if ($37) {
      _show_message(5948,$vararg_buffer);
     }
     $2 = 0;
     $48 = $2;
     STACKTOP = sp;return ($48|0);
    }
    $38 = HEAP32[$7>>2]|0;
    $39 = ($38|0)==(0|0);
    if (!($39)) {
     $43 = $4;
     $44 = ($43|0)!=(0);
     $45 = $44 ? 17028 : 17024;
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     _insert_map($45,$46,$47);
     break;
    }
    $40 = HEAP32[4217]|0;
    $41 = ($40|0)!=(0);
    if ($41) {
     _show_message(9712,$vararg_buffer1);
    }
    $42 = HEAP32[$6>>2]|0;
    _free($42);
    $2 = 0;
    $48 = $2;
    STACKTOP = sp;return ($48|0);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $27 = $4;
  $28 = ($27|0)!=(0);
  $cmd_map$sink = $28 ? 17028 : 17024;
  $29 = HEAP32[$cmd_map$sink>>2]|0;
  HEAP32[4259] = $29;
  $30 = HEAP32[4327]|0;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  _disp_init(56,$32,0);
 }
 $2 = 1;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _show_map() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[4259]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  HEAP32[(17052)>>2] = 0;
  HEAP32[(17048)>>2] = 0;
  $3 = HEAP32[4259]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[4259]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  (_lformat(17040,9732,$vararg_buffer)|0);
  $9 = HEAP32[4259]|0;
  $10 = HEAP32[$9>>2]|0;
  HEAP32[4259] = $10;
  $11 = (_flexgetstr(17040)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mapescape($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $10 = ((($5)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($5)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($5)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $7 = $14;
 $15 = $3;
 $8 = $15;
 $16 = $4;
 HEAP32[$16>>2] = 0;
 L1: while(1) {
  $17 = $7;
  $18 = ((($17)) + 1|0);
  $7 = $18;
  $19 = HEAP8[$17>>0]|0;
  $20 = $19 << 24 >> 24;
  $6 = $20;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 29;
   break;
  }
  $22 = $6;
  $9 = $22;
  L4: do {
   switch ($22|0) {
   case 92:  {
    $23 = $7;
    $24 = ((($23)) + 1|0);
    $7 = $24;
    $25 = HEAP8[$23>>0]|0;
    $26 = $25 << 24 >> 24;
    $6 = $26;
    do {
     switch ($26|0) {
     case 92:  {
      break L4;
      break;
     }
     case 9: case 32:  {
      $27 = $6;
      $9 = $27;
      break L4;
      break;
     }
     case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $28 = $6;
      $29 = (($28) - 48)|0;
      $9 = $29;
      $30 = $7;
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 << 24 >> 24;
      $6 = $32;
      $33 = $6;
      $34 = ($33|0)>=(48);
      $35 = $6;
      $36 = ($35|0)<=(55);
      $or$cond = $34 & $36;
      if (!($or$cond)) {
       break L4;
      }
      $37 = $9;
      $38 = $37 << 3;
      $9 = $38;
      $39 = $6;
      $40 = (($39) - 48)|0;
      $41 = $9;
      $42 = $41 | $40;
      $9 = $42;
      $43 = $7;
      $44 = ((($43)) + 1|0);
      $7 = $44;
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $6 = $46;
      $47 = $6;
      $48 = ($47|0)>=(48);
      $49 = $6;
      $50 = ($49|0)<=(55);
      $or$cond3 = $48 & $50;
      if (!($or$cond3)) {
       break L4;
      }
      $51 = $9;
      $52 = $51 << 3;
      $9 = $52;
      $53 = $6;
      $54 = (($53) - 48)|0;
      $55 = $9;
      $56 = $55 | $54;
      $9 = $56;
      $57 = $7;
      $58 = ((($57)) + 1|0);
      $7 = $58;
      break L4;
      break;
     }
     case 69: case 101:  {
      $9 = 27;
      break L4;
      break;
     }
     case 98:  {
      $9 = 8;
      break L4;
      break;
     }
     case 102:  {
      $9 = 12;
      break L4;
      break;
     }
     case 110:  {
      $9 = 10;
      break L4;
      break;
     }
     case 114:  {
      $9 = 13;
      break L4;
      break;
     }
     case 116:  {
      $9 = 9;
      break L4;
      break;
     }
     case 118:  {
      $9 = 11;
      break L4;
      break;
     }
     default: {
      $59 = $7;
      $60 = ((($59)) + -1|0);
      $7 = $60;
      break L4;
     }
     }
    } while(0);
    break;
   }
   case 9: case 32:  {
    $61 = $8;
    $62 = $3;
    $63 = ($61|0)==($62|0);
    if ($63) {
     while(1) {
      $64 = $7;
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $6 = $66;
      $67 = ($66|0)!=(0);
      if (!($67)) {
       break;
      }
      $68 = $6;
      $69 = ($68|0)==(32);
      $70 = $6;
      $71 = ($70|0)==(9);
      $72 = $69 ? 1 : $71;
      if (!($72)) {
       break;
      }
      $73 = $7;
      $74 = ((($73)) + 1|0);
      $7 = $74;
     }
     $75 = (_flexdetach($5)|0);
     $76 = $3;
     HEAP32[$76>>2] = $75;
     $77 = ($75|0)==(0|0);
     if ($77) {
      label = 22;
      break L1;
     }
     $78 = $4;
     $8 = $78;
     continue L1;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $79 = $9;
  $80 = $79&255;
  $81 = $80&255;
  $82 = ($81|0)!=(0);
  if (!($82)) {
   continue;
  }
  $83 = $9;
  $84 = (_flexaddch($5,$83)|0);
  $85 = ($84|0)!=(0);
  if (!($85)) {
   label = 26;
   break;
  }
 }
 if ((label|0) == 22) {
  $2 = 0;
  $99 = $2;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 26) {
  $86 = $8;
  $87 = $4;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = $3;
   $90 = HEAP32[$89>>2]|0;
   _free($90);
  }
  _flexdelete($5);
  $2 = 0;
  $99 = $2;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 29) {
  $91 = (_flexdetach($5)|0);
  $92 = $8;
  HEAP32[$92>>2] = $91;
  $93 = ($91|0)==(0|0);
  if (!($93)) {
   $2 = 1;
   $99 = $2;
   STACKTOP = sp;return ($99|0);
  }
  $94 = $8;
  $95 = $4;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = $3;
   $98 = HEAP32[$97>>2]|0;
   _free($98);
  }
  $2 = 0;
  $99 = $2;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _xvi_unmap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ($10|0)<(1);
 if ($11) {
  $12 = HEAP32[4217]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   _show_message(9745,$vararg_buffer);
  }
  $3 = 0;
  $30 = $3;
  STACKTOP = sp;return ($30|0);
 }
 $7 = 0;
 while(1) {
  $14 = $7;
  $15 = $4;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = $7;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$8>>2] = $20;
  $21 = (_mapescape($8,$9)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $6;
   $24 = ($23|0)!=(0);
   $25 = $24 ? 17028 : 17024;
   $26 = HEAP32[$8>>2]|0;
   _delete_map($25,$26);
   $27 = HEAP32[$8>>2]|0;
   _free($27);
  }
  $28 = $7;
  $29 = (($28) + 1)|0;
  $7 = $29;
 }
 $3 = 1;
 $30 = $3;
 STACKTOP = sp;return ($30|0);
}
function _delete_map($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (_strcmp($12,$13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   HEAP32[$18>>2] = $17;
   STACKTOP = sp;return;
  }
 }
 while(1) {
  $19 = $4;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $3;
   $25 = $4;
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_strcmp($24,$28)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = $4;
    $32 = HEAP32[$31>>2]|0;
    $5 = $32;
    $33 = $4;
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = $4;
    HEAP32[$36>>2] = $35;
    $37 = $5;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    _free($39);
    $40 = $5;
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    _free($42);
    $43 = $5;
    _free($43);
    $44 = $4;
    _calc_same($44);
   }
  }
  $45 = $4;
  $46 = HEAP32[$45>>2]|0;
  $4 = $46;
 }
 STACKTOP = sp;return;
}
function _init_marks($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $2 = $4;
 $5 = $2;
 _memset(($5|0),0,312)|0;
 $6 = $1;
 $7 = ((($6)) + 348|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 348|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _setmark($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)==(39);
 $10 = $4;
 $11 = ($10|0)==(96);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = $5;
  $13 = ((($12)) + 348|0);
  $14 = $6;
  ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;
  $3 = 1;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $15 = $4;
 $16 = ($15>>>0)<(128);
 if ($16) {
  $17 = $4;
  $18 = (_islower($17)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $5;
   $21 = ((($20)) + 36|0);
   $22 = $4;
   $23 = (($22) - 97)|0;
   $24 = (($21) + (($23*12)|0)|0);
   $7 = $24;
   $25 = $7;
   $26 = $6;
   ;HEAP32[$25>>2]=HEAP32[$26>>2]|0;HEAP32[$25+4>>2]=HEAP32[$26+4>>2]|0;
   $27 = $7;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = 0;
   $3 = 1;
   $29 = $3;
   STACKTOP = sp;return ($29|0);
  }
 }
 $3 = 0;
 $29 = $3;
 STACKTOP = sp;return ($29|0);
}
function _setpcmark() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4326]|0;
 $1 = ((($0)) + 348|0);
 $2 = HEAP32[4327]|0;
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$1>>2]=HEAP32[$3>>2]|0;HEAP32[$1+4>>2]=HEAP32[$3+4>>2]|0;
 return;
}
function _getmark($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(39);
 $8 = $3;
 $9 = ($8|0)==(96);
 $or$cond = $7 | $9;
 do {
  if ($or$cond) {
   $10 = $4;
   $11 = ((($10)) + 348|0);
   $5 = $11;
   label = 8;
  } else {
   $12 = $3;
   $13 = ($12>>>0)<(128);
   if ($13) {
    $14 = $3;
    $15 = (_islower($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $4;
     $18 = ((($17)) + 36|0);
     $19 = $3;
     $20 = (($19) - 97)|0;
     $21 = (($18) + (($20*12)|0)|0);
     $5 = $21;
     $22 = $5;
     $23 = ((($22)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)!=(0);
     if (!($25)) {
      label = 8;
      break;
     }
     $2 = 0;
     break;
    }
   }
   $2 = 0;
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $2 = 0;
    break;
   } else {
    $29 = $5;
    $2 = $29;
    break;
   }
  }
 } while(0);
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _clrmark($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 36|0);
 $4 = $7;
 $5 = 0;
 while(1) {
  $8 = $5;
  $9 = ($8|0)<(26);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $5;
  $12 = (($10) + (($11*12)|0)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = $4;
   $17 = $5;
   $18 = (($16) + (($17*12)|0)|0);
   $19 = ((($18)) + 8|0);
   HEAP32[$19>>2] = 1;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 $22 = $3;
 $23 = ((($22)) + 348|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $2;
 $26 = ($24|0)==($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = ((($27)) + 348|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function _restoremarks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 36|0);
 $4 = $7;
 $5 = 0;
 while(1) {
  $8 = $5;
  $9 = ($8|0)<(26);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $5;
  $12 = (($10) + (($11*12)|0)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = $4;
   $17 = $5;
   $18 = (($16) + (($17*12)|0)|0);
   $19 = ((($18)) + 8|0);
   HEAP32[$19>>2] = 0;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 STACKTOP = sp;return;
}
function _openfwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $indentchars$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $7 = $13;
 $14 = $7;
 $15 = (_strlen($14)|0);
 $16 = (($15) + 1)|0;
 $17 = (_newline($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $2 = 0;
  $74 = $2;
  STACKTOP = sp;return ($74|0);
 }
 $20 = $6;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 _repllines($22,0,$23);
 $24 = HEAP32[(3132)>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $5;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP8[$28>>0] = 0;
  $29 = HEAP32[4330]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $6;
   $32 = (_get_indent($31)|0);
   HEAP32[4330] = $32;
  }
  $33 = $5;
  $34 = HEAP32[4330]|0;
  $35 = (_set_indent($33,$34)|0);
  HEAP32[4329] = $35;
  $indentchars$sink = 17320;
 } else {
  $indentchars$sink = 17316;
 }
 HEAP32[$indentchars$sink>>2] = 0;
 $36 = $4;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $7;
  $39 = $3;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($38) + ($41)|0);
  $8 = $42;
  $43 = HEAP32[(3132)>>2]|0;
  $44 = ($43|0)!=(0);
  L13: do {
   if ($44) {
    while(1) {
     $45 = $8;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break L13;
     }
     $49 = $8;
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $52 = ($51|0)==(32);
     if (!($52)) {
      $53 = $8;
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($55|0)==(9);
      if (!($56)) {
       break L13;
      }
     }
     $57 = $8;
     $58 = ((($57)) + 1|0);
     $8 = $58;
    }
   }
  } while(0);
  $59 = $5;
  $60 = HEAP32[4329]|0;
  $61 = $8;
  _replchars($59,$60,0,$61);
  $62 = $6;
  $63 = $3;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $7;
  $67 = $3;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($66) + ($69)|0);
  $71 = (_strlen($70)|0);
  _replchars($62,$65,$71,19254);
 }
 $72 = $5;
 $73 = HEAP32[4329]|0;
 _move_cursor($72,$73);
 _move_window_to_cursor();
 _cursupdate();
 _xvUpdateAllBufferWindows();
 $2 = 1;
 $74 = $2;
 STACKTOP = sp;return ($74|0);
}
function _get_indent($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $6 = HEAP32[(4332)>>2]|0;
 $5 = $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $4 = 0;
   while(1) {
    $13 = $3;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)!=(0);
    if (!($16)) {
     break;
    }
    $17 = $3;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($19|0)==(32);
    if (!($20)) {
     $21 = $3;
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)==(9);
     if (!($24)) {
      break;
     }
    }
    $25 = $3;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($27|0)==(32);
    if ($28) {
     $36 = 1;
    } else {
     $29 = $5;
     $30 = $4;
     $31 = $5;
     $32 = (($30|0) % ($31|0))&-1;
     $33 = (($29) - ($32))|0;
     $36 = $33;
    }
    $34 = $4;
    $35 = (($34) + ($36))|0;
    $4 = $35;
    $37 = $3;
    $38 = ((($37)) + 1|0);
    $3 = $38;
   }
   $39 = $4;
   $1 = $39;
   $40 = $1;
   STACKTOP = sp;return ($40|0);
  }
 }
 _show_error(9805,$vararg_buffer);
 $1 = 0;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _set_indent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $3;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = HEAP32[(4284)>>2]|0;
   $16 = ($15|0)!=(0);
   $17 = HEAP32[(4332)>>2]|0;
   $18 = $16 ? $17 : 2147483647;
   $8 = $18;
   $6 = 0;
   while(1) {
    $19 = $4;
    $20 = $8;
    $21 = ($19|0)>=($20|0);
    if (!($21)) {
     break;
    }
    $22 = $8;
    $23 = $4;
    $24 = (($23) - ($22))|0;
    $4 = $24;
    $25 = $6;
    $26 = (($25) + 1)|0;
    $6 = $26;
   }
   $27 = $3;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $5 = $29;
   while(1) {
    $30 = $5;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(32);
    if (!($33)) {
     $34 = $5;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = ($36|0)==(9);
     if (!($37)) {
      break;
     }
    }
    $38 = $5;
    $39 = ((($38)) + 1|0);
    $5 = $39;
   }
   $40 = $5;
   $41 = $3;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $40;
   $45 = $43;
   $46 = (($44) - ($45))|0;
   $7 = $46;
   HEAP32[(17068)>>2] = 0;
   HEAP32[(17064)>>2] = 0;
   while(1) {
    $47 = $6;
    $48 = (($47) + -1)|0;
    $6 = $48;
    $49 = ($47|0)>(0);
    if (!($49)) {
     break;
    }
    (_flexaddch(17056,9)|0);
   }
   while(1) {
    $50 = $4;
    $51 = (($50) + -1)|0;
    $4 = $51;
    $52 = ($50|0)>(0);
    if (!($52)) {
     break;
    }
    (_flexaddch(17056,32)|0);
   }
   $53 = $3;
   $54 = $7;
   $55 = (_flexgetstr(17056)|0);
   _replchars($53,0,$54,$55);
   $56 = HEAP32[(17064)>>2]|0;
   $57 = HEAP32[(17068)>>2]|0;
   $58 = ($56>>>0)>=($57>>>0);
   if ($58) {
    $62 = 0;
   } else {
    $59 = HEAP32[(17068)>>2]|0;
    $60 = HEAP32[(17064)>>2]|0;
    $61 = (($59) - ($60))|0;
    $62 = $61;
   }
   $2 = $62;
   $63 = $2;
   STACKTOP = sp;return ($63|0);
  }
 }
 _show_error(9775,$vararg_buffer);
 $2 = 0;
 $63 = $2;
 STACKTOP = sp;return ($63|0);
}
function _openbwd() {
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $3;
 $11 = (_strlen($10)|0);
 $12 = (($11) + 1)|0;
 $13 = (_newline($12)|0);
 $1 = $13;
 $14 = $1;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $16 = $2;
 $17 = $1;
 _repllines($16,0,$17);
 $18 = HEAP32[(3132)>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP8[$22>>0] = 0;
  $23 = $1;
  $24 = $2;
  $25 = (_get_indent($24)|0);
  $26 = (_set_indent($23,$25)|0);
  $$sink = $26;
 } else {
  $$sink = 0;
 }
 HEAP32[4329] = $$sink;
 $27 = $1;
 $28 = HEAP32[4329]|0;
 _move_cursor($27,$28);
 _move_window_to_cursor();
 _cursupdate();
 _xvUpdateAllBufferWindows();
 $0 = 1;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _cntllines($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $7 = $2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9>>>0)>($12>>>0);
 if ($13) {
  $14 = $2;
  $4 = $14;
  $15 = $3;
  $2 = $15;
  $16 = $4;
  $3 = $16;
  $6 = 1;
 }
 $5 = 1;
 $17 = $2;
 $4 = $17;
 while(1) {
  $18 = $4;
  $19 = $3;
  $20 = ($18|0)!=($19|0);
  if (!($20)) {
   break;
  }
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $4 = $25;
 }
 $26 = $6;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $30 = $5;
  STACKTOP = sp;return ($30|0);
 }
 $28 = $5;
 $29 = (0 - ($28))|0;
 $5 = $29;
 $30 = $5;
 STACKTOP = sp;return ($30|0);
}
function _plines($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(0);
 if ($13) {
  $1 = 1;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 $14 = HEAP32[(3564)>>2]|0;
 $15 = ($14|0)!=(0);
 $16 = $15 ? 1 : 0;
 $3 = $16;
 $17 = HEAP32[(3708)>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  $20 = (($19) + 8)|0;
  $3 = $20;
 }
 while(1) {
  $21 = $4;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   break;
  }
  $25 = $4;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = $3;
  $29 = (_vischar($27,0,$28)|0);
  $30 = $3;
  $31 = (($30) + ($29))|0;
  $3 = $31;
  $32 = $4;
  $33 = ((($32)) + 1|0);
  $4 = $33;
 }
 $34 = HEAP32[4327]|0;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 $5 = 1;
 while(1) {
  $37 = $3;
  $38 = $6;
  $39 = ($37|0)>($38|0);
  $40 = $5;
  if (!($39)) {
   break;
  }
  $41 = (($40) + 1)|0;
  $5 = $41;
  $42 = $6;
  $43 = $3;
  $44 = (($43) - ($42))|0;
  $3 = $44;
 }
 $1 = $40;
 $45 = $1;
 STACKTOP = sp;return ($45|0);
}
function _cntplines($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9>>>0)>($12>>>0);
 if ($13) {
  $14 = $2;
  $4 = $14;
  $15 = $3;
  $2 = $15;
  $16 = $4;
  $3 = $16;
 }
 $17 = HEAP32[4327]|0;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<1;
 $6 = $20;
 $5 = 0;
 $21 = $2;
 $4 = $21;
 while(1) {
  $22 = $4;
  $23 = $3;
  $24 = ($22|0)!=($23|0);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = $4;
  $26 = (_plines($25)|0);
  $27 = $5;
  $28 = (($27) + ($26))|0;
  $5 = $28;
  $29 = $5;
  $30 = $6;
  $31 = ($29>>>0)>=($30>>>0);
  if ($31) {
   label = 7;
   break;
  }
  $32 = $4;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $4 = $34;
 }
 if ((label|0) == 7) {
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _gotoline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $11 = $4;
 $12 = ($11|0)==(-1);
 $13 = $3;
 if ($12) {
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $17 = ((($13)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 while(1) {
  $19 = $4;
  $20 = (($19) + -1)|0;
  $4 = $20;
  $21 = ($20>>>0)>(0);
  if (!($21)) {
   break;
  }
  $22 = $5;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)!=($27|0);
  if (!($28)) {
   break;
  }
  $29 = $5;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $5 = $31;
 }
 $32 = $5;
 $2 = $32;
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function _tabinout($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $10 = (_start_command()|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $5;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = $4;
 $6 = $15;
 while(1) {
  $16 = $6;
  $17 = $5;
  $18 = ($16|0)!=($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  while(1) {
   $22 = $8;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $8;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(9);
   if (!($29)) {
    $30 = $8;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(32);
    if (!($33)) {
     break;
    }
   }
   $34 = $8;
   $35 = ((($34)) + 1|0);
   $8 = $35;
  }
  $36 = $8;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)==(0);
  do {
   if ($39) {
    $40 = $8;
    $41 = $6;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40>>>0)>($43>>>0);
    if ($44) {
     $45 = $6;
     $46 = $8;
     $47 = $6;
     $48 = ((($47)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $46;
     $51 = $49;
     $52 = (($50) - ($51))|0;
     _replchars($45,0,$52,19254);
    }
   } else {
    $53 = $3;
    $54 = ($53|0)==(60);
    $55 = $6;
    if (!($54)) {
     $65 = $6;
     $66 = (_get_indent($65)|0);
     $67 = HEAP32[(4116)>>2]|0;
     $68 = (($66) + ($67))|0;
     (_set_indent($55,$68)|0);
     break;
    }
    $56 = (_get_indent($55)|0);
    $9 = $56;
    $57 = $6;
    $58 = $9;
    $59 = HEAP32[(4116)>>2]|0;
    $60 = ($58|0)<=($59|0);
    if ($60) {
     $64 = 0;
    } else {
     $61 = $9;
     $62 = HEAP32[(4116)>>2]|0;
     $63 = (($61) - ($62))|0;
     $64 = $63;
    }
    (_set_indent($57,$64)|0);
   }
  } while(0);
  $69 = $7;
  $70 = (($69) + 1)|0;
  $7 = $70;
  $71 = $6;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $6 = $73;
 }
 _end_command();
 $74 = $7;
 $75 = HEAP32[(3972)>>2]|0;
 $76 = ($74|0)>($75|0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $7;
 $78 = $3;
 HEAP32[$vararg_buffer>>2] = $77;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $78;
 _show_message(9838,$vararg_buffer);
 STACKTOP = sp;return;
}
function _makeargv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $5;
 HEAP32[$12>>2] = 0;
 $13 = $6;
 HEAP32[$13>>2] = 0;
 $14 = $4;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = $4;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $7;
   $21 = $4;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (_strchr($20,$23)|0);
   $25 = ($24|0)!=(0|0);
   $118 = $25;
  } else {
   $118 = 0;
  }
  $26 = $4;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  if (!($118)) {
   break;
  }
  $29 = ($28|0)==(92);
  if ($29) {
   $30 = $7;
   $31 = $4;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = (_strchr($30,$34)|0);
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $4;
    $38 = ((($37)) + 1|0);
    $4 = $38;
   }
  }
  $39 = $4;
  $40 = ((($39)) + 1|0);
  $4 = $40;
 }
 $41 = ($28|0)==(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = (_alloc(32)|0);
 $9 = $42;
 $43 = $9;
 $44 = ($43|0)==(0|0);
 if ($44) {
  STACKTOP = sp;return;
 }
 $10 = 8;
 $8 = 0;
 while(1) {
  $45 = $8;
  $46 = $10;
  $47 = (($46) - 1)|0;
  $48 = ($45|0)>=($47|0);
  if ($48) {
   $49 = $10;
   $50 = (($49) + 8)|0;
   $10 = $50;
   $51 = $9;
   $52 = $10;
   $53 = $52<<2;
   $54 = (_re_alloc($51,$53)|0);
   $9 = $54;
   $55 = $9;
   $56 = ($55|0)==(0|0);
   if ($56) {
    label = 28;
    break;
   }
  }
  $57 = $4;
  $58 = $9;
  $59 = $8;
  $60 = (($59) + 1)|0;
  $8 = $60;
  $61 = (($58) + ($59<<2)|0);
  HEAP32[$61>>2] = $57;
  while(1) {
   $62 = $4;
   $63 = HEAP8[$62>>0]|0;
   $64 = $63 << 24 >> 24;
   $65 = ($64|0)!=(0);
   if (!($65)) {
    break;
   }
   $66 = $7;
   $67 = $4;
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = (_strchr($66,$69)|0);
   $71 = ($70|0)==(0|0);
   if (!($71)) {
    break;
   }
   $72 = $4;
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(92);
   L29: do {
    if ($75) {
     $76 = $7;
     $77 = $4;
     $78 = ((($77)) + 1|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = (_strchr($76,$80)|0);
     $82 = ($81|0)!=(0|0);
     if ($82) {
      $83 = $4;
      $84 = ((($83)) + 1|0);
      $11 = $84;
      while(1) {
       $85 = $11;
       $86 = HEAP8[$85>>0]|0;
       $87 = $11;
       $88 = ((($87)) + -1|0);
       HEAP8[$88>>0] = $86;
       $89 = $86 << 24 >> 24;
       $90 = ($89|0)!=(0);
       if (!($90)) {
        break L29;
       }
       $91 = $11;
       $92 = ((($91)) + 1|0);
       $11 = $92;
      }
     }
    }
   } while(0);
   $93 = $4;
   $94 = ((($93)) + 1|0);
   $4 = $94;
  }
  while(1) {
   $95 = $4;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96 << 24 >> 24;
   $98 = ($97|0)!=(0);
   if (!($98)) {
    break;
   }
   $99 = $7;
   $100 = $4;
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 << 24 >> 24;
   $103 = (_strchr($99,$102)|0);
   $104 = ($103|0)!=(0|0);
   if (!($104)) {
    break;
   }
   $105 = $4;
   $106 = ((($105)) + 1|0);
   $4 = $106;
   HEAP8[$105>>0] = 0;
  }
  $107 = $4;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108 << 24 >> 24;
  $110 = ($109|0)!=(0);
  if (!($110)) {
   break;
  }
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 $111 = $9;
 $112 = $8;
 $113 = (($111) + ($112<<2)|0);
 HEAP32[$113>>2] = 0;
 $114 = $9;
 $115 = $6;
 HEAP32[$115>>2] = $114;
 $116 = $8;
 $117 = $5;
 HEAP32[$117>>2] = $116;
 STACKTOP = sp;return;
}
function _xvJoinLine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - -1)|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $2 = 0;
  $81 = $2;
  STACKTOP = sp;return ($81|0);
 }
 $14 = (_start_command()|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $2 = 0;
  $81 = $2;
  STACKTOP = sp;return ($81|0);
 }
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_strlen($18)|0);
 $6 = $19;
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $4;
 $26 = ($25|0)!=(0);
 L9: do {
  if (!($26)) {
   while(1) {
    $27 = $5;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)==(32);
    if (!($30)) {
     $31 = $5;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)==(9);
     if (!($34)) {
      break L9;
     }
    }
    $35 = $5;
    $36 = ((($35)) + 1|0);
    $5 = $36;
   }
  }
 } while(0);
 $37 = $3;
 $38 = $6;
 $39 = $5;
 _replchars($37,$38,0,$39);
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 _repllines($42,1,0);
 $43 = $4;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $45 = $3;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $6;
  $49 = (($48) - 1)|0;
  $50 = (($47) + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)==(32);
  if (!($53)) {
   $54 = $3;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $6;
   $58 = (($57) - 1)|0;
   $59 = (($56) + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ($61|0)==(9);
   if (!($62)) {
    $63 = $3;
    $64 = ((($63)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $6;
    $67 = (($65) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $70 = ($69|0)!=(41);
    if ($70) {
     $71 = $3;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $6;
     $75 = (($73) + ($74)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)!=(0);
     if ($78) {
      $79 = $3;
      $80 = $6;
      _replchars($79,$80,0,9853);
     }
    }
   }
  }
 }
 _end_command();
 $2 = 1;
 $81 = $2;
 STACKTOP = sp;return ($81|0);
}
function _xvChangesNotSaved() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4327]|0;
 $1 = $2;
 while(1) {
  $3 = HEAP32[4326]|0;
  $4 = ((($3)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1;
  $7 = ($6|0)!=(0);
  if ($7) {
   break;
  }
  $15 = HEAP32[4327]|0;
  $16 = (_xvNextWindow($15)|0);
  HEAP32[4327] = $16;
  $17 = HEAP32[4327]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = HEAP32[4327]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21;
  } else {
   $22 = 0;
  }
  HEAP32[4326] = $22;
  $23 = HEAP32[4327]|0;
  $24 = $1;
  $25 = ($23|0)!=($24|0);
  if (!($25)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $8 = $1;
 HEAP32[4327] = $8;
 $9 = HEAP32[4327]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[4327]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 } else {
  $14 = 0;
 }
 HEAP32[4326] = $14;
 $0 = 1;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _xvAutoWriteAll() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[(3204)>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[4327]|0;
 $0 = $3;
 while(1) {
  $4 = HEAP32[4326]|0;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 1;
  $8 = ($7|0)!=(0);
  if ($8) {
   (_exWriteToFile(0,0,0,0)|0);
  }
  $9 = HEAP32[4327]|0;
  $10 = (_xvNextWindow($9)|0);
  HEAP32[4327] = $10;
  $11 = HEAP32[4327]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = HEAP32[4327]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15;
  } else {
   $16 = 0;
  }
  HEAP32[4326] = $16;
  $17 = HEAP32[4327]|0;
  $18 = $0;
  $19 = ($17|0)!=($18|0);
  if (!($19)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _xvAutoWrite() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4326]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 $5 = HEAP32[(3204)>>2]|0;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  return;
 }
 (_exWriteToFile(0,0,0,0)|0);
 return;
}
function _mousedrag($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = HEAP32[4325]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = $5;
 $15 = ($13|0)!=($14|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = HEAP32[4327]|0;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1)|0;
 $23 = ($16>>>0)<($22>>>0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $4;
 $25 = (_findwin($24)|0);
 $8 = $25;
 $26 = ($25|0)==(0|0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $8;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $4;
 $31 = ($29|0)==($30|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[4327]|0;
 $10 = $32;
 $33 = HEAP32[4328]|0;
 $9 = $33;
 $34 = HEAP32[4328]|0;
 $35 = $34 & -2;
 HEAP32[4328] = $35;
 $36 = $8;
 HEAP32[4327] = $36;
 $37 = HEAP32[4327]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = HEAP32[4327]|0;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41;
 } else {
  $42 = 0;
 }
 HEAP32[4326] = $42;
 $43 = $5;
 $44 = $4;
 $45 = (($43) - ($44))|0;
 (_xvMoveStatusLine($45)|0);
 $46 = $10;
 HEAP32[4327] = $46;
 $47 = HEAP32[4327]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = HEAP32[4327]|0;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51;
 } else {
  $52 = 0;
 }
 HEAP32[4326] = $52;
 $53 = $9;
 HEAP32[4328] = $53;
 _move_cursor_to_window();
 _redraw_all(0);
 _cursupdate();
 _wind_goto();
 STACKTOP = sp;return;
}
function _findwin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4327]|0;
 $3 = $4;
 while(1) {
  $5 = $3;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = ($7>>>0)<=($8>>>0);
  if ($9) {
   $10 = $2;
   $11 = $3;
   $12 = ((($11)) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10>>>0)<=($13>>>0);
   if ($14) {
    label = 4;
    break;
   }
  }
  $16 = $3;
  $17 = (_xvNextDisplayedWindow($16)|0);
  $3 = $17;
  $18 = HEAP32[4327]|0;
  $19 = ($17|0)==($18|0);
  if ($19) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $15 = $3;
  $1 = $15;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _mouseclick($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = HEAP32[4325]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = (_findwin($7)|0);
 $4 = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = HEAP32[4327]|0;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  $13 = $4;
  HEAP32[4327] = $13;
  $14 = HEAP32[4327]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = HEAP32[4327]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18;
  } else {
   $19 = 0;
  }
  HEAP32[4326] = $19;
 }
 $20 = $2;
 $21 = $4;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 do {
  if ($24) {
   _show_file_info(1);
  } else {
   $25 = $2;
   $26 = $3;
   _setcursor($25,$26);
   $27 = $4;
   $28 = ((($27)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)>(2);
   if ($30) {
    $31 = $2;
    $32 = $4;
    $33 = ((($32)) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($31|0)==($34|0);
    if ($35) {
     _scrolldown(1);
     _redraw_window(0);
     break;
    }
    $36 = $2;
    $37 = HEAP32[4327]|0;
    $38 = ((($37)) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) - 1)|0;
    $41 = ($36|0)==($40|0);
    if ($41) {
     _scrollup(1);
     _redraw_window(0);
    }
   }
  }
 } while(0);
 _cursupdate();
 _wind_goto();
 STACKTOP = sp;return;
}
function _setcursor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_findline($7,$4)|0);
 $6 = $8;
 $9 = $3;
 $10 = $2;
 $11 = HEAP32[$4>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = HEAP32[4327]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $17 = (($9) + ($16))|0;
 $5 = $17;
 $18 = $6;
 _move_cursor($18,0);
 $19 = HEAP32[4327]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = HEAP32[4327]|0;
 $23 = ((($22)) + 64|0);
 HEAP32[$23>>2] = $21;
 _xvMoveToColumn($20,$21);
 STACKTOP = sp;return;
}
function _findline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = HEAP32[4327]|0;
 $4 = $9;
 $10 = $4;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $4;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $4;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $6 = $18;
 while(1) {
  $19 = $5;
  $20 = $7;
  $21 = (_plines($20)|0);
  $22 = (($19) + ($21))|0;
  $8 = $22;
  $23 = $2;
  $24 = $5;
  $25 = ($23|0)>=($24|0);
  if ($25) {
   $26 = $2;
   $27 = $8;
   $28 = ($26|0)<($27|0);
   if ($28) {
    break;
   }
  }
  $29 = $7;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $4;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($31|0)==($36|0);
  if ($37) {
   break;
  }
  $38 = $8;
  $39 = $6;
  $40 = ($38|0)>=($39|0);
  if ($40) {
   break;
  }
  $44 = $8;
  $5 = $44;
  $45 = $7;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $7 = $47;
 }
 $41 = $5;
 $42 = $3;
 HEAP32[$42>>2] = $41;
 $43 = $7;
 STACKTOP = sp;return ($43|0);
}
function _mousemove($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[4325]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = (_findwin($5)|0);
 $2 = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = HEAP32[4327]|0;
 $10 = ($8|0)==($9|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 _show_file_info(1);
 $11 = $2;
 HEAP32[4327] = $11;
 $12 = HEAP32[4327]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[4327]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 HEAP32[4326] = $17;
 _cursupdate();
 _wind_goto();
 STACKTOP = sp;return;
}
function _shiftdown($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $6 = $2;
  $7 = $1;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = HEAP32[4327]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $4 = $12;
  $13 = $4;
  $14 = HEAP32[4326]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  if ($16) {
   label = 5;
   break;
  }
  $17 = $4;
  $18 = (_plines($17)|0);
  $5 = $18;
  $19 = $5;
  $20 = $3;
  $21 = (($20) + ($19))|0;
  $3 = $21;
  $22 = $4;
  $23 = HEAP32[4327]|0;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = $22;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
 }
 if ((label|0) == 5) {
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _shiftup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $6 = $2;
  $7 = $1;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = HEAP32[4327]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $4 = $13;
  $14 = $4;
  $15 = HEAP32[4326]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   label = 5;
   break;
  }
  $19 = HEAP32[4327]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_plines($21)|0);
  $5 = $22;
  $23 = $5;
  $24 = $3;
  $25 = (($24) + ($23))|0;
  $3 = $25;
  $26 = $4;
  $27 = HEAP32[4327]|0;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $2;
  $30 = (($29) + 1)|0;
  $2 = $30;
 }
 if ((label|0) == 5) {
  $31 = $3;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _scrolldown($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_shiftdown($2)|0);
 _s_ins(0,$3);
 STACKTOP = sp;return;
}
function _scrollup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_shiftup($2)|0);
 _s_del(0,$3);
 STACKTOP = sp;return;
}
function _xvMoveUp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 while(1) {
  $11 = $8;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  $19 = $18 ^ 1;
  if (!($19)) {
   break;
  }
  $20 = $7;
  $21 = HEAP32[$20>>2]|0;
  $7 = $21;
  $22 = $8;
  $23 = (($22) + 1)|0;
  $8 = $23;
 }
 $24 = $6;
 $25 = ($24|0)!=(0);
 $26 = $8;
 if ($25) {
  $27 = ($26|0)>(0);
  if ($27) {
   label = 8;
  } else {
   label = 9;
  }
 } else {
  $28 = $5;
  $29 = ($26|0)==($28|0);
  if ($29) {
   label = 8;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 8) {
  $30 = $7;
  $31 = $4;
  HEAP32[$31>>2] = $30;
  $32 = $4;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = 0;
  $3 = 1;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _xvMoveDown($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 while(1) {
  $11 = $8;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) - -1)|0;
  $20 = ($19|0)==(0);
  $21 = $20 ^ 1;
  if (!($21)) {
   break;
  }
  $22 = $7;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $7 = $24;
  $25 = $8;
  $26 = (($25) + 1)|0;
  $8 = $26;
 }
 $27 = $6;
 $28 = ($27|0)!=(0);
 $29 = $8;
 if ($28) {
  $30 = ($29|0)>(0);
  if ($30) {
   label = 8;
  } else {
   label = 9;
  }
 } else {
  $31 = $5;
  $32 = ($29|0)==($31|0);
  if ($32) {
   label = 8;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 8) {
  $33 = $7;
  $34 = $4;
  HEAP32[$34>>2] = $33;
  $35 = $4;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 0;
  $3 = 1;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _one_left($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4327]|0;
 $3 = ((($2)) + 68|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (_xvMoveLeft($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _xvMoveLeft($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = $3;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[$10>>2] = $12;
  $2 = 1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _one_right($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4327]|0;
 $3 = ((($2)) + 68|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (_xvMoveRight($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _xvMoveRight($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + ($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $18 = $4;
   $19 = ($18|0)!=(0);
   if (!($19)) {
    $20 = $5;
    $21 = ((($20)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = ($23|0)!=(0);
    if (!($24)) {
     break;
    }
   }
   $25 = $3;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$26>>2] = $28;
   $2 = 1;
   $29 = $2;
   STACKTOP = sp;return ($29|0);
  }
 } while(0);
 $2 = 0;
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function _begin_line($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4327]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 _xvSetPosnToStartOfLine($3,$4);
 $5 = HEAP32[4327]|0;
 $6 = ((($5)) + 68|0);
 HEAP32[$6>>2] = 1;
 STACKTOP = sp;return;
}
function _xvSetPosnToStartOfLine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0);
 $9 = $2;
 if (!($8)) {
  $$sink = 0;$$sink2 = $9;
  $34 = ((($$sink2)) + 4|0);
  HEAP32[$34>>2] = $$sink;
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $5 = $12;
 while(1) {
  $13 = $6;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $4 = $15;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $6;
   $18 = ((($17)) + 1|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $4;
    $23 = ($22|0)==(32);
    $24 = $4;
    $25 = ($24|0)==(9);
    $26 = $23 ? 1 : $25;
    $35 = $26;
   } else {
    $35 = 0;
   }
  } else {
   $35 = 0;
  }
  $27 = $6;
  if (!($35)) {
   break;
  }
  $28 = ((($27)) + 1|0);
  $6 = $28;
 }
 $29 = $5;
 $30 = $27;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = $2;
 $$sink = $32;$$sink2 = $33;
 $34 = ((($$sink2)) + 4|0);
 HEAP32[$34>>2] = $$sink;
 STACKTOP = sp;return;
}
function _xvMoveToColumn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $6 = $10;
 $4 = 0;
 while(1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(0);
  if ($17) {
   break;
  }
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = HEAP32[(3564)>>2]|0;
  $22 = ($21|0)!=(0);
  $23 = $4;
  $24 = $22 ? -1 : $23;
  $25 = (_vischar($20,0,$24)|0);
  $26 = $4;
  $27 = (($26) + ($25))|0;
  $4 = $27;
  $28 = $6;
  $29 = ((($28)) + 1|0);
  $6 = $29;
 }
 $30 = $6;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(0);
 if ($33) {
  label = 7;
 } else {
  $34 = $4;
  $35 = $3;
  $36 = ($34|0)>($35|0);
  if ($36) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $37 = $6;
  $38 = $5;
  $39 = ($37>>>0)>($38>>>0);
  if ($39) {
   $40 = $6;
   $41 = ((($40)) + -1|0);
   $6 = $41;
  }
 }
 $42 = $6;
 $43 = $5;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $2;
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = $46;
 STACKTOP = sp;return;
}
function _xvMoveToLineNumber($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4326]|0;
 $3 = $1;
 $4 = (_gotoline($2,$3)|0);
 _move_cursor($4,0);
 _begin_line(1);
 STACKTOP = sp;return;
}
function _move_cursor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[4326]|0;
 $4 = $6;
 $7 = $2;
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=($10|0);
 if ($11) {
  $12 = $4;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  _free($14);
  $15 = $2;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_strsave($17)|0);
  $19 = $4;
  $20 = ((($19)) + 16|0);
  HEAP32[$20>>2] = $18;
  $21 = $2;
  $22 = $4;
  $23 = ((($22)) + 12|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = HEAP32[4327]|0;
 $25 = HEAP32[$24>>2]|0;
 $5 = $25;
 $26 = $2;
 $27 = $5;
 HEAP32[$27>>2] = $26;
 $28 = $3;
 $29 = $5;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $28;
 _info_update();
 STACKTOP = sp;return;
}
function _move_window_to_cursor() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = HEAP32[4327]|0;
 $7 = $13;
 $14 = $7;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $0 = $16;
 $17 = $7;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = (($20>>>0) / 2)&-1;
 $1 = $21;
 $22 = $7;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $3 = $24;
 $25 = $7;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $4 = $27;
 $28 = $7;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - 1)|0;
 $5 = $31;
 $32 = $7;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $6 = $34;
 $35 = (_bufempty()|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $7;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $7;
  $43 = ((($42)) + 8|0);
  HEAP32[$43>>2] = $41;
  $44 = $7;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $7;
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$50>>2] = $48;
  $51 = $7;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = 0;
  STACKTOP = sp;return;
 }
 $54 = $0;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $6;
 $58 = ((($57)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($56>>>0)<($59>>>0);
 $61 = $0;
 if ($60) {
  $62 = $6;
  $63 = (_cntplines($61,$62)|0);
  $8 = $63;
  $64 = $8;
  $65 = $1;
  $66 = ($64|0)>($65|0);
  $67 = HEAP32[(3516)>>2]|0;
  $68 = ($67|0)==(2);
  $or$cond = $66 | $68;
  L7: do {
   if (!($or$cond)) {
    $69 = HEAP32[(3516)>>2]|0;
    $70 = ($69|0)==(1);
    do {
     if ($70) {
      $71 = $3;
      $72 = ((($71)) + 96|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0|0);
      $75 = $3;
      if ($74) {
       $76 = ((($75)) + 96|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $3;
       $79 = $4;
       $80 = $5;
       $81 = $8;
       $82 = (0 - ($81))|0;
       $83 = (FUNCTION_TABLE_iiiii[$77 & 63]($78,$79,$80,$82)|0);
       $84 = ($83|0)!=(0);
       if ($84) {
        break;
       }
      } else {
       $85 = ((($75)) + 92|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($86|0)!=(0|0);
       if ($87) {
        break;
       }
      }
      $88 = $3;
      $89 = ((($88)) + 96|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)!=(0|0);
      $92 = $3;
      if ($91) {
       $93 = ((($92)) + 96|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $3;
       $96 = $4;
       $97 = $5;
       $98 = (($97) + 1)|0;
       $99 = $8;
       $100 = (0 - ($99))|0;
       $101 = (FUNCTION_TABLE_iiiii[$94 & 63]($95,$96,$98,$100)|0);
       $102 = ($101|0)!=(0);
       if ($102) {
        break;
       } else {
        break L7;
       }
      } else {
       $103 = ((($92)) + 92|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($104|0)!=(0|0);
       if ($105) {
        break;
       } else {
        break L7;
       }
      }
     }
    } while(0);
    $108 = $8;
    _s_ins(0,$108);
    $109 = $0;
    $110 = $7;
    $111 = ((($110)) + 8|0);
    HEAP32[$111>>2] = $109;
    _redraw_window(0);
    STACKTOP = sp;return;
   }
  } while(0);
  $106 = $0;
  $107 = $1;
  _jump($106,$107);
  STACKTOP = sp;return;
 }
 $112 = ((($61)) + 16|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $7;
 $115 = ((($114)) + 12|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($117)) + 16|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($113>>>0)<($119>>>0);
 if ($120) {
  STACKTOP = sp;return;
 }
 $121 = $0;
 $122 = (_plines($121)|0);
 $123 = ($122|0)==(1);
 if ($123) {
  $124 = $0;
  $125 = ((($124)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $7;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($129)) + 16|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($126>>>0)<($131>>>0);
  if ($132) {
   STACKTOP = sp;return;
  }
 }
 $133 = $6;
 $134 = $0;
 $135 = ((($134)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (_cntplines($133,$136)|0);
 $2 = $137;
 $138 = $2;
 $139 = $7;
 $140 = ((($139)) + 20|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($141) - 1)|0;
 $143 = ($138>>>0)<=($142>>>0);
 if ($143) {
  STACKTOP = sp;return;
 }
 $144 = $2;
 $145 = $7;
 $146 = ((($145)) + 20|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) - 1)|0;
 $149 = (($144) - ($148))|0;
 $9 = $149;
 $150 = $9;
 $151 = $1;
 $152 = ($150|0)>($151|0);
 $153 = HEAP32[(3516)>>2]|0;
 $154 = ($153|0)==(2);
 $or$cond3 = $152 | $154;
 L33: do {
  if (!($or$cond3)) {
   $155 = HEAP32[(3516)>>2]|0;
   $156 = ($155|0)==(1);
   do {
    if ($156) {
     $157 = $3;
     $158 = ((($157)) + 96|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)!=(0|0);
     $161 = $3;
     if ($160) {
      $162 = ((($161)) + 96|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $3;
      $165 = $4;
      $166 = $5;
      $167 = $9;
      $168 = (FUNCTION_TABLE_iiiii[$163 & 63]($164,$165,$166,$167)|0);
      $169 = ($168|0)!=(0);
      if ($169) {
       break;
      }
     } else {
      $170 = ((($161)) + 92|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)!=(0|0);
      if ($172) {
       break;
      }
     }
     $173 = $3;
     $174 = ((($173)) + 96|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = ($175|0)!=(0|0);
     $177 = $3;
     if ($176) {
      $178 = ((($177)) + 96|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $3;
      $181 = $4;
      $182 = $5;
      $183 = (($182) + 1)|0;
      $184 = $9;
      $185 = (FUNCTION_TABLE_iiiii[$179 & 63]($180,$181,$183,$184)|0);
      $186 = ($185|0)!=(0);
      if ($186) {
       break;
      } else {
       break L33;
      }
     } else {
      $187 = ((($177)) + 92|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($188|0)!=(0|0);
      if ($189) {
       break;
      } else {
       break L33;
      }
     }
    }
   } while(0);
   $10 = 0;
   $192 = $0;
   $11 = $192;
   while(1) {
    $193 = $11;
    $194 = (_plines($193)|0);
    $195 = $10;
    $196 = (($195) + ($194))|0;
    $10 = $196;
    $197 = $10;
    $198 = $7;
    $199 = ((($198)) + 20|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) - 1)|0;
    $202 = ($197>>>0)>=($201>>>0);
    if ($202) {
     break;
    }
    $203 = $11;
    $204 = $7;
    $205 = ((($204)) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ((($206)) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($203|0)==($208|0);
    if ($209) {
     break;
    }
    $210 = $11;
    $211 = HEAP32[$210>>2]|0;
    $11 = $211;
   }
   while(1) {
    $212 = $10;
    $213 = $7;
    $214 = ((($213)) + 20|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (($215) - 1)|0;
    $217 = ($212>>>0)>($216>>>0);
    if ($217) {
     $218 = $11;
     $219 = $0;
     $220 = ($218|0)!=($219|0);
     $244 = $220;
    } else {
     $244 = 0;
    }
    $221 = $11;
    if (!($244)) {
     break;
    }
    $222 = (_plines($221)|0);
    $223 = $10;
    $224 = (($223) - ($222))|0;
    $10 = $224;
    $225 = $11;
    $226 = ((($225)) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    $11 = $227;
   }
   $12 = $221;
   $228 = $6;
   $229 = ((($228)) + 16|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $12;
   $232 = ((($231)) + 16|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($230>>>0)<($233>>>0);
   if ($234) {
    $235 = $6;
    $236 = $12;
    $237 = (_cntplines($235,$236)|0);
    $10 = $237;
    $238 = $10;
    $239 = ($238|0)!=(0);
    if ($239) {
     $240 = $10;
     _s_del(0,$240);
    }
   }
   $241 = $12;
   $242 = $7;
   $243 = ((($242)) + 8|0);
   HEAP32[$243>>2] = $241;
   _redraw_window(0);
   STACKTOP = sp;return;
  }
 } while(0);
 $190 = $0;
 $191 = $1;
 _jump($190,$191);
 STACKTOP = sp;return;
}
function _jump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = HEAP32[4326]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = HEAP32[4327]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $6 = $14;
 $15 = (_plines($14)|0);
 $16 = (($13) - ($15))|0;
 $17 = (($16) - 1)|0;
 $5 = $17;
 $4 = 0;
 while(1) {
  $18 = $4;
  $19 = $3;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $6;
  $22 = $7;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $6;
  $25 = HEAP32[$24>>2]|0;
  $6 = $25;
  $26 = $6;
  $27 = (_plines($26)|0);
  $28 = $4;
  $29 = (($28) + ($27))|0;
  $4 = $29;
  $30 = $4;
  $31 = $5;
  $32 = ($30|0)>=($31|0);
  if ($32) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $33 = $4;
  $34 = $5;
  $35 = ($33|0)>($34|0);
  if ($35) {
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $6 = $38;
  }
 }
 $39 = $6;
 $40 = HEAP32[4327]|0;
 $41 = ((($40)) + 8|0);
 HEAP32[$41>>2] = $39;
 _xvUpdateAllBufferWindows();
 _info_update();
 STACKTOP = sp;return;
}
function _move_cursor_to_window() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4327]|0;
 $0 = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $1 = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($8>>>0)<($13>>>0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  HEAP32[$18>>2] = $17;
  _info_update();
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = ((($21)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  _xvMoveToColumn($20,$23);
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($27>>>0)<($32>>>0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($38>>>0)<($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $0;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $49 = $1;
 HEAP32[$49>>2] = $48;
 _info_update();
 $50 = $0;
 $51 = HEAP32[$50>>2]|0;
 $52 = $0;
 $53 = ((($52)) + 64|0);
 $54 = HEAP32[$53>>2]|0;
 _xvMoveToColumn($51,$54);
 STACKTOP = sp;return;
}
function _normal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4327]|0;
 $5 = ((($4)) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = HEAP8[19093]|0;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  HEAP8[19093] = 0;
  HEAP32[4331] = 1;
  $2 = 27;
 }
 $9 = $2;
 $cond = ($9|0)==(27);
 $10 = $3;
 if ($cond) {
  $11 = ((($10)) + 24|0);
  HEAP32[$11>>2] = 0;
  $12 = $3;
  $13 = ((($12)) + 36|0);
  HEAP32[$13>>2] = 0;
  $14 = $3;
  $15 = ((($14)) + 20|0);
  HEAP32[$15>>2] = 0;
  $1 = 0;
  $123 = $1;
  STACKTOP = sp;return ($123|0);
 }
 $16 = ((($10)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 $19 = $2;
 $20 = ($19>>>0)<(128);
 $or$cond = $18 & $20;
 do {
  if ($or$cond) {
   $21 = $2;
   $22 = (_isdigit($21)|0);
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $2;
    $25 = ($24|0)!=(48);
    if (!($25)) {
     $26 = $3;
     $27 = ((($26)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)>(0);
     if (!($29)) {
      break;
     }
    }
    $30 = $3;
    $31 = ((($30)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32*10)|0;
    $34 = $2;
    $35 = (($34) - 48)|0;
    $36 = (($33) + ($35))|0;
    $37 = $3;
    $38 = ((($37)) + 36|0);
    HEAP32[$38>>2] = $36;
    $1 = 0;
    $123 = $1;
    STACKTOP = sp;return ($123|0);
   }
  }
 } while(0);
 $39 = $3;
 $40 = ((($39)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  label = 12;
 } else {
  $43 = $3;
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   label = 12;
  } else {
   $56 = $3;
   $57 = ((($56)) + 40|0);
   HEAP32[$57>>2] = 0;
  }
 }
 if ((label|0) == 12) {
  $47 = $3;
  $48 = ((($47)) + 40|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $3;
   $52 = ((($51)) + 40|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $3;
   $55 = ((($54)) + 36|0);
   HEAP32[$55>>2] = $53;
  }
 }
 $58 = $3;
 $59 = ((($58)) + 24|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0);
 if ($61) {
  $62 = $3;
  $63 = ((($62)) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $3;
   $67 = ((($66)) + 52|0);
   $68 = HEAP32[$67>>2]|0;
   $71 = $68;
  } else {
   $71 = 64;
  }
  $69 = $3;
  $70 = ((($69)) + 48|0);
  HEAP32[$70>>2] = $71;
  $72 = $3;
  $73 = ((($72)) + 44|0);
  HEAP32[$73>>2] = 0;
 }
 $74 = $3;
 $75 = ((($74)) + 20|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0);
 $78 = $2;
 $79 = $3;
 do {
  if ($77) {
   $80 = ((($79)) + 32|0);
   HEAP32[$80>>2] = $78;
   HEAP32[4325] = 0;
   $81 = $3;
   $82 = ((($81)) + 20|0);
   HEAP32[$82>>2] = 0;
  } else {
   $83 = ((($79)) + 28|0);
   HEAP32[$83>>2] = $78;
   $84 = $3;
   $85 = ((($84)) + 32|0);
   HEAP32[$85>>2] = 0;
   $86 = $3;
   $87 = ((($86)) + 28|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)>(255);
   if ($89) {
    $98 = 0;
   } else {
    $90 = $3;
    $91 = ((($90)) + 28|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (848 + ($92<<3)|0);
    $94 = ((($93)) + 4|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $98 = $96;
   }
   $97 = $98 & 32;
   $99 = ($97|0)!=(0);
   $100 = $3;
   if (!($99)) {
    $113 = ((($100)) + 24|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $3;
    $116 = ((($115)) + 28|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($114|0)==($117|0);
    if (!($118)) {
     break;
    }
    $119 = $3;
    $120 = ((($119)) + 28|0);
    HEAP32[$120>>2] = 95;
    break;
   }
   $101 = ((($100)) + 20|0);
   HEAP32[$101>>2] = 1;
   HEAP32[4325] = 1;
   $102 = $3;
   $103 = ((($102)) + 36|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = $3;
    $107 = ((($106)) + 36|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $3;
    $110 = ((($109)) + 40|0);
    HEAP32[$110>>2] = $108;
    $111 = $3;
    $112 = ((($111)) + 36|0);
    HEAP32[$112>>2] = 0;
   }
   $1 = 0;
   $123 = $1;
   STACKTOP = sp;return ($123|0);
  }
 } while(0);
 $121 = $3;
 $122 = (_HandleCommand($121)|0);
 $1 = $122;
 $123 = $1;
 STACKTOP = sp;return ($123|0);
}
function _HandleCommand($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(255);
 if ($6) {
  $15 = 0;
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (848 + ($9<<3)|0);
  $11 = ((($10)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $15 = $13;
 }
 $14 = $15&255;
 $16 = $2;
 $17 = ((($16)) + 16|0);
 HEAP8[$17>>0] = $14;
 $18 = $2;
 $19 = ((($18)) + 16|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 & 1;
 $23 = ($22|0)==(0);
 $24 = $2;
 if ($23) {
  $25 = ((($24)) + 24|0);
  HEAP32[$25>>2] = 0;
  $26 = $2;
  $27 = ((($26)) + 36|0);
  HEAP32[$27>>2] = 0;
  _beep();
  $1 = 0;
  $133 = $1;
  STACKTOP = sp;return ($133|0);
 }
 $28 = ((($24)) + 16|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 2;
 $32 = ($31|0)!=(0);
 $33 = $2;
 $34 = ((($33)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 do {
  if ($32) {
   if ($36) {
    $37 = $2;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(108);
    if ($40) {
     $41 = $2;
     $42 = (_endofline($41)|0);
     $43 = ($42|0)!=(0);
     if ($43) {
      $44 = $2;
      $45 = ((($44)) + 28|0);
      HEAP32[$45>>2] = 36;
      $46 = $2;
      $47 = ((($46)) + 16|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = $49 | 8;
      $51 = $50&255;
      HEAP8[$47>>0] = $51;
     }
     $52 = $2;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)!=(0);
     if ($55) {
      $56 = $2;
      $57 = ((($56)) + 36|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + -1)|0;
      HEAP32[$57>>2] = $59;
      $60 = $2;
      $61 = ((($60)) + 16|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = $63 | 8;
      $65 = $64&255;
      HEAP8[$61>>0] = $65;
     }
    }
   }
   $66 = $2;
   $67 = ((($66)) + 8|0);
   HEAP32[$67>>2] = 0;
   $68 = $2;
   $69 = ((($68)) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)>(255);
   if ($71) {
    $78 = 1;
   } else {
    $72 = $2;
    $73 = ((($72)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (848 + ($74<<3)|0);
    $76 = HEAP32[$75>>2]|0;
    $78 = $76;
   }
   $77 = $2;
   FUNCTION_TABLE_vi[$78 & 127]($77);
   $79 = $2;
   $80 = ((($79)) + 16|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $82 & 16;
   $84 = ($83|0)!=(0);
   if ($84) {
    $1 = 0;
    $133 = $1;
    STACKTOP = sp;return ($133|0);
   }
   $85 = $2;
   $86 = ((($85)) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0|0);
   if ($88) {
    _beep();
    $89 = $2;
    $90 = ((($89)) + 24|0);
    HEAP32[$90>>2] = 0;
    $91 = $2;
    $92 = ((($91)) + 36|0);
    HEAP32[$92>>2] = 0;
    _unstuff();
    $1 = 0;
    $133 = $1;
    STACKTOP = sp;return ($133|0);
   }
   $93 = $2;
   $94 = ((($93)) + 16|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $96 & 64;
   $98 = ($97|0)!=(0);
   if ($98) {
    _setpcmark();
   }
   $99 = $2;
   $100 = ((($99)) + 16|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = $102 & 128;
   $104 = ($103|0)!=(0);
   if ($104) {
    $105 = HEAP32[4327]|0;
    $106 = ((($105)) + 68|0);
    HEAP32[$106>>2] = 1;
   }
   $107 = $2;
   $108 = ((($107)) + 24|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)!=(0);
   $111 = $2;
   if ($110) {
    _HandleOperator($111);
    break;
   } else {
    $112 = ((($111)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $2;
    $115 = ((($114)) + 8|0);
    $116 = ((($115)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    _move_cursor($113,$117);
    break;
   }
  } else {
   if ($36) {
    _beep();
    $118 = $2;
    $119 = ((($118)) + 24|0);
    HEAP32[$119>>2] = 0;
    $1 = 0;
    $133 = $1;
    STACKTOP = sp;return ($133|0);
   }
   $120 = $2;
   $121 = ((($120)) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($122|0)>(255);
   if ($123) {
    $130 = 1;
   } else {
    $124 = $2;
    $125 = ((($124)) + 28|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (848 + ($126<<3)|0);
    $128 = HEAP32[$127>>2]|0;
    $130 = $128;
   }
   $129 = $2;
   FUNCTION_TABLE_vi[$130 & 127]($129);
  }
 } while(0);
 $131 = $2;
 $132 = ((($131)) + 36|0);
 HEAP32[$132>>2] = 0;
 $1 = 1;
 $133 = $1;
 STACKTOP = sp;return ($133|0);
}
function _do_badcmd($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _beep();
 STACKTOP = sp;return;
}
function _HandleOperator($0) {
 $0 = $0|0;
 var $$sink1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 8;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 16|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 & 4;
   $13 = ($12|0)==(0);
   $14 = $1;
   if ($13) {
    $15 = $1;
    $16 = ((($15)) + 8|0);
    $17 = (_eq($14,$16)|0);
    $18 = ($17|0)!=(0);
    if (!($18)) {
     break;
    }
   } else {
    $19 = HEAP32[$14>>2]|0;
    $20 = $1;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)==($22|0);
    if (!($23)) {
     break;
    }
   }
   _beep();
   $24 = $1;
   $$sink1 = $24;
   $64 = ((($$sink1)) + 24|0);
   HEAP32[$64>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = $1;
 $28 = (_lt($26,$27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $1;
  $31 = $1;
  $32 = ((($31)) + 8|0);
  _pswap($30,$32);
 }
 $33 = $1;
 $34 = ((($33)) + 16|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 8;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = $1;
   $40 = ((($39)) + 16|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 & 4;
   $44 = ($43|0)==(0);
   $45 = $1;
   $46 = ((($45)) + 8|0);
   if ($44) {
    (_dec($46)|0);
    break;
   } else {
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = $1;
    $50 = ((($49)) + 8|0);
    HEAP32[$50>>2] = $48;
    break;
   }
  }
 } while(0);
 $51 = $1;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 switch ($53|0) {
 case 99:  {
  $54 = $1;
  _xvOpChange($54);
  break;
 }
 case 100:  {
  $55 = $1;
  _xvOpDelete($55);
  break;
 }
 case 121:  {
  $56 = $1;
  _xvOpYank($56);
  break;
 }
 case 62: case 60:  {
  $57 = $1;
  _xvOpShift($57);
  break;
 }
 case 33:  {
  $58 = $1;
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  _specify_pipe_range($59,$62);
  _cmd_init(33);
  break;
 }
 default: {
  _beep();
 }
 }
 $63 = $1;
 $$sink1 = $63;
 $64 = ((($$sink1)) + 24|0);
 HEAP32[$64>>2] = 0;
 STACKTOP = sp;return;
}
function _xvProcessSearch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = HEAP32[4327]|0;
 $8 = ((($7)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $4;
 $11 = $3;
 $12 = (_xvDoSearch($10,$11)|0);
 $6 = $12;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 $15 = $5;
 $16 = ((($15)) + 24|0);
 if ($14) {
  HEAP32[$16>>2] = 0;
  $17 = $5;
  $18 = ((($17)) + 36|0);
  HEAP32[$18>>2] = 0;
  $2 = 0;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 $19 = HEAP32[$16>>2]|0;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $5;
  $22 = ((($21)) + 28|0);
  HEAP32[$22>>2] = 110;
  $23 = $5;
  $24 = ((($23)) + 32|0);
  HEAP32[$24>>2] = 0;
  $25 = 131;
  $26 = $25&255;
  $27 = $5;
  $28 = ((($27)) + 16|0);
  HEAP8[$28>>0] = $26;
  $29 = $5;
  $30 = ((($29)) + 8|0);
  $31 = $6;
  ;HEAP32[$30>>2]=HEAP32[$31>>2]|0;HEAP32[$30+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $5;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $5;
   $37 = ((($36)) + 8|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = $5;
    $42 = ((($41)) + 16|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $44 | 4;
    $46 = $45&255;
    HEAP8[$42>>0] = $46;
   }
  }
  $47 = $5;
  _HandleOperator($47);
 } else {
  $48 = HEAP32[4327]|0;
  $49 = ((($48)) + 68|0);
  HEAP32[$49>>2] = 1;
  _setpcmark();
  $50 = $6;
  $51 = HEAP32[$50>>2]|0;
  $52 = $6;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  _move_cursor($51,$54);
  _move_window_to_cursor();
 }
 $2 = 1;
 $55 = $2;
 STACKTOP = sp;return ($55|0);
}
function _do_operator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 40|0);
  HEAP32[$10>>2] = $8;
 }
 $11 = $1;
 $12 = HEAP32[4327]|0;
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$11>>2]=HEAP32[$13>>2]|0;HEAP32[$11+4>>2]=HEAP32[$13+4>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _do_quote($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 52|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _xvInitialiseCmd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 36|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 44|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 48|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 52|0);
 HEAP32[$24>>2] = 0;
 STACKTOP = sp;return;
}
function _not_imp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $1;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  _show_message(10620,$vararg_buffer);
 }
 STACKTOP = sp;return 1;
}
function _xvpSetColour($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $4 = HEAP32[$0>>2]|0;
 switch ($4|0) {
 case 9:  {
  $3 = 0;
  break;
 }
 case 49:  {
  $3 = 1;
  break;
 }
 case 50:  {
  $3 = 3;
  break;
 }
 case 39:  {
  $3 = 2;
  break;
 }
 default: {
 }
 }
 $5 = HEAP32[4327]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[4327]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$9 & 127]($12,$13,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _xvpSetVBell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $1;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[(4500)>>2]|0;
 $6 = ($4|0)!=($5|0);
 if (!($6)) {
  STACKTOP = sp;return 1;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 _set_param(13,$vararg_buffer);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $10;
 _set_param(60,$vararg_buffer1);
 $11 = HEAP32[(3368)>>2]|0;
 $12 = $11 | 16;
 HEAP32[(3368)>>2] = $12;
 $13 = HEAP32[(4496)>>2]|0;
 $14 = $13 | 16;
 HEAP32[(4496)>>2] = $14;
 STACKTOP = sp;return 1;
}
function _xvpSetMagic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $1;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[(3924)>>2]|0;
 if ($5) {
  $7 = ($6|0)==(0);
  if (!($7)) {
   STACKTOP = sp;return 1;
  }
  $8 = HEAP32[1164]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  _set_param(36,$vararg_buffer);
  $9 = HEAP32[(3920)>>2]|0;
  $10 = $9 | 16;
  HEAP32[(3920)>>2] = $10;
  STACKTOP = sp;return 1;
 } else {
  $11 = ($6|0)!=(0);
  if (!($11)) {
   STACKTOP = sp;return 1;
  }
  $12 = HEAP32[(3924)>>2]|0;
  HEAP32[1164] = $12;
  HEAP32[$vararg_buffer2>>2] = 0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 0;
  _set_param(36,$vararg_buffer2);
  $13 = HEAP32[(3920)>>2]|0;
  $14 = $13 | 16;
  HEAP32[(3920)>>2] = $14;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _xvpSetRT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $switch = ($5>>>0)<(3);
 if ($switch) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  $9 = $8&1;
  HEAP32[$vararg_buffer>>2] = $9;
  _set_param(22,$vararg_buffer);
  $2 = 1;
  $10 = $2;
  STACKTOP = sp;return ($10|0);
 } else {
  $2 = 0;
  $10 = $2;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _xvpSetTS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 $7 = ($6|0)<=(0);
 $8 = $4;
 $9 = ($8|0)>(32);
 $or$cond = $7 | $9;
 if (!($or$cond)) {
  $2 = 1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $10 = $3;
 $11 = ($10|0)!=(0);
 if ($11) {
  _show_error(10589,$vararg_buffer);
 }
 $2 = 0;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _set_param($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current12 = 0, $arglist_current3 = 0, $arglist_current6 = 0, $arglist_current9 = 0, $arglist_next = 0, $arglist_next10 = 0, $arglist_next13 = 0, $arglist_next4 = 0, $arglist_next7 = 0, $expanded = 0, $expanded11 = 0;
 var $expanded12 = 0, $expanded13 = 0, $expanded15 = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded4 = 0, $expanded5 = 0;
 var $expanded6 = 0, $expanded8 = 0, $expanded9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $1 = $0;
 $13 = $1;
 $14 = (3048 + (($13*24)|0)|0);
 $3 = $14;
 HEAP32[$2>>2] = $varargs;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 47;
 L1: do {
  switch ($18|0) {
  case 8:  {
   $arglist_current = HEAP32[$2>>2]|0;
   $19 = $arglist_current;
   $20 = ((0) + 4|0);
   $expanded2 = $20;
   $expanded = (($expanded2) - 1)|0;
   $21 = (($19) + ($expanded))|0;
   $22 = ((0) + 4|0);
   $expanded6 = $22;
   $expanded5 = (($expanded6) - 1)|0;
   $expanded4 = $expanded5 ^ -1;
   $23 = $21 & $expanded4;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $arglist_next = ((($24)) + 4|0);
   HEAP32[$2>>2] = $arglist_next;
   $6 = $25;
   $26 = $6;
   $27 = $3;
   $28 = ((($27)) + 12|0);
   HEAP32[$28>>2] = $26;
   $arglist_current3 = HEAP32[$2>>2]|0;
   $29 = $arglist_current3;
   $30 = ((0) + 4|0);
   $expanded9 = $30;
   $expanded8 = (($expanded9) - 1)|0;
   $31 = (($29) + ($expanded8))|0;
   $32 = ((0) + 4|0);
   $expanded13 = $32;
   $expanded12 = (($expanded13) - 1)|0;
   $expanded11 = $expanded12 ^ -1;
   $33 = $31 & $expanded11;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $arglist_next4 = ((($34)) + 4|0);
   HEAP32[$2>>2] = $arglist_next4;
   $7 = $35;
   $36 = $7;
   $5 = $36;
   $37 = $5;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $5;
    $40 = $3;
    $41 = ((($40)) + 20|0);
    HEAP32[$41>>2] = $39;
   }
   break;
  }
  case 2: case 1:  {
   $arglist_current6 = HEAP32[$2>>2]|0;
   $42 = $arglist_current6;
   $43 = ((0) + 4|0);
   $expanded16 = $43;
   $expanded15 = (($expanded16) - 1)|0;
   $44 = (($42) + ($expanded15))|0;
   $45 = ((0) + 4|0);
   $expanded20 = $45;
   $expanded19 = (($expanded20) - 1)|0;
   $expanded18 = $expanded19 ^ -1;
   $46 = $44 & $expanded18;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $arglist_next7 = ((($47)) + 4|0);
   HEAP32[$2>>2] = $arglist_next7;
   $8 = $48;
   $49 = $8;
   $50 = $3;
   $51 = ((($50)) + 12|0);
   HEAP32[$51>>2] = $49;
   break;
  }
  case 32:  {
   $arglist_current9 = HEAP32[$2>>2]|0;
   $52 = $arglist_current9;
   $53 = ((0) + 4|0);
   $expanded23 = $53;
   $expanded22 = (($expanded23) - 1)|0;
   $54 = (($52) + ($expanded22))|0;
   $55 = ((0) + 4|0);
   $expanded27 = $55;
   $expanded26 = (($expanded27) - 1)|0;
   $expanded25 = $expanded26 ^ -1;
   $56 = $54 & $expanded25;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $arglist_next10 = ((($57)) + 4|0);
   HEAP32[$2>>2] = $arglist_next10;
   $11 = $58;
   $59 = $11;
   $60 = (_strsave($59)|0);
   $4 = $60;
   $61 = $4;
   $62 = ($61|0)==(0|0);
   if ($62) {
    _show_error(5948,$vararg_buffer);
    STACKTOP = sp;return;
   }
   $63 = $4;
   _makeargv($63,$9,$10,10616);
   $64 = HEAP32[$9>>2]|0;
   $65 = ($64|0)==(0);
   $66 = HEAP32[$10>>2]|0;
   $67 = ($66|0)==(0|0);
   $or$cond = $65 | $67;
   if ($or$cond) {
    $68 = $4;
    _free($68);
    STACKTOP = sp;return;
   }
   $69 = $3;
   $70 = ((($69)) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)!=(0|0);
   if ($72) {
    $73 = $3;
    $74 = ((($73)) + 20|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = $3;
     $79 = ((($78)) + 20|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = HEAP32[$80>>2]|0;
     _free($81);
    }
    $82 = $3;
    $83 = ((($82)) + 20|0);
    $84 = HEAP32[$83>>2]|0;
    _free($84);
   }
   $85 = HEAP32[$10>>2]|0;
   $86 = $3;
   $87 = ((($86)) + 20|0);
   HEAP32[$87>>2] = $85;
   break;
  }
  case 4:  {
   $arglist_current12 = HEAP32[$2>>2]|0;
   $88 = $arglist_current12;
   $89 = ((0) + 4|0);
   $expanded30 = $89;
   $expanded29 = (($expanded30) - 1)|0;
   $90 = (($88) + ($expanded29))|0;
   $91 = ((0) + 4|0);
   $expanded34 = $91;
   $expanded33 = (($expanded34) - 1)|0;
   $expanded32 = $expanded33 ^ -1;
   $92 = $90 & $expanded32;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $arglist_next13 = ((($93)) + 4|0);
   HEAP32[$2>>2] = $arglist_next13;
   $12 = $94;
   $95 = $12;
   $96 = (_strsave($95)|0);
   $4 = $96;
   $97 = $4;
   $98 = ($97|0)==(0|0);
   if ($98) {
    _show_error(5948,$vararg_buffer14);
    break L1;
   }
   $99 = $3;
   $100 = ((($99)) + 20|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0|0);
   if ($102) {
    $103 = $3;
    $104 = ((($103)) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    _free($105);
   }
   $106 = $4;
   $107 = $3;
   $108 = ((($107)) + 20|0);
   HEAP32[$108>>2] = $106;
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _init_params() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3>>>0)<(9);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = (4660 + ($5<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (4660 + ($8<<3)|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _set_param($7,$vararg_buffer);
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 $2 = 0;
 while(1) {
  $14 = $2;
  $15 = ($14>>>0)<(5);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = (4732 + (($16*12)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = (4732 + (($19*12)|0)|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = (4732 + (($23*12)|0)|0);
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $22;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $26;
  _set_param($18,$vararg_buffer1);
  $27 = $2;
  $28 = (($27) + 1)|0;
  $2 = $28;
 }
 $1 = 3048;
 while(1) {
  $29 = $1;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $1;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $1;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(16|0);
   if ($39) {
    $40 = $1;
    $41 = $40;
    $42 = (($41) - (3048))|0;
    $43 = (($42|0) / 24)&-1;
    HEAP32[$0>>2] = $43;
    $44 = $1;
    $45 = ((($44)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 47;
    switch ($47|0) {
    case 8: case 2:  {
     $48 = $1;
     $49 = ((($48)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($0)) + 4|0);
     HEAP32[$51>>2] = $50;
     break;
    }
    case 1:  {
     $52 = $1;
     $53 = ((($52)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($0)) + 4|0);
     HEAP32[$55>>2] = $54;
     break;
    }
    case 4:  {
     $56 = $1;
     $57 = ((($56)) + 20|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($0)) + 4|0);
     HEAP32[$59>>2] = $58;
     break;
    }
    case 32:  {
     $60 = $1;
     $61 = ((($60)) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($0)) + 4|0);
     HEAP32[$63>>2] = $62;
     break;
    }
    default: {
    }
    }
    $64 = $1;
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
    (FUNCTION_TABLE_iii[$66 & 127]($$byval_copy,0)|0);
   }
  }
  $67 = $1;
  $68 = ((($67)) + 24|0);
  $1 = $68;
 }
 STACKTOP = sp;return;
}
function _exSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ($8|0)==(0);
 do {
  if (!($9)) {
   $10 = $2;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = $3;
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    }
    $17 = $3;
    $18 = HEAP32[$17>>2]|0;
    $19 = (_strncmp($18,10803,3)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     break;
    }
   }
   $46 = ((($4)) + 4|0);
   HEAP32[$46>>2] = 0;
   $47 = ((($4)) + 12|0);
   HEAP32[$47>>2] = 0;
   $48 = ((($4)) + 8|0);
   HEAP32[$48>>2] = 0;
   $5 = 0;
   while(1) {
    $49 = $5;
    $50 = $2;
    $51 = ($49|0)<($50|0);
    if (!($51)) {
     break;
    }
    $52 = $3;
    $53 = $5;
    $54 = (($52) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_findparam($55)|0);
    $7 = $56;
    $57 = $7;
    $58 = ($57|0)==(0|0);
    if ($58) {
     break;
    }
    $59 = $7;
    $60 = ((($59)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0);
    $63 = $7;
    if ($62) {
     $64 = HEAP32[$63>>2]|0;
     $65 = (_parmstring($64,0)|0);
     HEAP32[$vararg_buffer>>2] = $65;
     (_lformat($4,10807,$vararg_buffer)|0);
    } else {
     $66 = HEAP32[4217]|0;
     $67 = (__do_set($63,$66)|0);
     $68 = ($67|0)!=(0);
     if (!($68)) {
      break;
     }
    }
    $69 = $5;
    $70 = (($69) + 1)|0;
    $5 = $70;
   }
   $71 = ((($4)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($4)) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72>>>0)>=($74>>>0);
   if (!($75)) {
    $76 = (_flexgetstr($4)|0);
    HEAP32[$vararg_buffer1>>2] = $76;
    _show_message(12801,$vararg_buffer1);
   }
   _flexdelete($4);
   $77 = HEAP32[4217]|0;
   $78 = ($77|0)!=(0);
   if (!($78)) {
    STACKTOP = sp;return;
   }
   _redraw_all(1);
   STACKTOP = sp;return;
  }
 } while(0);
 $21 = HEAP32[4217]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $2;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(0);
  $31 = $29;
 } else {
  $31 = 0;
 }
 $30 = $31&1;
 HEAP32[4273] = $30;
 HEAP32[4274] = 3048;
 $32 = HEAP32[4327]|0;
 $33 = ((($32)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34>>>0)<(90);
 $36 = HEAP32[4327]|0;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 if ($35) {
  $44 = $38;
 } else {
  $39 = ($38>>>0)<(135);
  $40 = HEAP32[4327]|0;
  $41 = ((($40)) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  $$sink = $39 ? 2 : 3;
  $43 = (($42>>>0) / ($$sink>>>0))&-1;
  $44 = $43;
 }
 $6 = $44;
 $45 = $6;
 _disp_init(57,$45,0);
 STACKTOP = sp;return;
}
function _par_show() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4287]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  HEAP32[4287] = 1;
  $0 = 10985;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 while(1) {
  $4 = HEAP32[4274]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[4274]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(16|0);
  if ($10) {
   $11 = HEAP32[4273]|0;
   $12 = ($11|0)!=(0);
   if ($12) {
    break;
   }
   $13 = HEAP32[4274]|0;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 16;
   $17 = ($16|0)!=(0);
   if ($17) {
    break;
   }
  }
  $18 = HEAP32[4274]|0;
  $19 = ((($18)) + 24|0);
  HEAP32[4274] = $19;
 }
 $20 = HEAP32[4274]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  HEAP32[4287] = 0;
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $23 = HEAP32[4274]|0;
  $24 = (_parmstring($23,3)|0);
  $1 = $24;
  $25 = HEAP32[4274]|0;
  $26 = ((($25)) + 24|0);
  HEAP32[4274] = $26;
  $27 = $1;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _findparam($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $2 = $0;
 $16 = $2;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $6 = $18;
 $5 = 0;
 $4 = 0;
 $3 = 3048;
 while(1) {
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   break;
  }
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $9 = $23;
  $24 = $3;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $10 = $26;
  $15 = 0;
  $27 = $3;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 47;
  $31 = ($30|0)==(1);
  if ($31) {
   $14 = 0;
   $13 = 0;
   $32 = $6;
   $33 = ($32|0)==(110);
   if ($33) {
    $34 = $2;
    $35 = ((($34)) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(111);
    if ($38) {
     $39 = $2;
     $40 = ((($39)) + 2|0);
     HEAP32[$11>>2] = $40;
     $41 = $10;
     $42 = (_matchname($41,$11,0)|0);
     $43 = ($42|0)==(2);
     if ($43) {
      $13 = 1;
     }
     $44 = $2;
     $45 = ((($44)) + 2|0);
     HEAP32[$11>>2] = $45;
     $46 = $9;
     $47 = (_matchname($46,$11,0)|0);
     $7 = $47;
     $48 = ($47|0)!=(0);
     do {
      if ($48) {
       $49 = $7;
       $50 = ($49|0)==(1);
       if ($50) {
        $14 = 1;
        break;
       } else {
        $13 = 1;
        break;
       }
      }
     } while(0);
     $51 = $13;
     $52 = ($51|0)!=(0);
     if ($52) {
      $53 = $4;
      $54 = (($53) + 1)|0;
      $4 = $54;
      $55 = $3;
      HEAP32[4279] = $55;
      HEAP32[(17120)>>2] = 0;
      HEAP32[(17128)>>2] = 0;
     }
     $56 = $14;
     $57 = ($56|0)!=(0);
     if ($57) {
      $58 = $5;
      $59 = (($58) + 1)|0;
      $5 = $59;
      $60 = $3;
      HEAP32[4283] = $60;
      HEAP32[(17136)>>2] = 0;
      HEAP32[(17144)>>2] = 0;
     }
    }
   }
   $8 = 0;
  } else {
   $8 = 61;
  }
  $14 = 0;
  $13 = 0;
  $61 = $6;
  $62 = $10;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = ($61|0)==($64|0);
  do {
   if ($65) {
    $66 = $2;
    HEAP32[$11>>2] = $66;
    $67 = $10;
    $68 = $8;
    $69 = (_matchname($67,$11,$68)|0);
    $70 = ($69|0)==(2);
    if ($70) {
     $13 = 1;
     break;
    }
    $71 = $10;
    $72 = (_matchname($71,$11,63)|0);
    $73 = ($72|0)==(2);
    if (!($73)) {
     $74 = $3;
     $75 = ((($74)) + 8|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 & 47;
     $78 = ($77|0)!=(1);
     if (!($78)) {
      break;
     }
     $79 = $10;
     $80 = (_matchname($79,$11,0)|0);
     $81 = ($80|0)==(2);
     if (!($81)) {
      break;
     }
    }
    $13 = 1;
    $15 = 1;
   }
  } while(0);
  $82 = $6;
  $83 = $9;
  $84 = HEAP8[$83>>0]|0;
  $85 = $84 << 24 >> 24;
  $86 = ($82|0)==($85|0);
  do {
   if ($86) {
    $87 = $2;
    HEAP32[$12>>2] = $87;
    $88 = $9;
    $89 = $8;
    $90 = (_matchname($88,$12,$89)|0);
    $7 = $90;
    $91 = $7;
    $92 = ($91|0)==(0);
    if ($92) {
     $93 = $9;
     $94 = (_matchname($93,$12,63)|0);
     $7 = $94;
     $95 = $7;
     $96 = ($95|0)==(0);
     if ($96) {
      $97 = $3;
      $98 = ((($97)) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $99 & 47;
      $101 = ($100|0)!=(1);
      if ($101) {
       $102 = $9;
       $103 = (_matchname($102,$12,0)|0);
       $7 = $103;
      }
     }
     $104 = $7;
     $105 = ($104|0)!=(0);
     if ($105) {
      $15 = 1;
     }
    }
    $106 = $7;
    $107 = ($106|0)!=(0);
    if ($107) {
     $108 = $7;
     $109 = ($108|0)==(1);
     if ($109) {
      $14 = 1;
      break;
     } else {
      $13 = 1;
      $110 = HEAP32[$12>>2]|0;
      HEAP32[$11>>2] = $110;
      break;
     }
    }
   }
  } while(0);
  $111 = $13;
  $112 = ($111|0)!=(0);
  if ($112) {
   $113 = $4;
   $114 = (($113) + 1)|0;
   $4 = $114;
   $115 = $3;
   HEAP32[4279] = $115;
   $116 = HEAP32[$11>>2]|0;
   HEAP32[(17124)>>2] = $116;
   HEAP32[(17120)>>2] = 1;
   $117 = $15;
   HEAP32[(17128)>>2] = $117;
  }
  $118 = $14;
  $119 = ($118|0)!=(0);
  if ($119) {
   $120 = $5;
   $121 = (($120) + 1)|0;
   $5 = $121;
   $122 = $3;
   HEAP32[4283] = $122;
   $123 = HEAP32[$12>>2]|0;
   HEAP32[(17140)>>2] = $123;
   HEAP32[(17136)>>2] = 1;
   $124 = $15;
   HEAP32[(17144)>>2] = $124;
  }
  $125 = $3;
  $126 = ((($125)) + 24|0);
  $3 = $126;
 }
 $127 = $4;
 L57: do {
  switch ($127|0) {
  case 1:  {
   $1 = 17116;
   $133 = $1;
   STACKTOP = sp;return ($133|0);
   break;
  }
  case 0:  {
   $128 = $5;
   $129 = ($128|0)==(1);
   if (!($129)) {
    $130 = $5;
    $131 = ($130|0)==(0);
    $132 = $131 ? 10892 : 10918;
    _show_error($132,$vararg_buffer);
    break L57;
   }
   $1 = 17132;
   $133 = $1;
   STACKTOP = sp;return ($133|0);
   break;
  }
  default: {
   _show_error(10943,$vararg_buffer1);
  }
  }
 } while(0);
 $1 = 0;
 $133 = $1;
 STACKTOP = sp;return ($133|0);
}
function _parmstring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[(17112)>>2] = 0;
 HEAP32[(17108)>>2] = 0;
 while(1) {
  $7 = $3;
  $8 = (($7) + -1)|0;
  $3 = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   break;
  }
  (_flexaddch(17100,32)|0);
 }
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 47;
 switch ($13|0) {
 case 1:  {
  $14 = $2;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  $18 = $17 ? 19254 : 10863;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  (_lformat(17100,10866,$vararg_buffer)|0);
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
  break;
 }
 case 2:  {
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $22;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $25;
  (_lformat(17100,10871,$vararg_buffer2)|0);
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
  break;
 }
 case 8:  {
  $4 = 0;
  while(1) {
   $26 = $2;
   $27 = ((($26)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $4;
   $30 = (($28) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $5 = $31;
   $32 = ($31|0)==(0|0);
   if ($32) {
    label = 9;
    break;
   }
   $33 = $4;
   $34 = $2;
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($33|0)==($36|0);
   if ($37) {
    break;
   }
   $38 = $4;
   $39 = (($38) + 1)|0;
   $4 = $39;
  }
  if ((label|0) == 9) {
   $5 = 10877;
  }
  $40 = $2;
  $41 = HEAP32[$40>>2]|0;
  $42 = $5;
  HEAP32[$vararg_buffer6>>2] = $41;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $42;
  (_lformat(17100,10837,$vararg_buffer6)|0);
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
  break;
 }
 case 4:  {
  $43 = $2;
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $49 = $2;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51;
  } else {
   $52 = 19254;
  }
  HEAP32[$vararg_buffer10>>2] = $44;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $52;
  (_lformat(17100,10837,$vararg_buffer10)|0);
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
  break;
 }
 case 32:  {
  $53 = $2;
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $54;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $58;
  (_lformat(17100,10837,$vararg_buffer14)|0);
  $59 = $2;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  $6 = $62;
  while(1) {
   $63 = $6;
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0|0);
   if (!($65)) {
    break;
   }
   $66 = $6;
   $67 = HEAP32[$66>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $67;
   (_lformat(17100,10859,$vararg_buffer18)|0);
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $6 = $69;
  }
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
  break;
 }
 default: {
  $70 = (_flexgetstr(17100)|0);
  STACKTOP = sp;return ($70|0);
 }
 }
 return (0)|0;
}
function __do_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 40|0;
 $7 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$7>>2] = $15;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 47;
 L1: do {
  switch ($19|0) {
  case 2:  {
   $20 = (_xv_strtoi($7)|0);
   $8 = $20;
   $21 = $8;
   $22 = ($21|0)<(0);
   if (!($22)) {
    $23 = HEAP32[$7>>2]|0;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)!=(0);
    if (!($26)) {
     $29 = $8;
     $30 = ((($5)) + 4|0);
     HEAP32[$30>>2] = $29;
     break L1;
    }
   }
   $27 = $4;
   $28 = ($27|0)!=(0);
   if ($28) {
    _show_error(10811,$vararg_buffer);
   }
   $2 = 0;
   $114 = $2;
   STACKTOP = sp;return ($114|0);
   break;
  }
  case 8:  {
   $10 = 0;
   $31 = $6;
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $9 = $33;
   L12: while(1) {
    $34 = $9;
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0|0);
    if (!($36)) {
     label = 17;
     break;
    }
    $37 = $9;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_matchname($38,$7,0)|0);
    switch ($39|0) {
    case 2:  {
     break L12;
     break;
    }
    case 1:  {
     $40 = $10;
     $41 = ($40|0)!=(0|0);
     if ($41) {
      label = 12;
      break L12;
     }
     $45 = $9;
     $10 = $45;
     break;
    }
    default: {
    }
    }
    $46 = $9;
    $47 = ((($46)) + 4|0);
    $9 = $47;
   }
   if ((label|0) == 12) {
    $42 = $4;
    $43 = ($42|0)!=(0);
    if ($43) {
     $44 = $6;
     _enum_usage($44);
    }
    $2 = 0;
    $114 = $2;
    STACKTOP = sp;return ($114|0);
   }
   else if ((label|0) == 17) {
    $48 = $10;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = $10;
     $9 = $50;
     $51 = $4;
     $52 = ($51|0)!=(0);
     if ($52) {
      $53 = $6;
      $54 = HEAP32[$53>>2]|0;
      $55 = $9;
      $56 = HEAP32[$55>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $54;
      $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr3>>2] = $56;
      _show_message(10837,$vararg_buffer1);
     }
    }
   }
   $57 = $9;
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    $63 = $9;
    $64 = $6;
    $65 = ((($64)) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $63;
    $68 = $66;
    $69 = (($67) - ($68))|0;
    $70 = (($69|0) / 4)&-1;
    $71 = ((($5)) + 4|0);
    HEAP32[$71>>2] = $70;
    break L1;
   }
   $60 = $4;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $6;
    _enum_usage($62);
   }
   $2 = 0;
   $114 = $2;
   STACKTOP = sp;return ($114|0);
   break;
  }
  case 32: case 4:  {
   $72 = HEAP32[$7>>2]|0;
   $73 = ((($5)) + 4|0);
   HEAP32[$73>>2] = $72;
   break;
  }
  case 1:  {
   $74 = $3;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($5)) + 4|0);
   HEAP32[$77>>2] = $76;
   break;
  }
  default: {
  }
  }
 } while(0);
 $78 = $6;
 $79 = $78;
 $80 = (($79) - (3048))|0;
 $81 = (($80|0) / 24)&-1;
 HEAP32[$5>>2] = $81;
 $82 = $6;
 $83 = ((($82)) + 16|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = $6;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
  $90 = (FUNCTION_TABLE_iii[$88 & 127]($$byval_copy,$89)|0);
  $91 = ($90|0)==(0);
  if ($91) {
   $2 = 0;
   $114 = $2;
   STACKTOP = sp;return ($114|0);
  }
 }
 $92 = $6;
 $93 = ((($92)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 47;
 switch ($95|0) {
 case 8: case 2:  {
  $96 = ((($5)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $6;
  $99 = ((($98)) + 12|0);
  HEAP32[$99>>2] = $97;
  break;
 }
 case 1:  {
  $100 = ((($5)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $6;
  $103 = ((($102)) + 12|0);
  HEAP32[$103>>2] = $101;
  break;
 }
 case 32: case 4:  {
  $104 = $6;
  $105 = $104;
  $106 = (($105) - (3048))|0;
  $107 = (($106|0) / 24)&-1;
  $108 = ((($5)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $109;
  _set_param($107,$vararg_buffer4);
  break;
 }
 default: {
 }
 }
 $110 = $6;
 $111 = ((($110)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 | 16;
 HEAP32[$111>>2] = $113;
 $2 = 1;
 $114 = $2;
 STACKTOP = sp;return ($114|0);
}
function _xv_strtoi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $4 = 0;
 $6 = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $3;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $5 = $11;
 while(1) {
  $12 = $5;
  $13 = ($12|0)==(32);
  $14 = $5;
  $15 = ($14|0)==(9);
  $16 = $13 ? 1 : $15;
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = ((($17)) + 1|0);
  $3 = $18;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $5 = $20;
 }
 $21 = $5;
 $22 = ($21|0)==(45);
 if ($22) {
  $6 = 1;
  $23 = $3;
  $24 = ((($23)) + 1|0);
  $3 = $24;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $5 = $26;
 }
 while(1) {
  $27 = $5;
  $28 = ($27|0)==(32);
  $29 = $5;
  $30 = ($29|0)==(9);
  $31 = $28 ? 1 : $30;
  if (!($31)) {
   break;
  }
  $32 = $3;
  $33 = ((($32)) + 1|0);
  $3 = $33;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $5 = $35;
 }
 $36 = $5;
 $37 = ($36|0)==(48);
 L11: do {
  if ($37) {
   $38 = $3;
   $39 = ((($38)) + 1|0);
   $3 = $39;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $5 = $41;
   switch ($41|0) {
   case 88: case 120:  {
    while(1) {
     $42 = $3;
     $43 = ((($42)) + 1|0);
     $3 = $43;
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $5 = $45;
     $46 = ($45|0)!=(0);
     $47 = $5;
     $48 = ($47>>>0)<(128);
     $or$cond = $46 & $48;
     if (!($or$cond)) {
      break L11;
     }
     $49 = $5;
     $50 = (_isxdigit($49)|0);
     $51 = ($50|0)!=(0);
     if (!($51)) {
      break L11;
     }
     $52 = $4;
     $53 = $52<<4;
     $54 = $5;
     $55 = ($54>>>0)<(128);
     if ($55) {
      $56 = $5;
      $57 = (_isdigit($56)|0);
      $58 = ($57|0)!=(0);
      if ($58) {
       $59 = $5;
       $60 = $59 & 15;
       $65 = $60;
      } else {
       label = 15;
      }
     } else {
      label = 15;
     }
     if ((label|0) == 15) {
      label = 0;
      $61 = $5;
      $62 = $61 & 7;
      $63 = (($62) + 9)|0;
      $65 = $63;
     }
     $64 = (($53) + ($65))|0;
     $4 = $64;
    }
    break;
   }
   case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
    while(1) {
     $66 = $4;
     $67 = $66<<3;
     $68 = $5;
     $69 = (($67) + ($68))|0;
     $70 = (($69) - 48)|0;
     $4 = $70;
     $71 = $3;
     $72 = ((($71)) + 1|0);
     $3 = $72;
     $73 = HEAP8[$72>>0]|0;
     $74 = $73 << 24 >> 24;
     $5 = $74;
     $75 = ($74|0)!=(0);
     if (!($75)) {
      break L11;
     }
     $76 = $5;
     $77 = ($76|0)>=(48);
     $78 = $5;
     $79 = ($78|0)<=(55);
     $80 = $77 ? $79 : 0;
     if (!($80)) {
      break;
     }
    }
    break;
   }
   default: {
    $81 = $3;
    $82 = $2;
    HEAP32[$82>>2] = $81;
    $1 = 0;
    $106 = $1;
    STACKTOP = sp;return ($106|0);
   }
   }
  } else {
   while(1) {
    $83 = $5;
    $84 = ($83|0)!=(0);
    $85 = $5;
    $86 = ($85>>>0)<(128);
    $or$cond7 = $84 & $86;
    if (!($or$cond7)) {
     break L11;
    }
    $87 = $5;
    $88 = (_isdigit($87)|0);
    $89 = ($88|0)!=(0);
    if (!($89)) {
     break L11;
    }
    $90 = $4;
    $91 = ($90*10)|0;
    $92 = $5;
    $93 = (($91) + ($92))|0;
    $94 = (($93) - 48)|0;
    $4 = $94;
    $95 = $3;
    $96 = ((($95)) + 1|0);
    $3 = $96;
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    $5 = $98;
   }
  }
 } while(0);
 $99 = $3;
 $100 = $2;
 HEAP32[$100>>2] = $99;
 $101 = $6;
 $102 = ($101|0)!=(0);
 $103 = $4;
 $104 = (0 - ($103))|0;
 $105 = $102 ? $104 : $103;
 $1 = $105;
 $106 = $1;
 STACKTOP = sp;return ($106|0);
}
function _matchname($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 while(1) {
  $12 = $4;
  $13 = ((($12)) + 1|0);
  $4 = $13;
  $14 = HEAP8[$12>>0]|0;
  $15 = $14 << 24 >> 24;
  $8 = $15;
  $16 = $7;
  $17 = ((($16)) + 1|0);
  $7 = $17;
  $18 = HEAP8[$16>>0]|0;
  $19 = $18 << 24 >> 24;
  $9 = $19;
  $20 = ($15|0)==($19|0);
  $21 = $8;
  $22 = ($21|0)!=(0);
  $23 = $20 ? $22 : 0;
  if (!($23)) {
   break;
  }
 }
 $24 = $9;
 $25 = $6;
 $26 = ($24|0)!=($25|0);
 if ($26) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 $27 = $9;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $7;
  $30 = $5;
  HEAP32[$30>>2] = $29;
 }
 $31 = $8;
 $32 = ($31|0)!=(0);
 if ($32) {
  $3 = 1;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 } else {
  $3 = 2;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _enum_usage($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $1 = $0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 8|0);
 HEAP32[$6>>2] = 0;
 (_lformat($2,10843,$vararg_buffer)|0);
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $14;
  (_lformat($2,10859,$vararg_buffer1)|0);
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $3 = $16;
 }
 $17 = (_flexgetstr($2)|0);
 HEAP32[$vararg_buffer3>>2] = $17;
 _show_error(12801,$vararg_buffer3);
 _flexdelete($2);
 STACKTOP = sp;return;
}
function _specify_pipe_range($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $3;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if ($15) {
   $16 = $2;
   $4 = $16;
   $17 = $3;
   $2 = $17;
   $18 = $4;
   $3 = $18;
  }
 }
 $19 = $2;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $2;
  $25 = $21;
 } else {
  $22 = HEAP32[4326]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24;
 }
 HEAP32[4288] = $25;
 $26 = $3;
 $27 = ($26|0)!=(0|0);
 $28 = HEAP32[4326]|0;
 $29 = ((($28)) + 8|0);
 $30 = $3;
 $31 = ((($30)) + 4|0);
 $$sink = $27 ? $31 : $29;
 $32 = HEAP32[$$sink>>2]|0;
 HEAP32[4289] = $32;
 $33 = HEAP32[4327]|0;
 HEAP32[4290] = $33;
 STACKTOP = sp;return;
}
function _do_pipe($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $2 = $0;
 $6 = HEAP32[4288]|0;
 $7 = ($6|0)==(0|0);
 $8 = HEAP32[4289]|0;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 if (!($or$cond)) {
  $10 = HEAP32[4290]|0;
  $11 = HEAP32[4327]|0;
  $12 = ($10|0)!=($11|0);
  if (!($12)) {
   $13 = $2;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)==(33);
   if ($16) {
    $17 = $2;
    $18 = ((($17)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ($20|0)==(0);
    $22 = HEAP32[4291]|0;
    $23 = ($22|0)!=(0|0);
    $or$cond3 = $21 & $23;
    if ($or$cond3) {
     $24 = HEAP32[4291]|0;
     $2 = $24;
     $25 = $2;
     HEAP32[$vararg_buffer4>>2] = $25;
     _show_message(11049,$vararg_buffer4);
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $26 = HEAP32[4291]|0;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = HEAP32[4291]|0;
     _free($28);
    }
    $29 = $2;
    $30 = (_strsave($29)|0);
    HEAP32[4291] = $30;
   }
   $31 = HEAP32[4327]|0;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 80|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[4327]|0;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vi[$35 & 127]($38);
   $39 = HEAP32[4288]|0;
   HEAP32[$4>>2] = $39;
   $40 = ((($4)) + 4|0);
   HEAP32[$40>>2] = 0;
   $41 = HEAP32[4289]|0;
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$5>>2] = $42;
   $43 = ((($5)) + 4|0);
   HEAP32[$43>>2] = 0;
   (_do_yank($4,$5,0,64)|0);
   HEAP32[4292] = 0;
   $44 = $2;
   $45 = (_sys_pipe($44,58,59)|0);
   $3 = $45;
   $46 = $3;
   $47 = ($46|0)!=(0);
   do {
    if ($47) {
     $48 = HEAP32[4292]|0;
     $49 = ($48|0)!=(0|0);
     if ($49) {
      $50 = HEAP32[4288]|0;
      $51 = HEAP32[4288]|0;
      $52 = HEAP32[4289]|0;
      $53 = (_cntllines($51,$52)|0);
      $54 = (($53) - 1)|0;
      $55 = HEAP32[4292]|0;
      _repllines($50,$54,$55);
      _xvUpdateAllBufferWindows();
      _begin_line(1);
      break;
     } else {
      _show_message(11053,$vararg_buffer6);
      _redraw_all(1);
      break;
     }
    } else {
     $56 = $2;
     HEAP32[$vararg_buffer8>>2] = $56;
     _show_error(11080,$vararg_buffer8);
     _redraw_all(1);
     $3 = 0;
    }
   } while(0);
   _cursupdate();
   $57 = $3;
   $1 = $57;
   $58 = $1;
   STACKTOP = sp;return ($58|0);
  }
 }
 _show_error(10997,$vararg_buffer);
 $1 = 0;
 $58 = $1;
 STACKTOP = sp;return ($58|0);
}
function _p_write($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = HEAP32[4288]|0;
 $2 = $4;
 $3 = 0;
 while(1) {
  $5 = $2;
  $6 = HEAP32[4289]|0;
  $7 = ($5|0)!=($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  (_fputs($10,$11)|0);
  $12 = $1;
  (_putc(10,$12)|0);
  $13 = $2;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $3;
  $17 = (($16) + 1)|0;
  $3 = $17;
 }
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function _p_read($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $8 = 0;
 $9 = 0;
 $6 = 0;
 L1: while(1) {
  $11 = $6;
  $12 = ($11|0)!=(3);
  if (!($12)) {
   label = 32;
   break;
  }
  $13 = $2;
  $14 = (_getc($13)|0);
  $10 = $14;
  $15 = $10;
  $16 = ($15|0)==(0);
  if ($16) {
   continue;
  }
  $17 = $10;
  $18 = ($17|0)==(-1);
  $19 = $6;
  do {
   if ($18) {
    $20 = ($19|0)!=(0);
    if ($20) {
     $6 = 2;
     break;
    } else {
     $6 = 3;
     break;
    }
   } else {
    $21 = ($19|0)==(0);
    if ($21) {
     $22 = (_newline(1)|0);
     $5 = $22;
     $23 = $5;
     $24 = ($23|0)==(0|0);
     if ($24) {
      label = 10;
      break L1;
     }
     $28 = $5;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $7 = $30;
    }
    $31 = $10;
    $32 = ($31|0)==(10);
    if ($32) {
     $6 = 2;
    }
   }
  } while(0);
  $33 = $6;
  switch ($33|0) {
  case 2:  {
   break;
  }
  case 1: case 0:  {
   $34 = $8;
   $35 = $5;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   $39 = ($34|0)>=($38|0);
   if ($39) {
    $40 = $5;
    $41 = $8;
    $42 = (($41) + 2)|0;
    $43 = (_lnresize($40,$42)|0);
    $44 = ($43|0)!=(0);
    if (!($44)) {
     label = 19;
     break L1;
    }
    $48 = $5;
    $49 = ((($48)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $7 = $50;
   }
   $6 = 1;
   $51 = $10;
   $52 = $51&255;
   $53 = $7;
   $54 = $8;
   $55 = (($54) + 1)|0;
   $8 = $55;
   $56 = (($53) + ($54)|0);
   HEAP8[$56>>0] = $52;
   continue L1;
   break;
  }
  default: {
   continue L1;
  }
  }
  $57 = $7;
  $58 = $8;
  $59 = (($57) + ($58)|0);
  HEAP8[$59>>0] = 0;
  $60 = $5;
  $61 = $8;
  $62 = (($61) + 1)|0;
  $63 = (_lnresize($60,$62)|0);
  $64 = ($63|0)!=(0);
  $65 = $3;
  if (!($64)) {
   label = 25;
   break;
  }
  $68 = ($65|0)==(0|0);
  $69 = $5;
  if ($68) {
   $3 = $69;
   $70 = $3;
   $4 = $70;
  } else {
   $71 = $4;
   $72 = ((($71)) + 4|0);
   HEAP32[$72>>2] = $69;
   $73 = $4;
   $74 = $5;
   HEAP32[$74>>2] = $73;
   $75 = $5;
   $4 = $75;
  }
  $76 = $9;
  $77 = (($76) + 1)|0;
  $9 = $77;
  $8 = 0;
  $6 = 0;
 }
 if ((label|0) == 10) {
  $25 = $3;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $3;
   _throw($27);
  }
  $1 = -1;
  $80 = $1;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 19) {
  $45 = $3;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $3;
   _throw($47);
  }
  $1 = -1;
  $80 = $1;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 25) {
  $66 = ($65|0)!=(0|0);
  if ($66) {
   $67 = $3;
   _throw($67);
  }
  $1 = -1;
  $80 = $1;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 32) {
  $78 = $3;
  HEAP32[4292] = $78;
  $79 = $9;
  $1 = $79;
  $80 = $1;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _xvWriteToCommand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = HEAP32[4501]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  _show_error(11103,$vararg_buffer);
  $3 = 0;
  $68 = $3;
  STACKTOP = sp;return ($68|0);
 }
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = HEAP32[4326]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $$sink = $15;
 } else {
  $16 = $5;
  $$sink = $16;
 }
 HEAP32[4288] = $$sink;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 $19 = $6;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[4326]|0;
 $22 = ((($21)) + 8|0);
 $$sink2 = $18 ? $22 : $20;
 $23 = HEAP32[$$sink2>>2]|0;
 HEAP32[4289] = $23;
 $24 = $4;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)==(33);
 if ($27) {
  $28 = $4;
  $29 = ((($28)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)==(0);
  $33 = HEAP32[4291]|0;
  $34 = ($33|0)!=(0|0);
  $or$cond = $32 & $34;
  if ($or$cond) {
   $35 = HEAP32[4291]|0;
   $4 = $35;
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $36 = HEAP32[4291]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = HEAP32[4291]|0;
   _free($38);
  }
  $39 = $4;
  $40 = (_strsave($39)|0);
  HEAP32[4291] = $40;
 }
 $41 = HEAP32[4327]|0;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 80|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[4327]|0;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 FUNCTION_TABLE_vi[$45 & 127]($48);
 _sys_endv();
 $49 = $4;
 $50 = HEAP32[1423]|0;
 (_fputs($49,$50)|0);
 $51 = HEAP32[1423]|0;
 (_fputs(11136,$51)|0);
 $52 = HEAP32[1423]|0;
 (_fflush($52)|0);
 $53 = $4;
 $54 = (_sys_pipe($53,58,0)|0);
 $8 = $54;
 $55 = HEAP32[1423]|0;
 (_fputs(11139,$55)|0);
 $56 = HEAP32[1423]|0;
 (_fflush($56)|0);
 while(1) {
  $57 = HEAP32[1391]|0;
  $58 = (_getc($57)|0);
  $7 = $58;
  $59 = ($58|0)!=(10);
  $60 = $7;
  $61 = ($60|0)!=(13);
  $or$cond5 = $59 & $61;
  $62 = $7;
  $63 = ($62|0)!=(-1);
  $or$cond7 = $or$cond5 & $63;
  if (!($or$cond7)) {
   break;
  }
 }
 _sys_startv();
 $64 = $8;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $66 = $4;
  HEAP32[$vararg_buffer8>>2] = $66;
  _show_error(11080,$vararg_buffer8);
 }
 _redraw_all(1);
 _cursupdate();
 $67 = $8;
 $3 = $67;
 $68 = $3;
 STACKTOP = sp;return ($68|0);
}
function _xvReadFromCommand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(33);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  $14 = HEAP32[4291]|0;
  $15 = ($14|0)!=(0|0);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = HEAP32[4291]|0;
   $2 = $16;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $17 = HEAP32[4291]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = HEAP32[4291]|0;
   _free($19);
  }
  $20 = $2;
  $21 = (_strsave($20)|0);
  HEAP32[4291] = $21;
 }
 $22 = HEAP32[4327]|0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 80|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[4327]|0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vi[$26 & 127]($29);
 HEAP32[4292] = 0;
 $30 = $2;
 $31 = (_sys_pipe($30,0,59)|0);
 $4 = $31;
 $32 = $4;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $40 = $2;
  HEAP32[$vararg_buffer2>>2] = $40;
  _show_error(11080,$vararg_buffer2);
  _redraw_all(1);
  _cursupdate();
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $34 = HEAP32[4292]|0;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $3;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[4292]|0;
  _repllines($38,0,$39);
  _xvUpdateAllBufferWindows();
  _begin_line(1);
  _redraw_all(1);
  _cursupdate();
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 } else {
  _show_message(11053,$vararg_buffer);
  _redraw_all(1);
  _cursupdate();
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _preservebuf() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[(3804)>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = HEAP32[(3804)>>2]|0;
   $5 = ($4|0)==(1);
   if ($5) {
    $6 = HEAP32[4326]|0;
    $7 = ((($6)) + 24|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)!=(0|0);
    if ($9) {
     $10 = HEAP32[4326]|0;
     $11 = ((($10)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_access($12,0)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $15 = HEAP32[4218]|0;
      $16 = ($15|0)<(60);
      if ($16) {
       break;
      }
     }
    }
   }
   $17 = (_psvfile()|0);
   $1 = $17;
   $18 = $1;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $0 = 0;
    $22 = $0;
    STACKTOP = sp;return ($22|0);
   } else {
    $20 = $1;
    $21 = (_putbuf($20)|0);
    $0 = $21;
    $22 = $0;
    STACKTOP = sp;return ($22|0);
   }
  }
 } while(0);
 $0 = 1;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _psvfile() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = HEAP32[4326]|0;
 $1 = $4;
 $5 = $1;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = $3;
  $13 = ($12|0)==(0|0);
  $$ = $13 ? 11195 : $11;
  $3 = $$;
  $14 = $3;
  $15 = (_tempfname($14)|0);
  $16 = $1;
  $17 = ((($16)) + 24|0);
  HEAP32[$17>>2] = $15;
  $18 = $1;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   _show_error(5948,$vararg_buffer);
   $0 = 0;
   $40 = $0;
   STACKTOP = sp;return ($40|0);
  }
 }
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_fopen($24,13212)|0);
 $2 = $25;
 $26 = $2;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  _show_error($30,$vararg_buffer1);
  _wind_goto();
  $31 = HEAP32[4327]|0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 80|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[4327]|0;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$35 & 127]($38);
 }
 $39 = $2;
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _putbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $2 = $0;
 $5 = $2;
 $6 = (_put_file($5,0,0,$3,$4)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = HEAP32[4326]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  _show_error($10,$vararg_buffer);
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _unpreserve() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[4326]|0;
 $0 = $1;
 $2 = HEAP32[(3804)>>2]|0;
 $3 = ($2|0)!=(3);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 (_remove($10)|0);
 $11 = $0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _exPreserveAllBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 1;
 $3 = HEAP32[4327]|0;
 $0 = $3;
 while(1) {
  $4 = HEAP32[4326]|0;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 1;
  $8 = ($7|0)!=(0);
  do {
   if ($8) {
    $9 = (_psvfile()|0);
    $2 = $9;
    $10 = $2;
    $11 = ($10|0)!=(0|0);
    if (!($11)) {
     $1 = 0;
     break;
    }
    $12 = $2;
    $13 = (_putbuf($12)|0);
    $14 = ($13|0)!=(0);
    if (!($14)) {
     $1 = 0;
    }
   }
  } while(0);
  $15 = HEAP32[4327]|0;
  $16 = (_xvNextWindow($15)|0);
  HEAP32[4327] = $16;
  $17 = HEAP32[4327]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = HEAP32[4327]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21;
  } else {
   $22 = 0;
  }
  HEAP32[4326] = $22;
  $23 = HEAP32[4327]|0;
  $24 = $0;
  $25 = ($23|0)!=($24|0);
  if (!($25)) {
   break;
  }
 }
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _inc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $3 = $11;
 $12 = $3;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)!=(0);
 $16 = $2;
 if ($15) {
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = $3;
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  $25 = $24 ? 0 : 2;
  $1 = $25;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $26 = HEAP32[$16>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - -1)|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $1 = -1;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $2;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = 0;
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  HEAP32[$39>>2] = $38;
  $1 = 1;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _dec($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 $7 = $2;
 if ($6) {
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + -1)|0;
  HEAP32[$8>>2] = $10;
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $11 = HEAP32[$7>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  HEAP32[$19>>2] = $18;
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strlen($23)|0);
  $25 = $2;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _pswap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _lt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)!=($8|0);
 $10 = $3;
 if ($9) {
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13>>>0)<($17>>>0);
  $19 = $18&1;
  $2 = $19;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $20 = ((($10)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<($24|0);
  $26 = $25&1;
  $2 = $26;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _eq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $17 = 0;
  $16 = $17&1;
  STACKTOP = sp;return ($16|0);
 }
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 $17 = $15;
 $16 = $17&1;
 STACKTOP = sp;return ($16|0);
}
function _regcomp_jsvim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $2 = $0;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _regerror_jsvim(11203);
  $1 = 0;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $10 = $2;
 HEAP32[4293] = $10;
 HEAP32[4294] = 1;
 HEAP32[4295] = 0;
 HEAP32[4296] = 19089;
 _regc(156);
 $11 = (_reg(0,$7)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $13 = HEAP32[4295]|0;
 $14 = ($13|0)>=(32767);
 if ($14) {
  _regerror_jsvim(11217);
  $1 = 0;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $15 = HEAP32[4295]|0;
 $16 = (96 + ($15))|0;
 $17 = (_alloc($16)|0);
 $3 = $17;
 $18 = $3;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $1 = 0;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $20 = $2;
 HEAP32[4293] = $20;
 HEAP32[4294] = 1;
 $21 = $3;
 $22 = ((($21)) + 92|0);
 HEAP32[4296] = $22;
 _regc(156);
 $23 = (_reg(0,$7)|0);
 $24 = ($23|0)==(0|0);
 $25 = $3;
 if ($24) {
  _free($25);
  $1 = 0;
  $87 = $1;
  STACKTOP = sp;return ($87|0);
 }
 $26 = ((($25)) + 80|0);
 HEAP8[$26>>0] = 0;
 $27 = $3;
 $28 = ((($27)) + 81|0);
 HEAP8[$28>>0] = 0;
 $29 = $3;
 $30 = ((($29)) + 84|0);
 HEAP32[$30>>2] = 0;
 $31 = $3;
 $32 = ((($31)) + 88|0);
 HEAP32[$32>>2] = 0;
 $33 = $3;
 $34 = ((($33)) + 92|0);
 $35 = ((($34)) + 1|0);
 $4 = $35;
 $36 = $4;
 $37 = (_regnext($36)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $4;
  $42 = ((($41)) + 3|0);
  $4 = $42;
  $43 = $4;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)==(8);
  $47 = $4;
  if ($46) {
   $48 = ((($47)) + 3|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $3;
   $51 = ((($50)) + 80|0);
   HEAP8[$51>>0] = $49;
  } else {
   $52 = HEAP8[$47>>0]|0;
   $53 = $52 << 24 >> 24;
   $54 = ($53|0)==(1);
   if ($54) {
    $55 = $3;
    $56 = ((($55)) + 81|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = (($57) + 1)<<24>>24;
    HEAP8[$56>>0] = $58;
   }
  }
  $59 = HEAP32[$7>>2]|0;
  $60 = $59 & 4;
  $61 = ($60|0)!=(0);
  if ($61) {
   $5 = 0;
   $6 = 0;
   while(1) {
    $62 = $4;
    $63 = ($62|0)!=(0|0);
    if (!($63)) {
     break;
    }
    $64 = $4;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)==(8);
    if ($67) {
     $68 = $4;
     $69 = ((($68)) + 3|0);
     $70 = (_strlen($69)|0);
     $71 = $6;
     $72 = ($70|0)>=($71|0);
     if ($72) {
      $73 = $4;
      $74 = ((($73)) + 3|0);
      $5 = $74;
      $75 = $4;
      $76 = ((($75)) + 3|0);
      $77 = (_strlen($76)|0);
      $6 = $77;
     }
    }
    $78 = $4;
    $79 = (_regnext($78)|0);
    $4 = $79;
   }
   $80 = $5;
   $81 = $3;
   $82 = ((($81)) + 84|0);
   HEAP32[$82>>2] = $80;
   $83 = $6;
   $84 = $3;
   $85 = ((($84)) + 88|0);
   HEAP32[$85>>2] = $83;
  }
 }
 $86 = $3;
 $1 = $86;
 $87 = $1;
 STACKTOP = sp;return ($87|0);
}
function _regc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4296]|0;
 $3 = ($2|0)!=(19089|0);
 if ($3) {
  $4 = $1;
  $5 = $4&255;
  $6 = HEAP32[4296]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[4296] = $7;
  HEAP8[$6>>0] = $5;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[4295]|0;
  $9 = (($8) + 1)|0;
  HEAP32[4295] = $9;
  STACKTOP = sp;return;
 }
}
function _reg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $4;
 HEAP32[$10>>2] = 1;
 $11 = $3;
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   $13 = HEAP32[4294]|0;
   $14 = ($13|0)>=(10);
   if (!($14)) {
    $15 = HEAP32[4294]|0;
    $8 = $15;
    $16 = HEAP32[4294]|0;
    $17 = (($16) + 1)|0;
    HEAP32[4294] = $17;
    $18 = $8;
    $19 = (20 + ($18))|0;
    $20 = (_regnode($19)|0);
    $5 = $20;
    break;
   }
   _regerror_jsvim(11244);
   $2 = 0;
   $93 = $2;
   STACKTOP = sp;return ($93|0);
  } else {
   $5 = 0;
  }
 } while(0);
 $21 = (_regbranch($9)|0);
 $6 = $21;
 $22 = $6;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $5;
  $27 = $6;
  _regtail($26,$27);
 } else {
  $28 = $6;
  $5 = $28;
 }
 $29 = HEAP32[$9>>2]|0;
 $30 = $29 & 1;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $32 = $4;
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & -2;
  HEAP32[$32>>2] = $34;
 }
 $35 = HEAP32[$9>>2]|0;
 $36 = $35 & 4;
 $37 = $4;
 $$sink = $37;$$sink3 = $36;
 while(1) {
  $38 = HEAP32[$$sink>>2]|0;
  $39 = $38 | $$sink3;
  HEAP32[$$sink>>2] = $39;
  $40 = HEAP32[4293]|0;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)==(124);
  if (!($43)) {
   break;
  }
  $44 = HEAP32[4293]|0;
  $45 = ((($44)) + 1|0);
  HEAP32[4293] = $45;
  $46 = (_regbranch($9)|0);
  $6 = $46;
  $47 = $6;
  $48 = ($47|0)==(0|0);
  if ($48) {
   label = 16;
   break;
  }
  $49 = $5;
  $50 = $6;
  _regtail($49,$50);
  $51 = HEAP32[$9>>2]|0;
  $52 = $51 & 1;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   $54 = $4;
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
  }
  $57 = HEAP32[$9>>2]|0;
  $58 = $57 & 4;
  $59 = $4;
  $$sink = $59;$$sink3 = $58;
 }
 if ((label|0) == 16) {
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $60 = $3;
 $61 = ($60|0)!=(0);
 $62 = $8;
 $63 = (30 + ($62))|0;
 $64 = $61 ? $63 : 0;
 $65 = (_regnode($64)|0);
 $7 = $65;
 $66 = $5;
 $67 = $7;
 _regtail($66,$67);
 $68 = $5;
 $6 = $68;
 while(1) {
  $69 = $6;
  $70 = ($69|0)!=(0|0);
  if (!($70)) {
   break;
  }
  $71 = $6;
  $72 = $7;
  _regoptail($71,$72);
  $73 = $6;
  $74 = (_regnext($73)|0);
  $6 = $74;
 }
 $75 = $3;
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = HEAP32[4293]|0;
  $78 = ((($77)) + 1|0);
  HEAP32[4293] = $78;
  $79 = HEAP8[$77>>0]|0;
  $80 = $79 << 24 >> 24;
  $81 = ($80|0)!=(41);
  if ($81) {
   _regerror_jsvim(11256);
   $2 = 0;
   $93 = $2;
   STACKTOP = sp;return ($93|0);
  }
 }
 $82 = $3;
 $83 = ($82|0)!=(0);
 if (!($83)) {
  $84 = HEAP32[4293]|0;
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 << 24 >> 24;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = HEAP32[4293]|0;
   $89 = HEAP8[$88>>0]|0;
   $90 = $89 << 24 >> 24;
   $91 = ($90|0)==(41);
   if ($91) {
    _regerror_jsvim(11256);
    $2 = 0;
    $93 = $2;
    STACKTOP = sp;return ($93|0);
   } else {
    _regerror_jsvim(11269);
    $2 = 0;
    $93 = $2;
    STACKTOP = sp;return ($93|0);
   }
  }
 }
 $92 = $5;
 $2 = $92;
 $93 = $2;
 STACKTOP = sp;return ($93|0);
}
function _regnext($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(19089|0);
 do {
  if ($5) {
   $1 = 0;
  } else {
   $6 = $2;
   $7 = ((($6)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = $9 & 255;
   $11 = $10 << 8;
   $12 = $2;
   $13 = ((($12)) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = $15 & 255;
   $17 = (($11) + ($16))|0;
   $3 = $17;
   $18 = $3;
   $19 = ($18|0)==(0);
   if ($19) {
    $1 = 0;
    break;
   }
   $20 = $2;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(7);
   $24 = $2;
   $25 = $3;
   if ($23) {
    $26 = (0 - ($25))|0;
    $27 = (($24) + ($26)|0);
    $1 = $27;
    break;
   } else {
    $28 = (($24) + ($25)|0);
    $1 = $28;
    break;
   }
  }
 } while(0);
 $29 = $1;
 STACKTOP = sp;return ($29|0);
}
function _regnode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[4296]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(19089|0);
 if ($7) {
  $8 = HEAP32[4295]|0;
  $9 = (($8) + 3)|0;
  HEAP32[4295] = $9;
  $10 = $3;
  $1 = $10;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $11 = $3;
  $4 = $11;
  $12 = $2;
  $13 = $12&255;
  $14 = $4;
  $15 = ((($14)) + 1|0);
  $4 = $15;
  HEAP8[$14>>0] = $13;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  $4 = $17;
  HEAP8[$16>>0] = 0;
  $18 = $4;
  $19 = ((($18)) + 1|0);
  $4 = $19;
  HEAP8[$18>>0] = 0;
  $20 = $4;
  HEAP32[4296] = $20;
  $21 = $3;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _regbranch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $7 = $2;
 HEAP32[$7>>2] = 0;
 $8 = (_regnode(6)|0);
 $3 = $8;
 $4 = 0;
 while(1) {
  $9 = HEAP32[4293]|0;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[4293]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(124);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[4293]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(41);
  if (!($20)) {
   break;
  }
  $21 = (_regpiece($6)|0);
  $5 = $21;
  $22 = $5;
  $23 = ($22|0)==(0|0);
  if ($23) {
   label = 6;
   break;
  }
  $24 = HEAP32[$6>>2]|0;
  $25 = $24 & 1;
  $26 = $2;
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 | $25;
  HEAP32[$26>>2] = $28;
  $29 = $4;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = HEAP32[$6>>2]|0;
   $32 = $31 & 4;
   $33 = $2;
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $32;
   HEAP32[$33>>2] = $35;
  } else {
   $36 = $4;
   $37 = $5;
   _regtail($36,$37);
  }
  $38 = $5;
  $4 = $38;
 }
 if ((label|0) == 6) {
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $39 = $4;
 $40 = ($39|0)==(0|0);
 if ($40) {
  (_regnode(9)|0);
 }
 $41 = $3;
 $1 = $41;
 $42 = $1;
 STACKTOP = sp;return ($42|0);
}
function _regtail($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ($7|0)==(19089|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $4 = $9;
 while(1) {
  $10 = $4;
  $11 = (_regnext($10)|0);
  $5 = $11;
  $12 = $5;
  $13 = ($12|0)==(0|0);
  if ($13) {
   break;
  }
  $14 = $5;
  $4 = $14;
 }
 $15 = $4;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(7);
 if ($18) {
  $19 = $4;
  $20 = $3;
  $21 = $19;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $6 = $23;
 } else {
  $24 = $3;
  $25 = $4;
  $26 = $24;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $6 = $28;
 }
 $29 = $6;
 $30 = $29 >> 8;
 $31 = $30 & 255;
 $32 = $31&255;
 $33 = $4;
 $34 = ((($33)) + 1|0);
 HEAP8[$34>>0] = $32;
 $35 = $6;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $4;
 $39 = ((($38)) + 2|0);
 HEAP8[$39>>0] = $37;
 STACKTOP = sp;return;
}
function _regoptail($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 $6 = $2;
 $7 = ($6|0)==(19089|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(6);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = ((($12)) + 3|0);
 $14 = $3;
 _regtail($13,$14);
 STACKTOP = sp;return;
}
function _regpiece($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $7 = (_regatom($6)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $1 = 0;
  $99 = $1;
  STACKTOP = sp;return ($99|0);
 }
 $10 = HEAP32[4293]|0;
 $11 = HEAP8[$10>>0]|0;
 $4 = $11;
 $12 = $4;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(42);
 if (!($14)) {
  $15 = $4;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(43);
  if (!($17)) {
   $18 = $4;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(63);
   if (!($20)) {
    $21 = HEAP32[$6>>2]|0;
    $22 = $2;
    HEAP32[$22>>2] = $21;
    $23 = $3;
    $1 = $23;
    $99 = $1;
    STACKTOP = sp;return ($99|0);
   }
  }
 }
 $24 = HEAP32[$6>>2]|0;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $4;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(63);
  if ($29) {
   _regerror_jsvim(11281);
   $1 = 0;
   $99 = $1;
   STACKTOP = sp;return ($99|0);
  }
 }
 $30 = $4;
 $31 = $30 << 24 >> 24;
 $32 = ($31|0)!=(43);
 $33 = $32 ? 4 : 1;
 $34 = $2;
 HEAP32[$34>>2] = $33;
 $35 = $4;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)==(42);
 if ($37) {
  $38 = HEAP32[$6>>2]|0;
  $39 = $38 & 2;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $3;
   _reginsert(10,$41);
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 do {
  if ((label|0) == 13) {
   $42 = $4;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(42);
   if ($44) {
    $45 = $3;
    _reginsert(6,$45);
    $46 = $3;
    $47 = (_regnode(7)|0);
    _regoptail($46,$47);
    $48 = $3;
    $49 = $3;
    _regoptail($48,$49);
    $50 = $3;
    $51 = (_regnode(6)|0);
    _regtail($50,$51);
    $52 = $3;
    $53 = (_regnode(9)|0);
    _regtail($52,$53);
    break;
   }
   $54 = $4;
   $55 = $54 << 24 >> 24;
   $56 = ($55|0)==(43);
   if ($56) {
    $57 = HEAP32[$6>>2]|0;
    $58 = $57 & 2;
    $59 = ($58|0)!=(0);
    if ($59) {
     $60 = $3;
     _reginsert(11,$60);
     break;
    }
   }
   $61 = $4;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(43);
   if ($63) {
    $64 = (_regnode(6)|0);
    $5 = $64;
    $65 = $3;
    $66 = $5;
    _regtail($65,$66);
    $67 = (_regnode(7)|0);
    $68 = $3;
    _regtail($67,$68);
    $69 = $5;
    $70 = (_regnode(6)|0);
    _regtail($69,$70);
    $71 = $3;
    $72 = (_regnode(9)|0);
    _regtail($71,$72);
    break;
   }
   $73 = $4;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(63);
   if ($75) {
    $76 = $3;
    _reginsert(6,$76);
    $77 = $3;
    $78 = (_regnode(6)|0);
    _regtail($77,$78);
    $79 = (_regnode(9)|0);
    $5 = $79;
    $80 = $3;
    $81 = $5;
    _regtail($80,$81);
    $82 = $3;
    $83 = $5;
    _regoptail($82,$83);
   }
  }
 } while(0);
 $84 = HEAP32[4293]|0;
 $85 = ((($84)) + 1|0);
 HEAP32[4293] = $85;
 $86 = HEAP32[4293]|0;
 $87 = HEAP8[$86>>0]|0;
 $88 = $87 << 24 >> 24;
 $89 = ($88|0)==(42);
 if (!($89)) {
  $90 = HEAP32[4293]|0;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91 << 24 >> 24;
  $93 = ($92|0)==(43);
  if (!($93)) {
   $94 = HEAP32[4293]|0;
   $95 = HEAP8[$94>>0]|0;
   $96 = $95 << 24 >> 24;
   $97 = ($96|0)==(63);
   if (!($97)) {
    $98 = $3;
    $1 = $98;
    $99 = $1;
    STACKTOP = sp;return ($99|0);
   }
  }
 }
 _regerror_jsvim(11307);
 $1 = 0;
 $99 = $1;
 STACKTOP = sp;return ($99|0);
}
function _regatom($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $7 = $2;
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[4293]|0;
 $9 = ((($8)) + 1|0);
 HEAP32[4293] = $9;
 $10 = HEAP8[$8>>0]|0;
 $11 = $10 << 24 >> 24;
 L1: do {
  switch ($11|0) {
  case 94:  {
   $12 = (_regnode(1)|0);
   $3 = $12;
   break;
  }
  case 36:  {
   $13 = (_regnode(2)|0);
   $3 = $13;
   break;
  }
  case 46:  {
   $14 = (_regnode(3)|0);
   $3 = $14;
   $15 = $2;
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 | 3;
   HEAP32[$15>>2] = $17;
   break;
  }
  case 91:  {
   $18 = HEAP32[4293]|0;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(94);
   if ($21) {
    $22 = (_regnode(5)|0);
    $3 = $22;
    $23 = HEAP32[4293]|0;
    $24 = ((($23)) + 1|0);
    HEAP32[4293] = $24;
   } else {
    $25 = (_regnode(4)|0);
    $3 = $25;
   }
   $26 = HEAP32[4293]|0;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(93);
   if ($29) {
    label = 10;
   } else {
    $30 = HEAP32[4293]|0;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(45);
    if ($33) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $34 = HEAP32[4293]|0;
    $35 = ((($34)) + 1|0);
    HEAP32[4293] = $35;
    $36 = HEAP8[$34>>0]|0;
    $37 = $36 << 24 >> 24;
    _regc($37);
   }
   while(1) {
    $38 = HEAP32[4293]|0;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
    $42 = HEAP32[4293]|0;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)!=(93);
    if (!($45)) {
     break;
    }
    $46 = HEAP32[4293]|0;
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(45);
    $50 = HEAP32[4293]|0;
    $51 = ((($50)) + 1|0);
    HEAP32[4293] = $51;
    if (!($49)) {
     $80 = HEAP8[$50>>0]|0;
     $81 = $80 << 24 >> 24;
     _regc($81);
     continue;
    }
    $52 = HEAP32[4293]|0;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    $55 = ($54|0)==(93);
    if (!($55)) {
     $56 = HEAP32[4293]|0;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = ($58|0)==(0);
     if (!($59)) {
      $60 = HEAP32[4293]|0;
      $61 = ((($60)) + -2|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = (($63) + 1)|0;
      $5 = $64;
      $65 = HEAP32[4293]|0;
      $66 = HEAP8[$65>>0]|0;
      $67 = $66&255;
      $6 = $67;
      $68 = $5;
      $69 = $6;
      $70 = (($69) + 1)|0;
      $71 = ($68|0)>($70|0);
      if ($71) {
       label = 18;
       break;
      }
      while(1) {
       $72 = $5;
       $73 = $6;
       $74 = ($72|0)<=($73|0);
       if (!($74)) {
        break;
       }
       $75 = $5;
       _regc($75);
       $76 = $5;
       $77 = (($76) + 1)|0;
       $5 = $77;
      }
      $78 = HEAP32[4293]|0;
      $79 = ((($78)) + 1|0);
      HEAP32[4293] = $79;
      continue;
     }
    }
    _regc(45);
   }
   if ((label|0) == 18) {
    _regerror_jsvim(11318);
    $1 = 0;
    $118 = $1;
    STACKTOP = sp;return ($118|0);
   }
   _regc(0);
   $82 = HEAP32[4293]|0;
   $83 = HEAP8[$82>>0]|0;
   $84 = $83 << 24 >> 24;
   $85 = ($84|0)!=(93);
   if (!($85)) {
    $86 = HEAP32[4293]|0;
    $87 = ((($86)) + 1|0);
    HEAP32[4293] = $87;
    $88 = $2;
    $89 = HEAP32[$88>>2]|0;
    $90 = $89 | 3;
    HEAP32[$88>>2] = $90;
    break L1;
   }
   _regerror_jsvim(11335);
   $1 = 0;
   $118 = $1;
   STACKTOP = sp;return ($118|0);
   break;
  }
  case 40:  {
   $91 = (_reg(1,$4)|0);
   $3 = $91;
   $92 = $3;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    $94 = HEAP32[$4>>2]|0;
    $95 = $94 & 5;
    $96 = $2;
    $97 = HEAP32[$96>>2]|0;
    $98 = $97 | $95;
    HEAP32[$96>>2] = $98;
    break L1;
   }
   $1 = 0;
   $118 = $1;
   STACKTOP = sp;return ($118|0);
   break;
  }
  case 41: case 124: case 0:  {
   _regerror_jsvim(11348);
   $1 = 0;
   $118 = $1;
   STACKTOP = sp;return ($118|0);
   break;
  }
  case 42: case 43: case 63:  {
   _regerror_jsvim(11361);
   $1 = 0;
   $118 = $1;
   STACKTOP = sp;return ($118|0);
   break;
  }
  case 92:  {
   $99 = HEAP32[4293]|0;
   $100 = HEAP8[$99>>0]|0;
   $101 = $100 << 24 >> 24;
   switch ($101|0) {
   case 0:  {
    _regerror_jsvim(11381);
    $1 = 0;
    $118 = $1;
    STACKTOP = sp;return ($118|0);
    break;
   }
   case 60:  {
    $102 = (_regnode(64)|0);
    $3 = $102;
    break;
   }
   case 62:  {
    $103 = (_regnode(65)|0);
    $3 = $103;
    break;
   }
   default: {
    $104 = (_regnode(8)|0);
    $3 = $104;
    $105 = HEAP32[4293]|0;
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    _regc($107);
    _regc(0);
    $108 = $2;
    $109 = HEAP32[$108>>2]|0;
    $110 = $109 | 3;
    HEAP32[$108>>2] = $110;
   }
   }
   $111 = HEAP32[4293]|0;
   $112 = ((($111)) + 1|0);
   HEAP32[4293] = $112;
   break;
  }
  default: {
   $113 = HEAP32[4293]|0;
   $114 = ((($113)) + -1|0);
   HEAP32[4293] = $114;
   $115 = $2;
   $116 = (_regdefault($115)|0);
   $3 = $116;
  }
  }
 } while(0);
 $117 = $3;
 $1 = $117;
 $118 = $1;
 STACKTOP = sp;return ($118|0);
}
function _reginsert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = HEAP32[4296]|0;
 $8 = ($7|0)==(19089|0);
 if ($8) {
  $9 = HEAP32[4295]|0;
  $10 = (($9) + 3)|0;
  HEAP32[4295] = $10;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[4296]|0;
 $4 = $11;
 $12 = HEAP32[4296]|0;
 $13 = ((($12)) + 3|0);
 HEAP32[4296] = $13;
 $14 = HEAP32[4296]|0;
 $5 = $14;
 while(1) {
  $15 = $4;
  $16 = $3;
  $17 = ($15>>>0)>($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = ((($18)) + -1|0);
  $4 = $19;
  $20 = HEAP8[$19>>0]|0;
  $21 = $5;
  $22 = ((($21)) + -1|0);
  $5 = $22;
  HEAP8[$22>>0] = $20;
 }
 $23 = $3;
 $6 = $23;
 $24 = $2;
 $25 = $24&255;
 $26 = $6;
 $27 = ((($26)) + 1|0);
 $6 = $27;
 HEAP8[$26>>0] = $25;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = 0;
 $30 = $6;
 $31 = ((($30)) + 1|0);
 $6 = $31;
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return;
}
function _regdefault($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = HEAP32[4293]|0;
 $7 = (_strcspn($6,11392)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)<=(0);
 if ($9) {
  _regerror_jsvim(11404);
  $1 = 0;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 $10 = HEAP32[4293]|0;
 $11 = $3;
 $12 = (($10) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $4 = $13;
 $14 = $3;
 $15 = ($14|0)>(1);
 do {
  if ($15) {
   $16 = $4;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(42);
   if (!($18)) {
    $19 = $4;
    $20 = $19 << 24 >> 24;
    $21 = ($20|0)==(43);
    if (!($21)) {
     $22 = $4;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)==(63);
     if (!($24)) {
      break;
     }
    }
   }
   $25 = $3;
   $26 = (($25) + -1)|0;
   $3 = $26;
  }
 } while(0);
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 | 1;
 HEAP32[$27>>2] = $29;
 $30 = $3;
 $31 = ($30|0)==(1);
 if ($31) {
  $32 = $2;
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 | 2;
  HEAP32[$32>>2] = $34;
 }
 $35 = (_regnode(8)|0);
 $5 = $35;
 while(1) {
  $36 = $3;
  $37 = ($36|0)>(0);
  if (!($37)) {
   break;
  }
  $38 = HEAP32[4293]|0;
  $39 = ((($38)) + 1|0);
  HEAP32[4293] = $39;
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  _regc($41);
  $42 = $3;
  $43 = (($42) + -1)|0;
  $3 = $43;
 }
 _regc(0);
 $44 = $5;
 $1 = $44;
 $45 = $1;
 STACKTOP = sp;return ($45|0);
}
function _regexec_jsvim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  _regerror_jsvim(11422);
  $3 = 0;
  $81 = $3;
  STACKTOP = sp;return ($81|0);
 }
 $12 = $4;
 $13 = ((($12)) + 92|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(156);
 if ($16) {
  _regerror_jsvim(11437);
  $3 = 0;
  $81 = $3;
  STACKTOP = sp;return ($81|0);
 }
 $17 = $4;
 $18 = ((($17)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $5;
  $7 = $21;
  while(1) {
   $22 = $7;
   $23 = $4;
   $24 = ((($23)) + 84|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = (_cstrchr($22,$27)|0);
   $7 = $28;
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $7;
   $31 = $4;
   $32 = ((($31)) + 84|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $4;
   $35 = ((($34)) + 88|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_cstrncmp($30,$33,$36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    break;
   }
   $39 = $7;
   $40 = ((($39)) + 1|0);
   $7 = $40;
  }
  $41 = $7;
  $42 = ($41|0)==(0|0);
  if ($42) {
   $3 = 0;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  }
 }
 $43 = $6;
 $44 = ($43|0)!=(0);
 $45 = $5;
 $$sink = $44 ? $45 : 0;
 HEAP32[4297] = $$sink;
 $46 = $4;
 $47 = ((($46)) + 81|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)!=(0);
 if ($49) {
  $50 = $4;
  $51 = $5;
  $52 = (_regtry($50,$51)|0);
  $3 = $52;
  $81 = $3;
  STACKTOP = sp;return ($81|0);
 }
 $53 = $5;
 $7 = $53;
 $54 = $4;
 $55 = ((($54)) + 80|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = ($57|0)!=(0);
 L23: do {
  if ($58) {
   while(1) {
    $59 = $7;
    $60 = $4;
    $61 = ((($60)) + 80|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = (_cstrchr($59,$63)|0);
    $7 = $64;
    $65 = ($64|0)!=(0|0);
    if (!($65)) {
     break L23;
    }
    $66 = $4;
    $67 = $7;
    $68 = (_regtry($66,$67)|0);
    $69 = ($68|0)!=(0);
    if ($69) {
     break;
    }
    $70 = $7;
    $71 = ((($70)) + 1|0);
    $7 = $71;
   }
   $3 = 1;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  } else {
   while(1) {
    $72 = $4;
    $73 = $7;
    $74 = (_regtry($72,$73)|0);
    $75 = ($74|0)!=(0);
    if ($75) {
     break;
    }
    $76 = $7;
    $77 = ((($76)) + 1|0);
    $7 = $77;
    $78 = HEAP8[$76>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = ($79|0)!=(0);
    if (!($80)) {
     break L23;
    }
   }
   $3 = 1;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  }
 } while(0);
 $3 = 0;
 $81 = $3;
 STACKTOP = sp;return ($81|0);
}
function _cstrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = HEAP32[(3468)>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $4;
 $10 = ($9>>>0)<(128);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $4;
  $12 = (_islower($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $4;
   $15 = $14 & 95;
   $17 = $15;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $16 = $4;
  $17 = $16;
 }
 $6 = $17;
 $18 = $3;
 $5 = $18;
 while(1) {
  $19 = $5;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 15;
   break;
  }
  $23 = HEAP32[(3468)>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27>>>0)<(128);
   if ($28) {
    $29 = $5;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = (_islower($31)|0);
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = $5;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = $36 & 95;
     $43 = $37;
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $38 = $5;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $43 = $40;
  }
  $41 = $6;
  $42 = ($43|0)==($41|0);
  $44 = $5;
  if ($42) {
   label = 13;
   break;
  }
  $45 = ((($44)) + 1|0);
  $5 = $45;
 }
 if ((label|0) == 13) {
  $2 = $44;
  $46 = $2;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 15) {
  $2 = 0;
  $46 = $2;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _cstrncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = HEAP32[(3468)>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $4;
  $10 = $5;
  $11 = $6;
  $12 = (_strncmp($9,$10,$11)|0);
  $3 = $12;
  $109 = $3;
  STACKTOP = sp;return ($109|0);
 }
 while(1) {
  $13 = $6;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = $5;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = HEAP32[(3468)>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27>>>0)<(128);
   if ($28) {
    $29 = $4;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = (_islower($31)|0);
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = $4;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = $36 & 95;
     $60 = $37;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $38 = $4;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $60 = $40;
  }
  $41 = HEAP32[(3468)>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $5;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45>>>0)<(128);
   if ($46) {
    $47 = $5;
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (_islower($49)|0);
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = $5;
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = $54 & 95;
     $61 = $55;
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $56 = $5;
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   $61 = $58;
  }
  $59 = ($60|0)==($61|0);
  if (!($59)) {
   break;
  }
  $62 = $4;
  $63 = ((($62)) + 1|0);
  $4 = $63;
  $64 = $5;
  $65 = ((($64)) + 1|0);
  $5 = $65;
  $66 = $6;
  $67 = (($66) + -1)|0;
  $6 = $67;
 }
 $68 = $6;
 $69 = ($68|0)==(0);
 if ($69) {
  $3 = 0;
  $109 = $3;
  STACKTOP = sp;return ($109|0);
 }
 $70 = HEAP32[(3468)>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $4;
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = ($74>>>0)<(128);
  if ($75) {
   $76 = $4;
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = (_islower($78)|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    $81 = $4;
    $82 = HEAP8[$81>>0]|0;
    $83 = $82 << 24 >> 24;
    $84 = $83 & 95;
    $107 = $84;
   } else {
    label = 24;
   }
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  $85 = $4;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  $107 = $87;
 }
 $88 = HEAP32[(3468)>>2]|0;
 $89 = ($88|0)!=(0);
 if ($89) {
  $90 = $5;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91 << 24 >> 24;
  $93 = ($92>>>0)<(128);
  if ($93) {
   $94 = $5;
   $95 = HEAP8[$94>>0]|0;
   $96 = $95 << 24 >> 24;
   $97 = (_islower($96)|0);
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = $5;
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $102 = $101 & 95;
    $108 = $102;
   } else {
    label = 29;
   }
  } else {
   label = 29;
  }
 } else {
  label = 29;
 }
 if ((label|0) == 29) {
  $103 = $5;
  $104 = HEAP8[$103>>0]|0;
  $105 = $104 << 24 >> 24;
  $108 = $105;
 }
 $106 = (($107) - ($108))|0;
 $3 = $106;
 $109 = $3;
 STACKTOP = sp;return ($109|0);
}
function _regtry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 HEAP32[4298] = $8;
 $9 = $3;
 HEAP32[4299] = $9;
 $10 = $3;
 $11 = ((($10)) + 40|0);
 HEAP32[4300] = $11;
 $12 = $3;
 $6 = $12;
 $13 = $3;
 $14 = ((($13)) + 40|0);
 $7 = $14;
 $5 = 10;
 while(1) {
  $15 = $5;
  $16 = ($15|0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = ((($17)) + 4|0);
  $6 = $18;
  HEAP32[$17>>2] = 0;
  $19 = $7;
  $20 = ((($19)) + 4|0);
  $7 = $20;
  HEAP32[$19>>2] = 0;
  $21 = $5;
  $22 = (($21) + -1)|0;
  $5 = $22;
 }
 $23 = $3;
 $24 = ((($23)) + 92|0);
 $25 = ((($24)) + 1|0);
 $26 = (_regmatch($25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $4;
  $29 = $3;
  HEAP32[$29>>2] = $28;
  $30 = HEAP32[4298]|0;
  $31 = $3;
  $32 = ((($31)) + 40|0);
  HEAP32[$32>>2] = $30;
  $2 = 1;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 } else {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _regmatch($0) {
 $0 = $0|0;
 var $$old1 = 0, $$old3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = $0;
 $18 = $2;
 $3 = $18;
 L1: while(1) {
  $19 = $3;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 83;
   break;
  }
  $21 = $3;
  $22 = (_regnext($21)|0);
  $4 = $22;
  $23 = $3;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  L4: do {
   switch ($25|0) {
   case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21:  {
    label = 53;
    break L1;
    break;
   }
   case 39: case 38: case 37: case 36: case 35: case 34: case 33: case 32: case 31:  {
    label = 58;
    break L1;
    break;
   }
   case 11: case 10:  {
    label = 70;
    break L1;
    break;
   }
   case 0:  {
    label = 80;
    break L1;
    break;
   }
   case 1:  {
    $26 = HEAP32[4298]|0;
    $27 = HEAP32[4297]|0;
    $28 = ($26|0)!=($27|0);
    if ($28) {
     label = 5;
     break L1;
    }
    break;
   }
   case 2:  {
    $29 = HEAP32[4298]|0;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)!=(0);
    if ($32) {
     label = 7;
     break L1;
    }
    break;
   }
   case 64:  {
    $33 = HEAP32[4298]|0;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $5 = $35;
    $36 = ($35|0)==(0);
    if ($36) {
     label = 16;
     break L1;
    }
    $37 = $5;
    $38 = ($37>>>0)<(128);
    $39 = $5;
    if ($38) {
     $40 = (_isalnum($39)|0);
     $41 = ($40|0)!=(0);
     $42 = $5;
     $43 = ($42|0)==(95);
     $or$cond = $41 | $43;
     if (!($or$cond)) {
      label = 16;
      break L1;
     }
    } else {
     $$old1 = ($39|0)==(95);
     if (!($$old1)) {
      label = 16;
      break L1;
     }
    }
    $44 = HEAP32[4298]|0;
    $45 = HEAP32[4297]|0;
    $46 = ($44|0)!=($45|0);
    if ($46) {
     $47 = HEAP32[4298]|0;
     $48 = ((($47)) + -1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = ($50>>>0)<(128);
     if ($51) {
      $52 = HEAP32[4298]|0;
      $53 = ((($52)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = (_isalnum($55)|0);
      $57 = ($56|0)!=(0);
      if ($57) {
       label = 16;
       break L1;
      }
     }
     $58 = HEAP32[4298]|0;
     $59 = ((($58)) + -1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = ($61|0)==(95);
     if ($62) {
      label = 16;
      break L1;
     }
    }
    break;
   }
   case 65:  {
    $63 = HEAP32[4298]|0;
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $6 = $65;
    $66 = ($65|0)!=(0);
    do {
     if ($66) {
      $67 = $6;
      $68 = ($67>>>0)<(128);
      $69 = $6;
      if ($68) {
       $70 = (_isalnum($69)|0);
       $71 = ($70|0)!=(0);
       $72 = $6;
       $73 = ($72|0)==(95);
       $or$cond4 = $71 | $73;
       if ($or$cond4) {
        label = 25;
        break L1;
       } else {
        break;
       }
      } else {
       $$old3 = ($69|0)==(95);
       if ($$old3) {
        label = 25;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $74 = HEAP32[4298]|0;
    $75 = HEAP32[4297]|0;
    $76 = ($74|0)==($75|0);
    if ($76) {
     label = 25;
     break L1;
    }
    $77 = HEAP32[4298]|0;
    $78 = ((($77)) + -1|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80>>>0)<(128);
    if ($81) {
     $82 = HEAP32[4298]|0;
     $83 = ((($82)) + -1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (_isalnum($85)|0);
     $87 = ($86|0)!=(0);
     if ($87) {
      break L4;
     }
    }
    $88 = HEAP32[4298]|0;
    $89 = ((($88)) + -1|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = ($91|0)==(95);
    if (!($92)) {
     label = 25;
     break L1;
    }
    break;
   }
   case 3:  {
    $93 = HEAP32[4298]|0;
    $94 = HEAP8[$93>>0]|0;
    $95 = $94 << 24 >> 24;
    $96 = ($95|0)==(0);
    if ($96) {
     label = 27;
     break L1;
    }
    $97 = HEAP32[4298]|0;
    $98 = ((($97)) + 1|0);
    HEAP32[4298] = $98;
    break;
   }
   case 8:  {
    $99 = $3;
    $100 = ((($99)) + 3|0);
    $8 = $100;
    $101 = HEAP32[(3468)>>2]|0;
    $102 = ($101|0)!=(0);
    if ($102) {
     $103 = $8;
     $104 = HEAP8[$103>>0]|0;
     $105 = $104 << 24 >> 24;
     $106 = ($105>>>0)<(128);
     if ($106) {
      $107 = $8;
      $108 = HEAP8[$107>>0]|0;
      $109 = $108 << 24 >> 24;
      $110 = (_islower($109)|0);
      $111 = ($110|0)!=(0);
      if ($111) {
       $112 = $8;
       $113 = HEAP8[$112>>0]|0;
       $114 = $113 << 24 >> 24;
       $115 = $114 & 95;
       $138 = $115;
      } else {
       label = 33;
      }
     } else {
      label = 33;
     }
    } else {
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $116 = $8;
     $117 = HEAP8[$116>>0]|0;
     $118 = $117 << 24 >> 24;
     $138 = $118;
    }
    $119 = HEAP32[(3468)>>2]|0;
    $120 = ($119|0)!=(0);
    if ($120) {
     $121 = HEAP32[4298]|0;
     $122 = HEAP8[$121>>0]|0;
     $123 = $122 << 24 >> 24;
     $124 = ($123>>>0)<(128);
     if ($124) {
      $125 = HEAP32[4298]|0;
      $126 = HEAP8[$125>>0]|0;
      $127 = $126 << 24 >> 24;
      $128 = (_islower($127)|0);
      $129 = ($128|0)!=(0);
      if ($129) {
       $130 = HEAP32[4298]|0;
       $131 = HEAP8[$130>>0]|0;
       $132 = $131 << 24 >> 24;
       $133 = $132 & 95;
       $139 = $133;
      } else {
       label = 38;
      }
     } else {
      label = 38;
     }
    } else {
     label = 38;
    }
    if ((label|0) == 38) {
     label = 0;
     $134 = HEAP32[4298]|0;
     $135 = HEAP8[$134>>0]|0;
     $136 = $135 << 24 >> 24;
     $139 = $136;
    }
    $137 = ($138|0)!=($139|0);
    if ($137) {
     label = 40;
     break L1;
    }
    $140 = $8;
    $141 = (_strlen($140)|0);
    $7 = $141;
    $142 = $7;
    $143 = ($142|0)>(1);
    if ($143) {
     $144 = $8;
     $145 = HEAP32[4298]|0;
     $146 = $7;
     $147 = (_cstrncmp($144,$145,$146)|0);
     $148 = ($147|0)!=(0);
     if ($148) {
      label = 43;
      break L1;
     }
    }
    $149 = $7;
    $150 = HEAP32[4298]|0;
    $151 = (($150) + ($149)|0);
    HEAP32[4298] = $151;
    break;
   }
   case 4:  {
    $152 = HEAP32[4298]|0;
    $153 = HEAP8[$152>>0]|0;
    $154 = $153 << 24 >> 24;
    $155 = ($154|0)==(0);
    if ($155) {
     label = 47;
     break L1;
    }
    $156 = $3;
    $157 = ((($156)) + 3|0);
    $158 = HEAP32[4298]|0;
    $159 = HEAP8[$158>>0]|0;
    $160 = $159 << 24 >> 24;
    $161 = (_cstrchr($157,$160)|0);
    $162 = ($161|0)==(0|0);
    if ($162) {
     label = 47;
     break L1;
    }
    $163 = HEAP32[4298]|0;
    $164 = ((($163)) + 1|0);
    HEAP32[4298] = $164;
    break;
   }
   case 5:  {
    $165 = HEAP32[4298]|0;
    $166 = HEAP8[$165>>0]|0;
    $167 = $166 << 24 >> 24;
    $168 = ($167|0)==(0);
    if ($168) {
     label = 51;
     break L1;
    }
    $169 = $3;
    $170 = ((($169)) + 3|0);
    $171 = HEAP32[4298]|0;
    $172 = HEAP8[$171>>0]|0;
    $173 = $172 << 24 >> 24;
    $174 = (_cstrchr($170,$173)|0);
    $175 = ($174|0)!=(0|0);
    if ($175) {
     label = 51;
     break L1;
    }
    $176 = HEAP32[4298]|0;
    $177 = ((($176)) + 1|0);
    HEAP32[4298] = $177;
    break;
   }
   case 7: case 9:  {
    break;
   }
   case 6:  {
    $212 = $4;
    $213 = HEAP8[$212>>0]|0;
    $214 = $213 << 24 >> 24;
    $215 = ($214|0)!=(6);
    if (!($215)) {
     label = 65;
     break L1;
    }
    $216 = $3;
    $217 = ((($216)) + 3|0);
    $4 = $217;
    break;
   }
   default: {
    label = 81;
    break L1;
   }
   }
  } while(0);
  $268 = $4;
  $3 = $268;
 }
 switch (label|0) {
  case 5: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 7: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 16: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 25: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 27: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 40: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 43: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 47: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 51: {
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 53: {
   $178 = $3;
   $179 = HEAP8[$178>>0]|0;
   $180 = $179 << 24 >> 24;
   $181 = (($180) - 20)|0;
   $9 = $181;
   $182 = HEAP32[4298]|0;
   $10 = $182;
   $183 = $4;
   $184 = (_regmatch($183)|0);
   $185 = ($184|0)!=(0);
   if (!($185)) {
    $1 = 0;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   $186 = HEAP32[4299]|0;
   $187 = $9;
   $188 = (($186) + ($187<<2)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)==(0|0);
   if ($190) {
    $191 = $10;
    $192 = HEAP32[4299]|0;
    $193 = $9;
    $194 = (($192) + ($193<<2)|0);
    HEAP32[$194>>2] = $191;
   }
   $1 = 1;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 58: {
   $195 = $3;
   $196 = HEAP8[$195>>0]|0;
   $197 = $196 << 24 >> 24;
   $198 = (($197) - 30)|0;
   $11 = $198;
   $199 = HEAP32[4298]|0;
   $12 = $199;
   $200 = $4;
   $201 = (_regmatch($200)|0);
   $202 = ($201|0)!=(0);
   if (!($202)) {
    $1 = 0;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   $203 = HEAP32[4300]|0;
   $204 = $11;
   $205 = (($203) + ($204<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)==(0|0);
   if ($207) {
    $208 = $12;
    $209 = HEAP32[4300]|0;
    $210 = $11;
    $211 = (($209) + ($210<<2)|0);
    HEAP32[$211>>2] = $208;
   }
   $1 = 1;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 65: {
   while(1) {
    label = 0;
    $218 = HEAP32[4298]|0;
    $13 = $218;
    $219 = $3;
    $220 = ((($219)) + 3|0);
    $221 = (_regmatch($220)|0);
    $222 = ($221|0)!=(0);
    if ($222) {
     label = 66;
     break;
    }
    $223 = $13;
    HEAP32[4298] = $223;
    $224 = $3;
    $225 = (_regnext($224)|0);
    $3 = $225;
    $226 = $3;
    $227 = ($226|0)!=(0|0);
    if (!($227)) {
     label = 69;
     break;
    }
    $228 = $3;
    $229 = HEAP8[$228>>0]|0;
    $230 = $229 << 24 >> 24;
    $231 = ($230|0)==(6);
    if ($231) {
     label = 65;
    } else {
     label = 69;
     break;
    }
   }
   if ((label|0) == 66) {
    $1 = 1;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   else if ((label|0) == 69) {
    $1 = 0;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   break;
  }
  case 70: {
   $14 = 0;
   $232 = $4;
   $233 = HEAP8[$232>>0]|0;
   $234 = $233 << 24 >> 24;
   $235 = ($234|0)==(8);
   if ($235) {
    $236 = $4;
    $237 = ((($236)) + 3|0);
    $238 = HEAP8[$237>>0]|0;
    $14 = $238;
   }
   $239 = $3;
   $240 = HEAP8[$239>>0]|0;
   $241 = $240 << 24 >> 24;
   $242 = ($241|0)==(10);
   $243 = $242 ? 0 : 1;
   $17 = $243;
   $244 = HEAP32[4298]|0;
   $16 = $244;
   $245 = $3;
   $246 = ((($245)) + 3|0);
   $247 = (_regrepeat($246)|0);
   $15 = $247;
   while(1) {
    $248 = $15;
    $249 = $17;
    $250 = ($248|0)>=($249|0);
    if (!($250)) {
     label = 79;
     break;
    }
    $251 = $14;
    $252 = $251 << 24 >> 24;
    $253 = ($252|0)==(0);
    if ($253) {
     label = 76;
    } else {
     $254 = HEAP32[4298]|0;
     $255 = HEAP8[$254>>0]|0;
     $256 = $255 << 24 >> 24;
     $257 = $14;
     $258 = $257 << 24 >> 24;
     $259 = ($256|0)==($258|0);
     if ($259) {
      label = 76;
     }
    }
    if ((label|0) == 76) {
     label = 0;
     $260 = $4;
     $261 = (_regmatch($260)|0);
     $262 = ($261|0)!=(0);
     if ($262) {
      label = 77;
      break;
     }
    }
    $263 = $15;
    $264 = (($263) + -1)|0;
    $15 = $264;
    $265 = $16;
    $266 = $15;
    $267 = (($265) + ($266)|0);
    HEAP32[4298] = $267;
   }
   if ((label|0) == 77) {
    $1 = 1;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   else if ((label|0) == 79) {
    $1 = 0;
    $269 = $1;
    STACKTOP = sp;return ($269|0);
   }
   break;
  }
  case 80: {
   $1 = 1;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 81: {
   _regerror_jsvim(11455);
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
  case 83: {
   _regerror_jsvim(11473);
   $1 = 0;
   $269 = $1;
   STACKTOP = sp;return ($269|0);
   break;
  }
 }
 return (0)|0;
}
function _regrepeat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = HEAP32[4298]|0;
 $3 = $5;
 $6 = $1;
 $7 = ((($6)) + 3|0);
 $4 = $7;
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 L1: do {
  switch ($10|0) {
  case 3:  {
   $11 = $3;
   $12 = (_strlen($11)|0);
   $2 = $12;
   $13 = $2;
   $14 = $3;
   $15 = (($14) + ($13)|0);
   $3 = $15;
   break;
  }
  case 8:  {
   while(1) {
    $16 = HEAP32[(3468)>>2]|0;
    $17 = ($16|0)!=(0);
    if ($17) {
     $18 = $4;
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 << 24 >> 24;
     $21 = ($20>>>0)<(128);
     if ($21) {
      $22 = $4;
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 << 24 >> 24;
      $25 = (_islower($24)|0);
      $26 = ($25|0)!=(0);
      if ($26) {
       $27 = $4;
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 << 24 >> 24;
       $30 = $29 & 95;
       $53 = $30;
      } else {
       label = 7;
      }
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     label = 0;
     $31 = $4;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $53 = $33;
    }
    $34 = HEAP32[(3468)>>2]|0;
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $3;
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 << 24 >> 24;
     $39 = ($38>>>0)<(128);
     if ($39) {
      $40 = $3;
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      $43 = (_islower($42)|0);
      $44 = ($43|0)!=(0);
      if ($44) {
       $45 = $3;
       $46 = HEAP8[$45>>0]|0;
       $47 = $46 << 24 >> 24;
       $48 = $47 & 95;
       $54 = $48;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $49 = $3;
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $54 = $51;
    }
    $52 = ($53|0)==($54|0);
    if (!($52)) {
     break L1;
    }
    $55 = $2;
    $56 = (($55) + 1)|0;
    $2 = $56;
    $57 = $3;
    $58 = ((($57)) + 1|0);
    $3 = $58;
   }
   break;
  }
  case 4:  {
   while(1) {
    $59 = $3;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     break L1;
    }
    $63 = $4;
    $64 = $3;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (_strchr($63,$66)|0);
    $68 = ($67|0)!=(0|0);
    if (!($68)) {
     break L1;
    }
    $69 = $2;
    $70 = (($69) + 1)|0;
    $2 = $70;
    $71 = $3;
    $72 = ((($71)) + 1|0);
    $3 = $72;
   }
   break;
  }
  case 5:  {
   while(1) {
    $73 = $3;
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 << 24 >> 24;
    $76 = ($75|0)!=(0);
    if (!($76)) {
     break L1;
    }
    $77 = $4;
    $78 = $3;
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = (_strchr($77,$80)|0);
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     break L1;
    }
    $83 = $2;
    $84 = (($83) + 1)|0;
    $2 = $84;
    $85 = $3;
    $86 = ((($85)) + 1|0);
    $3 = $86;
   }
   break;
  }
  default: {
   _regerror_jsvim(11492);
   $2 = 0;
  }
  }
 } while(0);
 $87 = $3;
 HEAP32[4298] = $87;
 $88 = $2;
 STACKTOP = sp;return ($88|0);
}
function _update_sline() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _do_sline();
 $0 = HEAP32[4327]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 _xvUpdateScr($2,1);
 return;
}
function _do_sline() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = HEAP32[4327]|0;
 $0 = $9;
 $10 = HEAP32[4327]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $1 = $12;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $0;
 $26 = ((($25)) + 36|0);
 $27 = (_flexgetstr($26)|0);
 $2 = $27;
 $28 = $1;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30) + ($33<<4)|0);
 $7 = $34;
 $35 = $7;
 $36 = HEAP32[$35>>2]|0;
 $3 = $36;
 $37 = $3;
 $38 = $0;
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($37) + ($40)|0);
 $42 = ((($41)) + -1|0);
 $4 = $42;
 while(1) {
  $43 = $2;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   break;
  }
  $47 = $3;
  $48 = $4;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $2;
  $51 = ((($50)) + 1|0);
  $2 = $51;
  $52 = HEAP8[$50>>0]|0;
  $53 = $3;
  $54 = ((($53)) + 1|0);
  $3 = $54;
  HEAP8[$53>>0] = $52;
 }
 while(1) {
  $55 = $3;
  $56 = $4;
  $57 = ($55>>>0)<($56>>>0);
  $58 = $3;
  if (!($57)) {
   break;
  }
  $59 = ((($58)) + 1|0);
  $3 = $59;
  HEAP8[$58>>0] = 32;
 }
 HEAP8[$58>>0] = 0;
 $60 = HEAP32[(4164)>>2]|0;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = HEAP32[4325]|0;
  switch ($62|0) {
  case 2:  {
   $8 = 11508;
   break;
  }
  case 3:  {
   $8 = 11520;
   break;
  }
  default: {
   $8 = 0;
  }
  }
  $63 = $8;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = $0;
   $66 = ((($65)) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67>>>0)>(20);
   if ($68) {
    $69 = $7;
    $70 = HEAP32[$69>>2]|0;
    $71 = $0;
    $72 = ((($71)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($70) + ($73)|0);
    $75 = ((($74)) + -20|0);
    $76 = $8;
    $77 = $8;
    $78 = (_strlen($77)|0);
    (_strncpy($75,$76,$78)|0);
   }
  }
 }
 $79 = HEAP32[(3876)>>2]|0;
 $80 = ($79|0)!=(0);
 if ($80) {
  $87 = 1;
 } else {
  $81 = HEAP32[4326]|0;
  $82 = ((($81)) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 & 2;
  $85 = ($84|0)!=(0);
  $87 = $85;
 }
 $86 = $87 ? 2 : 1;
 $6 = $86;
 $88 = $0;
 $89 = ((($88)) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) - 1)|0;
 $92 = (($91) - 1)|0;
 $5 = $92;
 while(1) {
  $93 = $5;
  $94 = ($93|0)>=(0);
  if (!($94)) {
   break;
  }
  $95 = $6;
  $96 = $95&255;
  $97 = $7;
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100)|0);
  HEAP8[$101>>0] = $96;
  $102 = $5;
  $103 = (($102) + -1)|0;
  $5 = $103;
 }
 $104 = $0;
 $105 = ((($104)) + 24|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) - 1)|0;
 $108 = $7;
 $109 = ((($108)) + 8|0);
 HEAP32[$109>>2] = $107;
 $110 = $7;
 $111 = ((($110)) + 12|0);
 HEAP32[$111>>2] = 8;
 $112 = HEAP32[(3876)>>2]|0;
 $113 = ($112|0)!=(0);
 if ($113) {
  label = 25;
 } else {
  $114 = HEAP32[4326]|0;
  $115 = ((($114)) + 28|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & 2;
  $118 = ($117|0)!=(0);
  if ($118) {
   label = 25;
  }
 }
 if ((label|0) == 25) {
  $119 = $7;
  $120 = ((($119)) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 | 32;
  HEAP32[$120>>2] = $122;
 }
 $123 = $0;
 $124 = ((($123)) + 32|0);
 $125 = HEAP32[$124>>2]|0;
 _xvMarkDirty($125);
 STACKTOP = sp;return;
}
function _update_cline() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = HEAP32[4327]|0;
 $0 = $10;
 $11 = HEAP32[4327]|0;
 $12 = ((($11)) + 36|0);
 $13 = (_flexgetstr($12)|0);
 $8 = $13;
 $14 = (_get_pos()|0);
 $9 = $14;
 $15 = $0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) + ($22<<4)|0);
 $1 = $23;
 $2 = 0;
 $24 = $0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - 1)|0;
 $4 = $27;
 $28 = $9;
 $29 = $4;
 $30 = ($28>>>0)>($29>>>0);
 if ($30) {
  $31 = $9;
  $32 = $4;
  $33 = (($31>>>0) / ($32>>>0))&-1;
  $34 = $4;
  $35 = Math_imul($33, $34)|0;
  $36 = $35;
 } else {
  $36 = 0;
 }
 $6 = $36;
 $37 = $8;
 $38 = $6;
 $39 = (($37) + ($38)|0);
 $40 = (_strlen($39)|0);
 $3 = $40;
 $41 = $9;
 $42 = $4;
 $43 = ($41>>>0)>($42>>>0);
 $44 = $9;
 if ($43) {
  $45 = $6;
  $46 = (($44) - ($45))|0;
  $47 = (($46) + 1)|0;
  $48 = $47;
 } else {
  $48 = $44;
 }
 $7 = $48;
 $49 = $3;
 $50 = $4;
 $51 = ($49>>>0)>($50>>>0);
 if ($51) {
  $52 = $4;
  $3 = $52;
 }
 $53 = $6;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $1;
  $56 = HEAP32[$55>>2]|0;
  $57 = $2;
  $58 = (($57) + 1)|0;
  $2 = $58;
  $59 = (($56) + ($57)|0);
  HEAP8[$59>>0] = 60;
 }
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = $2;
 $63 = (($61) + ($62)|0);
 $64 = $8;
 $65 = $6;
 $66 = (($64) + ($65)|0);
 $67 = $3;
 (_strncpy($63,$66,$67)|0);
 $68 = $3;
 $69 = $2;
 $70 = (($68) + ($69))|0;
 $71 = $1;
 $72 = ((($71)) + 8|0);
 HEAP32[$72>>2] = $70;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = $3;
 $76 = $2;
 $77 = (($75) + ($76))|0;
 $78 = (($74) + ($77)|0);
 HEAP8[$78>>0] = 0;
 $79 = $1;
 $80 = ((($79)) + 12|0);
 HEAP32[$80>>2] = 20;
 $81 = HEAP32[(3876)>>2]|0;
 $82 = ($81|0)!=(0);
 if ($82) {
  label = 11;
 } else {
  $83 = HEAP32[4326]|0;
  $84 = ((($83)) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $85 & 2;
  $87 = ($86|0)!=(0);
  if ($87) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $88 = $1;
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 | 32;
  HEAP32[$89>>2] = $91;
 }
 $92 = HEAP32[(3876)>>2]|0;
 $93 = ($92|0)!=(0);
 if ($93) {
  $100 = 1;
 } else {
  $94 = HEAP32[4326]|0;
  $95 = ((($94)) + 28|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96 & 2;
  $98 = ($97|0)!=(0);
  $100 = $98;
 }
 $99 = $100 ? 2 : 1;
 $101 = $99&255;
 $102 = $1;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 HEAP8[$104>>0] = $101;
 $105 = $1;
 $106 = ((($105)) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) - 1)|0;
 $5 = $108;
 while(1) {
  $109 = $5;
  $110 = ($109|0)>=(1);
  if (!($110)) {
   break;
  }
  $111 = $1;
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $5;
  $115 = (($113) + ($114)|0);
  HEAP8[$115>>0] = 0;
  $116 = $5;
  $117 = (($116) + -1)|0;
  $5 = $117;
 }
 $118 = $0;
 $119 = ((($118)) + 32|0);
 $120 = HEAP32[$119>>2]|0;
 _xvUpdateScr($120,1);
 $121 = $0;
 $122 = ((($121)) + 16|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 60|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $0;
 $127 = ((($126)) + 16|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $0;
 $130 = ((($129)) + 32|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $7;
 FUNCTION_TABLE_viii[$125 & 31]($128,$131,$132);
 STACKTOP = sp;return;
}
function _updateline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = HEAP32[4327]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = HEAP32[4327]|0;
 $2 = $10;
 while(1) {
  $11 = HEAP32[4327]|0;
  $6 = $11;
  $12 = $6;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $6;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($21>>>0)<($26>>>0);
   if (!($27)) {
    $28 = $3;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $6;
    $32 = ((($31)) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($30>>>0)>($35>>>0);
    if (!($36)) {
     $37 = $6;
     $38 = ((($37)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $3;
     $41 = (_cntplines($39,$40)|0);
     $5 = $41;
     $42 = $3;
     $43 = $5;
     $44 = $6;
     $45 = ((($44)) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($43) + ($46))|0;
     $48 = $3;
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (_line_to_new($42,$47,$50)|0);
     $4 = $51;
     $52 = $1;
     $53 = ($52|0)!=(0);
     if ($53) {
      $54 = $6;
      $55 = ((($54)) + 20|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $5;
      $58 = (($56) - ($57))|0;
      $59 = (($58) - 1)|0;
      $4 = $59;
      _file_to_new();
     }
     $60 = $5;
     $61 = $6;
     $62 = ((($61)) + 28|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($60) + ($63))|0;
     $65 = $4;
     _xvUpdateScr($64,$65);
    }
   }
  }
  $66 = $6;
  $67 = (_xvNextDisplayedWindow($66)|0);
  HEAP32[4327] = $67;
  $68 = HEAP32[4327]|0;
  $69 = ($68|0)!=(0|0);
  if ($69) {
   $70 = HEAP32[4327]|0;
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72;
  } else {
   $73 = 0;
  }
  HEAP32[4326] = $73;
  $74 = HEAP32[4327]|0;
  $75 = $2;
  $76 = ($74|0)!=($75|0);
  if (!($76)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _line_to_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $13 = sp + 80|0;
 $21 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $22 = HEAP32[4327]|0;
 $7 = $22;
 $14 = 0;
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $10 = $25;
 $26 = $5;
 $15 = $26;
 $17 = 0;
 $16 = 0;
 $27 = $7;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $15;
 $33 = (($31) + ($32<<4)|0);
 $9 = $33;
 $11 = 0;
 $18 = 0;
 $19 = 0;
 $12 = 0;
 $34 = HEAP32[(3708)>>2]|0;
 $35 = ($34|0)!=(0);
 L1: do {
  if ($35) {
   HEAP32[(17216)>>2] = 0;
   HEAP32[(17212)>>2] = 0;
   $36 = $6;
   HEAP32[$vararg_buffer>>2] = $36;
   (_lformat(17204,11776,$vararg_buffer)|0);
   $37 = $9;
   $38 = HEAP32[$37>>2]|0;
   $39 = (_flexgetstr(17204)|0);
   (_strcpy($38,$39)|0);
   $16 = 0;
   while(1) {
    $40 = $16;
    $41 = ($40|0)<(8);
    if (!($41)) {
     break L1;
    }
    $42 = $9;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $16;
    $46 = (($44) + ($45)|0);
    HEAP8[$46>>0] = 0;
    $47 = $16;
    $48 = (($47) + 1)|0;
    $16 = $48;
   }
  }
 } while(0);
 while(1) {
  $49 = $12;
  $50 = ($49|0)!=(0);
  $51 = $50 ^ 1;
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = ($52|0)>(0);
  do {
   if ($53) {
    $54 = $14;
    $55 = (($54) + -1)|0;
    $14 = $55;
    $56 = (($13) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $8 = $58;
   } else {
    $59 = $11;
    $60 = $18;
    $61 = ($59|0)==($60|0);
    if ($61) {
     $19 = 0;
    }
    $62 = $10;
    $63 = $11;
    $64 = (($63) + 1)|0;
    $11 = $64;
    $65 = (($62) + ($63)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $8 = $67;
    $68 = $8;
    $69 = ($68|0)==(0);
    if ($69) {
     $70 = HEAP32[(3564)>>2]|0;
     $71 = ($70|0)!=(0);
     if (!($71)) {
      break;
     }
     $72 = $14;
     $73 = (($72) + 1)|0;
     $14 = $73;
     $74 = (($13) + ($72)|0);
     HEAP8[$74>>0] = 0;
     $8 = 36;
     break;
    }
    $75 = $8;
    $76 = $17;
    $77 = (_vischar($75,$21,$76)|0);
    $20 = $77;
    $78 = $14;
    $79 = $20;
    $80 = (($78) + ($79))|0;
    $81 = ($80>>>0)>(32);
    if ($81) {
     $82 = $14;
     $83 = (32 - ($82))|0;
     $20 = $83;
    }
    while(1) {
     $84 = $20;
     $85 = ($84>>>0)>(1);
     $86 = HEAP32[$21>>2]|0;
     if (!($85)) {
      break;
     }
     $87 = $20;
     $88 = (($87) + -1)|0;
     $20 = $88;
     $89 = (($86) + ($88)|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $14;
     $92 = (($91) + 1)|0;
     $14 = $92;
     $93 = (($13) + ($91)|0);
     HEAP8[$93>>0] = $90;
    }
    $94 = HEAP8[$86>>0]|0;
    $95 = $94 << 24 >> 24;
    $8 = $95;
   }
  } while(0);
  $96 = $8;
  $97 = ($96|0)==(0);
  if ($97) {
   label = 19;
   break;
  }
  $108 = $16;
  $109 = $7;
  $110 = ((($109)) + 24|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($108>>>0)>=($111>>>0);
  if ($112) {
   $113 = $9;
   $114 = ((($113)) + 12|0);
   HEAP32[$114>>2] = 1;
   $115 = $16;
   $116 = $9;
   $117 = ((($116)) + 8|0);
   HEAP32[$117>>2] = $115;
   $118 = $9;
   $119 = HEAP32[$118>>2]|0;
   $120 = $16;
   $121 = (($119) + ($120)|0);
   HEAP8[$121>>0] = 0;
   $122 = $15;
   _xvMarkDirty($122);
   $123 = $15;
   $124 = (($123) + 1)|0;
   $15 = $124;
   $16 = 0;
   $125 = $7;
   $126 = ((($125)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $15;
   $131 = (($129) + ($130<<4)|0);
   $9 = $131;
  }
  $132 = $15;
  $133 = $7;
  $134 = ((($133)) + 32|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132>>>0)>=($135>>>0);
  if ($136) {
   label = 23;
   break;
  }
  $165 = $8;
  $166 = $165&255;
  $167 = $9;
  $168 = HEAP32[$167>>2]|0;
  $169 = $16;
  $170 = (($168) + ($169)|0);
  HEAP8[$170>>0] = $166;
  $171 = $19;
  $172 = $171&255;
  $173 = $9;
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $16;
  $177 = (($175) + ($176)|0);
  HEAP8[$177>>0] = $172;
  $178 = $16;
  $179 = (($178) + 1)|0;
  $16 = $179;
  $180 = $17;
  $181 = (($180) + 1)|0;
  $17 = $181;
 }
 if ((label|0) == 19) {
  $12 = 1;
  $98 = $9;
  $99 = ((($98)) + 12|0);
  HEAP32[$99>>2] = 1;
  $100 = $16;
  $101 = $9;
  $102 = ((($101)) + 8|0);
  HEAP32[$102>>2] = $100;
  $103 = $9;
  $104 = HEAP32[$103>>2]|0;
  $105 = $16;
  $106 = (($104) + ($105)|0);
  HEAP8[$106>>0] = 0;
  $107 = $15;
  _xvMarkDirty($107);
 }
 else if ((label|0) == 23) {
  $137 = $5;
  $15 = $137;
  while(1) {
   $138 = $15;
   $139 = $7;
   $140 = ((($139)) + 32|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($138>>>0)<($141>>>0);
   if (!($142)) {
    break;
   }
   $143 = $7;
   $144 = ((($143)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($145)) + 16|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $15;
   $149 = (($147) + ($148<<4)|0);
   $9 = $149;
   $150 = $9;
   $151 = ((($150)) + 12|0);
   HEAP32[$151>>2] = 2;
   $152 = $9;
   $153 = ((($152)) + 8|0);
   HEAP32[$153>>2] = 1;
   $154 = $9;
   $155 = HEAP32[$154>>2]|0;
   HEAP8[$155>>0] = 64;
   $156 = $9;
   $157 = HEAP32[$156>>2]|0;
   $158 = ((($157)) + 1|0);
   HEAP8[$158>>0] = 0;
   $159 = $9;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   HEAP8[$161>>0] = 0;
   $162 = $15;
   _xvMarkDirty($162);
   $163 = $15;
   $164 = (($163) + 1)|0;
   $15 = $164;
  }
  $3 = 0;
  $186 = $3;
  STACKTOP = sp;return ($186|0);
 }
 $182 = $15;
 $183 = $5;
 $184 = (($182) - ($183))|0;
 $185 = (($184) + 1)|0;
 $3 = $185;
 $186 = $3;
 STACKTOP = sp;return ($186|0);
}
function _file_to_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = HEAP32[4327]|0;
 $0 = $6;
 $7 = $0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(3660)>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $1 = $14;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $2 = $17;
 $18 = $2;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $3 = $20;
 while(1) {
  $21 = $1;
  $22 = $0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $2;
  $27 = HEAP32[4326]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)!=($29|0);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = $1;
  $33 = $3;
  $34 = (_line_to_new($31,$32,$33)|0);
  $4 = $34;
  $35 = $4;
  $36 = ($35|0)==(0);
  if ($36) {
   label = 6;
   break;
  }
  $40 = $4;
  $41 = $1;
  $42 = (($41) + ($40))|0;
  $1 = $42;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $2 = $45;
  $46 = $3;
  $47 = (($46) + 1)|0;
  $3 = $47;
 }
 if ((label|0) == 6) {
  $37 = $0;
  $38 = ((($37)) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $1 = $39;
 }
 $48 = $2;
 $49 = $0;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = $48;
 while(1) {
  $51 = $1;
  $52 = $0;
  $53 = ((($52)) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if (!($55)) {
   break;
  }
  $56 = $0;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $1;
  $62 = (($60) + ($61<<4)|0);
  $5 = $62;
  $63 = $5;
  $64 = ((($63)) + 12|0);
  HEAP32[$64>>2] = 2;
  $65 = $5;
  $66 = ((($65)) + 8|0);
  HEAP32[$66>>2] = 1;
  $67 = $5;
  $68 = HEAP32[$67>>2]|0;
  HEAP8[$68>>0] = 126;
  $69 = $5;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 1|0);
  HEAP8[$71>>0] = 0;
  $72 = $5;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  HEAP8[$74>>0] = 0;
  $75 = $1;
  _xvMarkDirty($75);
  $76 = $1;
  $77 = (($76) + 1)|0;
  $1 = $77;
 }
 STACKTOP = sp;return;
}
function _redraw_window($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4327]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[4327]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ($8|0)!=(0);
 if ($9) {
  _xvClear();
  _update_sline();
 }
 $10 = HEAP32[4327]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>(1);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 _file_to_new();
 $14 = HEAP32[4327]|0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[4327]|0;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 _xvUpdateScr($16,$19);
 STACKTOP = sp;return;
}
function _redraw_all($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = HEAP32[4327]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(3660)>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0);
 if ($17) {
  _xvClear();
 }
 $18 = HEAP32[4327]|0;
 $2 = $18;
 while(1) {
  $19 = HEAP32[4327]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21>>>0)>(0);
  if ($22) {
   $23 = HEAP32[4327]|0;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[(3660)>>2]|0;
   $27 = ($25>>>0)>=($26>>>0);
   if ($27) {
    _file_to_new();
   }
   _do_sline();
  }
  $28 = HEAP32[4327]|0;
  $29 = (_xvNextDisplayedWindow($28)|0);
  HEAP32[4327] = $29;
  $30 = HEAP32[4327]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = HEAP32[4327]|0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34;
  } else {
   $35 = 0;
  }
  HEAP32[4326] = $35;
  $36 = HEAP32[4327]|0;
  $37 = $2;
  $38 = ($36|0)!=($37|0);
  if (!($38)) {
   break;
  }
 }
 $39 = $3;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 _xvUpdateScr(0,$41);
 STACKTOP = sp;return;
}
function _s_ins($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = HEAP32[4327]|0;
 $4 = $14;
 $15 = HEAP32[4328]|0;
 $16 = $15 & 2;
 $17 = ($16|0)==(0);
 $18 = $3;
 $19 = ($18|0)==(0);
 $or$cond = $17 | $19;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = $2;
 $22 = (($20) + ($21))|0;
 $23 = $4;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - 1)|0;
 $27 = ($22>>>0)>=($26>>>0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $4;
 $29 = ((($28)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = (($31) + ($30))|0;
 $2 = $32;
 $33 = $4;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) - 1)|0;
 $8 = $36;
 $37 = $3;
 $38 = ($37|0)==(1);
 if ($38) {
  $39 = $2;
  $40 = $8;
  $41 = ($39|0)==($40|0);
  if ($41) {
   STACKTOP = sp;return;
  }
 }
 $42 = $4;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $10 = $44;
 $45 = $10;
 $46 = ((($45)) + 96|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 $49 = $10;
 if ($48) {
  $50 = ((($49)) + 96|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $10;
  $53 = $2;
  $54 = $8;
  $55 = $3;
  $56 = (0 - ($55))|0;
  $57 = (FUNCTION_TABLE_iiiii[$51 & 63]($52,$53,$54,$56)|0);
  $58 = ($57|0)!=(0);
  if ($58) {
   $83 = 2;
  } else {
   label = 8;
  }
 } else {
  $59 = ((($49)) + 92|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $83 = 2;
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $62 = $10;
  $63 = ((($62)) + 96|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0|0);
  $66 = $10;
  if ($65) {
   $67 = ((($66)) + 96|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $10;
   $70 = $2;
   $71 = $8;
   $72 = (($71) + 1)|0;
   $73 = $3;
   $74 = (0 - ($73))|0;
   $75 = (FUNCTION_TABLE_iiiii[$68 & 63]($69,$70,$72,$74)|0);
   $81 = $75;
  } else {
   $76 = ((($66)) + 92|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   $79 = $78&1;
   $81 = $79;
  }
  $80 = ($81|0)!=(0);
  $82 = $80 ? 1 : 0;
  $83 = $82;
 }
 $9 = $83;
 $84 = $9;
 switch ($84|0) {
 case 1:  {
  $85 = $8;
  $86 = (($85) + 1)|0;
  $8 = $86;
  $87 = $10;
  $88 = ((($87)) + 56|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $10;
  $91 = $8;
  FUNCTION_TABLE_viii[$89 & 31]($90,$91,0);
  $92 = $8;
  _xvClearLine($92);
  break;
 }
 case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $93 = $10;
 $94 = ((($93)) + 92|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $10;
 $97 = $2;
 $98 = $8;
 $99 = $3;
 $100 = (0 - ($99))|0;
 $101 = (FUNCTION_TABLE_iiiii[$95 & 63]($96,$97,$98,$100)|0);
 $102 = ($101|0)!=(0);
 if (!($102)) {
  STACKTOP = sp;return;
 }
 $103 = $4;
 $104 = ((($103)) + 32|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) - 1)|0;
 $6 = $106;
 $107 = $6;
 $108 = $3;
 $109 = (($107) - ($108))|0;
 $5 = $109;
 while(1) {
  $110 = $5;
  $111 = $2;
  $112 = ($110|0)>=($111|0);
  if (!($112)) {
   break;
  }
  $113 = $10;
  $114 = ((($113)) + 20|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $5;
  $117 = (($115) + ($116<<4)|0);
  $11 = $117;
  $118 = $10;
  $119 = ((($118)) + 20|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $6;
  $122 = (($120) + ($121<<4)|0);
  $12 = $122;
  $123 = $12;
  $124 = HEAP32[$123>>2]|0;
  $13 = $124;
  $125 = $11;
  $126 = HEAP32[$125>>2]|0;
  $127 = $12;
  HEAP32[$127>>2] = $126;
  $128 = $13;
  $129 = $11;
  HEAP32[$129>>2] = $128;
  $130 = $11;
  $131 = ((($130)) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $12;
  $134 = ((($133)) + 8|0);
  HEAP32[$134>>2] = $132;
  $135 = $5;
  $136 = (($135) + -1)|0;
  $5 = $136;
  $137 = $6;
  $138 = (($137) + -1)|0;
  $6 = $138;
 }
 $139 = $2;
 $7 = $139;
 while(1) {
  $140 = $7;
  $141 = $2;
  $142 = $3;
  $143 = (($141) + ($142))|0;
  $144 = ($140|0)<($143|0);
  if (!($144)) {
   break;
  }
  $145 = $7;
  _xvClearLine($145);
  $146 = $7;
  $147 = (($146) + 1)|0;
  $7 = $147;
 }
 STACKTOP = sp;return;
}
function _s_del($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $13 = HEAP32[4328]|0;
 $14 = $13 & 2;
 $15 = ($14|0)==(0);
 $16 = $3;
 $17 = ($16|0)==(0);
 $or$cond = $15 | $17;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = $2;
 $20 = (($18) + ($19))|0;
 $21 = HEAP32[4327]|0;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - 1)|0;
 $25 = ($20>>>0)>=($24>>>0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[4327]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = (($29) + ($28))|0;
 $2 = $30;
 $31 = HEAP32[4327]|0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - 1)|0;
 $7 = $34;
 $35 = $3;
 $36 = ($35|0)==(1);
 if ($36) {
  $37 = $2;
  $38 = $7;
  $39 = ($37|0)==($38|0);
  if ($39) {
   STACKTOP = sp;return;
  }
 }
 $40 = HEAP32[4327]|0;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $9 = $42;
 $43 = $9;
 $44 = ((($43)) + 96|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 $47 = $9;
 if ($46) {
  $48 = ((($47)) + 96|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $9;
  $51 = $2;
  $52 = $7;
  $53 = $3;
  $54 = (FUNCTION_TABLE_iiiii[$49 & 63]($50,$51,$52,$53)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   $79 = 2;
  } else {
   label = 8;
  }
 } else {
  $56 = ((($47)) + 92|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $79 = 2;
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $59 = $9;
  $60 = ((($59)) + 96|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  $63 = $9;
  if ($62) {
   $64 = ((($63)) + 96|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $9;
   $67 = $2;
   $68 = $7;
   $69 = (($68) + 1)|0;
   $70 = $3;
   $71 = (FUNCTION_TABLE_iiiii[$65 & 63]($66,$67,$69,$70)|0);
   $77 = $71;
  } else {
   $72 = ((($63)) + 92|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)!=(0|0);
   $75 = $74&1;
   $77 = $75;
  }
  $76 = ($77|0)!=(0);
  $78 = $76 ? 1 : 0;
  $79 = $78;
 }
 $8 = $79;
 $80 = $8;
 switch ($80|0) {
 case 1:  {
  $81 = $7;
  $82 = (($81) + 1)|0;
  $7 = $82;
  $83 = $9;
  $84 = ((($83)) + 56|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $9;
  $87 = $7;
  FUNCTION_TABLE_viii[$85 & 31]($86,$87,0);
  $88 = $7;
  _xvClearLine($88);
  break;
 }
 case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $89 = $9;
 $90 = ((($89)) + 92|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $9;
 $93 = $2;
 $94 = $7;
 $95 = $3;
 $96 = (FUNCTION_TABLE_iiiii[$91 & 63]($92,$93,$94,$95)|0);
 $97 = ($96|0)!=(0);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = $2;
 $5 = $98;
 $99 = $5;
 $100 = $3;
 $101 = (($99) + ($100))|0;
 $4 = $101;
 while(1) {
  $102 = $4;
  $103 = HEAP32[4327]|0;
  $104 = ((($103)) + 32|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($102>>>0)<($105>>>0);
  if (!($106)) {
   break;
  }
  $107 = $9;
  $108 = ((($107)) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $4;
  $111 = (($109) + ($110<<4)|0);
  $10 = $111;
  $112 = $9;
  $113 = ((($112)) + 20|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $5;
  $116 = (($114) + ($115<<4)|0);
  $11 = $116;
  $117 = $11;
  $118 = HEAP32[$117>>2]|0;
  $12 = $118;
  $119 = $10;
  $120 = HEAP32[$119>>2]|0;
  $121 = $11;
  HEAP32[$121>>2] = $120;
  $122 = $12;
  $123 = $10;
  HEAP32[$123>>2] = $122;
  $124 = $10;
  $125 = ((($124)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $11;
  $128 = ((($127)) + 8|0);
  HEAP32[$128>>2] = $126;
  $129 = $4;
  $130 = (($129) + 1)|0;
  $4 = $130;
  $131 = $5;
  $132 = (($131) + 1)|0;
  $5 = $132;
 }
 $133 = HEAP32[4327]|0;
 $134 = ((($133)) + 32|0);
 $135 = HEAP32[$134>>2]|0;
 $7 = $135;
 $136 = $7;
 $137 = $3;
 $138 = (($136) - ($137))|0;
 $6 = $138;
 while(1) {
  $139 = $6;
  $140 = $7;
  $141 = ($139|0)<($140|0);
  if (!($141)) {
   break;
  }
  $142 = $6;
  _xvClearLine($142);
  $143 = $6;
  $144 = (($143) + 1)|0;
  $6 = $144;
 }
 STACKTOP = sp;return;
}
function _s_inschar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 44|0;
 $1 = $0;
 $17 = HEAP32[4327]|0;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $4 = $19;
 $20 = $4;
 $21 = ((($20)) + 88|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[4328]|0;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[4327]|0;
 $28 = HEAP32[$27>>2]|0;
 $3 = $28;
 $29 = $3;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($32) + ($35)|0);
 $6 = $36;
 $37 = $6;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = ($39|0)==(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $6;
 $42 = ((($41)) + 1|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 << 24 >> 24;
 $45 = ($44|0)==(0);
 if ($45) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[4327]|0;
 $47 = ((($46)) + 56|0);
 $48 = HEAP32[$47>>2]|0;
 $9 = $48;
 $49 = HEAP32[4327]|0;
 $50 = ((($49)) + 72|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)>(1);
 if ($52) {
  $53 = $9;
  $54 = HEAP32[4327]|0;
  $55 = ((($54)) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)!=($56|0);
  if ($57) {
   STACKTOP = sp;return;
  }
 }
 $58 = $1;
 $59 = $9;
 $60 = (_vischar($58,$5,$59)|0);
 $7 = $60;
 $61 = HEAP32[4327]|0;
 $62 = ((($61)) + 24|0);
 $63 = HEAP32[$62>>2]|0;
 $10 = $63;
 $64 = $9;
 $65 = $7;
 $66 = (($64) + ($65))|0;
 $67 = $10;
 $68 = ($66>>>0)>=($67>>>0);
 if ($68) {
  STACKTOP = sp;return;
 }
 $69 = HEAP32[(3564)>>2]|0;
 $70 = ($69|0)==(0);
 $71 = HEAP32[(4308)>>2]|0;
 $72 = ($71|0)!=(0);
 $or$cond = $70 & $72;
 if ($or$cond) {
  $73 = $6;
  $74 = (_strchr($73,9)|0);
  $75 = ($74|0)!=(0|0);
  if ($75) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[4327]|0;
 $77 = ((($76)) + 52|0);
 $78 = HEAP32[$77>>2]|0;
 $8 = $78;
 $79 = $4;
 $80 = ((($79)) + 72|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = $4;
 $84 = ((($83)) + 24|0);
 $85 = HEAP32[$84>>2]|0;
 FUNCTION_TABLE_vii[$81 & 31]($82,$85);
 $86 = $4;
 $87 = ((($86)) + 88|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $4;
 $90 = HEAP32[4327]|0;
 $91 = ((($90)) + 28|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $8;
 $94 = (($92) + ($93))|0;
 $95 = $9;
 $96 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viiii[$88 & 63]($89,$94,$95,$96);
 $97 = $4;
 $98 = ((($97)) + 20|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[4327]|0;
 $101 = ((($100)) + 52|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($99) + ($102<<4)|0);
 $2 = $103;
 $104 = $7;
 $105 = $2;
 $106 = ((($105)) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + ($104))|0;
 HEAP32[$106>>2] = $108;
 $109 = $2;
 $110 = HEAP32[$109>>2]|0;
 $111 = $9;
 $112 = (($110) + ($111)|0);
 $11 = $112;
 $113 = $2;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $9;
 $117 = (($115) + ($116)|0);
 $12 = $117;
 $118 = $2;
 $119 = ((($118)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $10;
 $122 = ($120>>>0)>($121>>>0);
 if ($122) {
  $123 = $10;
  $124 = $2;
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $123;
 }
 $126 = $2;
 $127 = HEAP32[$126>>2]|0;
 $128 = $2;
 $129 = ((($128)) + 8|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($127) + ($130)|0);
 $13 = $131;
 $132 = $13;
 $133 = ((($132)) + -1|0);
 $13 = $133;
 HEAP8[$132>>0] = 0;
 $134 = $2;
 $135 = ((($134)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $2;
 $138 = ((($137)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) - 1)|0;
 $141 = (($136) + ($140)|0);
 $14 = $141;
 $142 = $13;
 $143 = $11;
 $144 = $142;
 $145 = $143;
 $146 = (($144) - ($145))|0;
 $147 = $7;
 $148 = ($146>>>0)>=($147>>>0);
 L27: do {
  if ($148) {
   $149 = $13;
   $150 = $7;
   $151 = (0 - ($150))|0;
   $152 = (($149) + ($151)|0);
   $15 = $152;
   $153 = $14;
   $154 = $7;
   $155 = (0 - ($154))|0;
   $156 = (($153) + ($155)|0);
   $16 = $156;
   while(1) {
    $157 = $15;
    $158 = HEAP8[$157>>0]|0;
    $159 = $13;
    HEAP8[$159>>0] = $158;
    $160 = $16;
    $161 = HEAP8[$160>>0]|0;
    $162 = $14;
    HEAP8[$162>>0] = $161;
    $163 = $15;
    $164 = $11;
    $165 = ($163>>>0)<=($164>>>0);
    if ($165) {
     break L27;
    }
    $166 = $13;
    $167 = ((($166)) + -1|0);
    $13 = $167;
    $168 = $14;
    $169 = ((($168)) + -1|0);
    $14 = $169;
    $170 = $15;
    $171 = ((($170)) + -1|0);
    $15 = $171;
    $172 = $16;
    $173 = ((($172)) + -1|0);
    $16 = $173;
   }
  }
 } while(0);
 $174 = HEAP32[$5>>2]|0;
 $6 = $174;
 while(1) {
  $175 = $7;
  $176 = (($175) + -1)|0;
  $7 = $176;
  $177 = ($175>>>0)>(0);
  if (!($177)) {
   break;
  }
  $178 = $6;
  $179 = HEAP8[$178>>0]|0;
  $180 = $11;
  HEAP8[$180>>0] = $179;
  $181 = $12;
  HEAP8[$181>>0] = 0;
  $182 = $11;
  $183 = ((($182)) + 1|0);
  $11 = $183;
  $184 = $12;
  $185 = ((($184)) + 1|0);
  $12 = $185;
  $186 = $6;
  $187 = ((($186)) + 1|0);
  $6 = $187;
 }
 STACKTOP = sp;return;
}
function _wind_goto() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[4328]|0;
 $2 = $1 & 1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[4327]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $6;
 $7 = $0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = HEAP32[4327]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[4327]|0;
 $15 = ((($14)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + ($16))|0;
 $18 = HEAP32[4327]|0;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_viii[$9 & 31]($10,$17,$20);
 STACKTOP = sp;return;
}
function _gotocmd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[4327]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = HEAP32[4327]|0;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_viii[$10 & 31]($11,$14,0);
 }
 $15 = $2;
 $16 = ((($15)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = HEAP32[4327]|0;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$17 & 31]($18,$21,0);
 STACKTOP = sp;return;
}
function _beep() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4327]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[4327]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$4 & 127]($7);
 return;
}
function _search($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = ($14|0)==(0);
 $16 = $15 ? 47 : 63;
 $17 = (_compile($13,$16,0)|0);
 $11 = $17;
 $18 = $11;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $4 = 0;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 $20 = $11;
 $21 = $8;
 HEAP32[$21>>2] = $20;
 $22 = $7;
 $23 = ($22|0)==(1);
 if ($23) {
  $10 = 60;
 } else {
  $10 = 61;
 }
 $24 = $10;
 $25 = $5;
 $26 = $6;
 $27 = HEAP32[(4596)>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$24 & 127]($25,$26,$27)|0);
 $9 = $28;
 $29 = $9;
 $4 = $29;
 $30 = $4;
 STACKTOP = sp;return ($30|0);
}
function _compile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 HEAP32[$4>>2] = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = 0;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $6;
  $15 = ($14|0)!=(0);
  $16 = HEAP32[4306]|0;
  $17 = ($16|0)==(0|0);
  $or$cond = $15 | $17;
  $18 = HEAP32[$4>>2]|0;
  $19 = $or$cond ? 0 : $18;
  $3 = $19;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = $5;
 $24 = ($22|0)==($23|0);
 if ($24) {
  $25 = HEAP32[4306]|0;
  $26 = ($25|0)==(0|0);
  $27 = HEAP32[$4>>2]|0;
  $28 = ((($27)) + 1|0);
  $29 = $26 ? 0 : $28;
  $3 = $29;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $30 = $5;
 $31 = (_mapstring($4,$30)|0);
 $32 = (_rn_new($31)|0);
 $7 = $32;
 $33 = $7;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $3 = 0;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $35 = HEAP32[$4>>2]|0;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = $6;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $7;
   _rn_delete($41);
   $3 = 0;
   $47 = $3;
   STACKTOP = sp;return ($47|0);
  }
 } else {
  $42 = HEAP32[$4>>2]|0;
  $43 = ((($42)) + 1|0);
  HEAP32[$4>>2] = $43;
 }
 $44 = HEAP32[4306]|0;
 _rn_delete($44);
 $45 = $7;
 HEAP32[4306] = $45;
 $46 = HEAP32[$4>>2]|0;
 $3 = $46;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function _bcksearch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $5;
 $12 = (_rmatch($10,0,$11)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $15 = $7;
   $3 = $15;
  } else {
   $16 = HEAP32[4326]|0;
   $17 = HEAP32[$16>>2]|0;
   $9 = $17;
   $18 = $4;
   $19 = HEAP32[$18>>2]|0;
   $8 = $19;
   while(1) {
    $20 = $8;
    $21 = $4;
    $22 = ($20|0)!=($21|0);
    if (!($22)) {
     label = 12;
     break;
    }
    $23 = $8;
    $24 = $9;
    $25 = ($23|0)==($24|0);
    if ($25) {
     $26 = $6;
     $27 = ($26|0)!=(0);
     if (!($27)) {
      label = 8;
      break;
     }
     $28 = HEAP32[4326]|0;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $8 = $30;
    } else {
     $31 = $8;
     $32 = (_rmatch($31,0,2147483647)|0);
     $7 = $32;
     $33 = $7;
     $34 = ($33|0)!=(0|0);
     if ($34) {
      label = 10;
      break;
     }
    }
    $36 = $8;
    $37 = HEAP32[$36>>2]|0;
    $8 = $37;
   }
   if ((label|0) == 8) {
    $3 = 0;
    break;
   }
   else if ((label|0) == 10) {
    $35 = $7;
    $3 = $35;
    break;
   }
   else if ((label|0) == 12) {
    $38 = $4;
    $39 = $5;
    $40 = (_rmatch($38,$39,2147483647)|0);
    $7 = $40;
    $41 = $7;
    $42 = ($41|0)!=(0|0);
    if ($42) {
     $43 = $7;
     $3 = $43;
     break;
    } else {
     $3 = 0;
     break;
    }
   }
  }
 } while(0);
 $44 = $3;
 STACKTOP = sp;return ($44|0);
}
function _fwdsearch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = HEAP32[4326]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $8 = $11;
 $12 = $4;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $4;
  $19 = $5;
  $20 = (($19) + 1)|0;
  $21 = (_match($18,$20)|0);
  HEAP32[4305] = $21;
  $22 = HEAP32[4305]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = HEAP32[4305]|0;
   $3 = $24;
   $56 = $3;
   STACKTOP = sp;return ($56|0);
  }
 }
 $25 = $4;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 while(1) {
  $28 = $7;
  $29 = $4;
  $30 = ($28|0)!=($29|0);
  if (!($30)) {
   label = 13;
   break;
  }
  $31 = $7;
  $32 = $8;
  $33 = ($31|0)==($32|0);
  if ($33) {
   $34 = $6;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    label = 9;
    break;
   }
   $36 = HEAP32[4326]|0;
   $37 = HEAP32[$36>>2]|0;
   $7 = $37;
  } else {
   $38 = $7;
   $39 = (_match($38,0)|0);
   HEAP32[4305] = $39;
   $40 = HEAP32[4305]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    label = 11;
    break;
   }
  }
  $43 = $7;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $7 = $45;
 }
 if ((label|0) == 9) {
  $3 = 0;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 11) {
  $42 = HEAP32[4305]|0;
  $3 = $42;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 13) {
  $46 = $4;
  $47 = (_match($46,0)|0);
  HEAP32[4305] = $47;
  $48 = HEAP32[4305]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = HEAP32[4305]|0;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $5;
   $54 = ($52|0)<=($53|0);
   if ($54) {
    $55 = HEAP32[4305]|0;
    $3 = $55;
    $56 = $3;
    STACKTOP = sp;return ($56|0);
   }
  }
  $3 = 0;
  $56 = $3;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = (($10) + ($11)|0);
 $5 = $12;
 $13 = HEAP32[4306]|0;
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 $15 = $6;
 $16 = $5;
 $17 = $4;
 $18 = ($17|0)==(0);
 $19 = $18&1;
 $20 = (_regexec_jsvim($15,$16,$19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $22 = $3;
 HEAP32[4307] = $22;
 $23 = $6;
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 HEAP32[(17232)>>2] = $30;
 $31 = $3;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_strlen($33)|0);
 $7 = $34;
 $35 = HEAP32[(17232)>>2]|0;
 $36 = $7;
 $37 = ($35|0)>=($36|0);
 if ($37) {
  $38 = $7;
  $39 = ($38|0)>(0);
  $40 = $7;
  $41 = (($40) - 1)|0;
  $42 = $39 ? $41 : 0;
  HEAP32[(17232)>>2] = $42;
 }
 $2 = 17228;
 $43 = $2;
 STACKTOP = sp;return ($43|0);
}
function _rmatch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = -1;
 $10 = $4;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $9 = $12;
 while(1) {
  $13 = $4;
  $14 = $5;
  $15 = (_match($13,$14)|0);
  $8 = $15;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   break;
  }
  $17 = $8;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $5 = $19;
  $20 = $5;
  $21 = $6;
  $22 = ($20|0)>=($21|0);
  if ($22) {
   break;
  }
  $23 = $9;
  $24 = $5;
  $7 = $24;
  $25 = (($23) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)==(0);
  if ($28) {
   break;
  }
  $29 = $9;
  $30 = $5;
  $31 = (($30) + 1)|0;
  $32 = (($29) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)==(0);
  if ($35) {
   break;
  }
  $36 = $5;
  $37 = (($36) + 1)|0;
  $5 = $37;
 }
 $38 = $7;
 $39 = ($38|0)>=(0);
 if ($39) {
  $40 = $7;
  HEAP32[(17232)>>2] = $40;
  $41 = $4;
  HEAP32[4307] = $41;
  $3 = 17228;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 } else {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _mapstring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $9 = HEAP32[(3924)>>2]|0;
 $4 = $9;
 HEAP32[(17248)>>2] = 0;
 HEAP32[(17244)>>2] = 0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 while(1) {
  $12 = $7;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $6 = $14;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = $3;
  $18 = ($16|0)!=($17|0);
  $19 = $5;
  $20 = ($19|0)!=(0);
  $21 = $18 ? 1 : $20;
  if (!($21)) {
   break;
  }
  $22 = $5;
  L5: do {
   switch ($22|0) {
   case 0:  {
    $23 = $6;
    L7: do {
     switch ($23|0) {
     case 92:  {
      $5 = 4;
      break L5;
      break;
     }
     case 126:  {
      $24 = $4;
      $25 = ($24|0)!=(0);
      if ($25) {
       $26 = HEAP32[4313]|0;
       HEAP32[$vararg_buffer>>2] = $26;
       (_lformat(17236,12801,$vararg_buffer)|0);
       break L5;
      } else {
       $27 = $6;
       (_flexaddch(17236,$27)|0);
       break L5;
      }
      break;
     }
     case 94:  {
      $28 = HEAP32[(17248)>>2]|0;
      $29 = HEAP32[(17244)>>2]|0;
      $30 = ($28>>>0)<=($29>>>0);
      if ($30) {
       $38 = 0;
      } else {
       $31 = HEAP32[4309]|0;
       $32 = HEAP32[(17248)>>2]|0;
       $33 = (($32) - 1)|0;
       $34 = (($31) + ($33)|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35 << 24 >> 24;
       $38 = $36;
      }
      $37 = ($38|0)!=(0);
      L17: do {
       if ($37) {
        $39 = $4;
        $40 = ($39|0)!=(2);
        do {
         if (!($40)) {
          $41 = HEAP32[(17248)>>2]|0;
          $42 = HEAP32[(17244)>>2]|0;
          $43 = ($41>>>0)<=($42>>>0);
          if ($43) {
           $51 = 0;
          } else {
           $44 = HEAP32[4309]|0;
           $45 = HEAP32[(17248)>>2]|0;
           $46 = (($45) - 1)|0;
           $47 = (($44) + ($46)|0);
           $48 = HEAP8[$47>>0]|0;
           $49 = $48 << 24 >> 24;
           $51 = $49;
          }
          $50 = ($51|0)!=(124);
          if ($50) {
           $52 = HEAP32[(17248)>>2]|0;
           $53 = HEAP32[(17244)>>2]|0;
           $54 = ($52>>>0)<=($53>>>0);
           if ($54) {
            $62 = 0;
           } else {
            $55 = HEAP32[4309]|0;
            $56 = HEAP32[(17248)>>2]|0;
            $57 = (($56) - 1)|0;
            $58 = (($55) + ($57)|0);
            $59 = HEAP8[$58>>0]|0;
            $60 = $59 << 24 >> 24;
            $62 = $60;
           }
           $61 = ($62|0)!=(40);
           if ($61) {
            break;
           }
          }
          $63 = HEAP32[(17248)>>2]|0;
          $64 = HEAP32[(17244)>>2]|0;
          $65 = (($64) + 1)|0;
          $66 = ($63>>>0)<=($65>>>0);
          if ($66) {
           $74 = 0;
          } else {
           $67 = HEAP32[4309]|0;
           $68 = HEAP32[(17248)>>2]|0;
           $69 = (($68) - 2)|0;
           $70 = (($67) + ($69)|0);
           $71 = HEAP8[$70>>0]|0;
           $72 = $71 << 24 >> 24;
           $74 = $72;
          }
          $73 = ($74|0)==(92);
          if (!($73)) {
           break L17;
          }
         }
        } while(0);
        (_flexaddch(17236,92)|0);
       }
      } while(0);
      (_flexaddch(17236,94)|0);
      break L5;
      break;
     }
     case 36:  {
      $75 = $7;
      $76 = ((($75)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77 << 24 >> 24;
      $8 = $78;
      $79 = $8;
      $80 = ($79|0)!=(0);
      do {
       if ($80) {
        $81 = $8;
        $82 = $3;
        $83 = ($81|0)!=($82|0);
        if ($83) {
         $84 = $4;
         $85 = ($84|0)!=(2);
         if (!($85)) {
          $86 = $8;
          $87 = ($86|0)!=(124);
          $88 = $8;
          $89 = ($88|0)!=(41);
          $or$cond = $87 & $89;
          if (!($or$cond)) {
           break;
          }
         }
         (_flexaddch(17236,92)|0);
        }
       }
      } while(0);
      (_flexaddch(17236,36)|0);
      break L5;
      break;
     }
     case 124: case 63: case 43: case 41: case 40:  {
      $90 = $4;
      $91 = ($90|0)!=(2);
      if ($91) {
       (_flexaddch(17236,92)|0);
      }
      $92 = $6;
      (_flexaddch(17236,$92)|0);
      break L5;
      break;
     }
     case 91: case 46: case 42:  {
      $93 = $4;
      $94 = ($93|0)==(0);
      if ($94) {
       (_flexaddch(17236,92)|0);
       break L7;
      }
      $95 = $6;
      $96 = ($95|0)==(91);
      if ($96) {
       $5 = 1;
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $97 = $6;
    (_flexaddch(17236,$97)|0);
    break;
   }
   case 2: case 1:  {
    $98 = $6;
    (_flexaddch(17236,$98)|0);
    $99 = $6;
    $100 = ($99|0)==(94);
    $101 = $5;
    $102 = ($101|0)==(1);
    $103 = $100 ? $102 : 0;
    $104 = $103 ? 2 : 3;
    $5 = $104;
    break;
   }
   case 3:  {
    $105 = $6;
    (_flexaddch(17236,$105)|0);
    $106 = $6;
    $107 = ($106|0)==(93);
    if ($107) {
     $5 = 0;
    }
    break;
   }
   case 4:  {
    $108 = $6;
    switch ($108|0) {
    case 41: case 40:  {
     $109 = $4;
     $110 = ($109|0)!=(1);
     if ($110) {
      (_flexaddch(17236,92)|0);
     }
     $111 = $6;
     (_flexaddch(17236,$111)|0);
     break;
    }
    case 126:  {
     $112 = $4;
     $113 = ($112|0)==(0);
     if ($113) {
      $114 = HEAP32[4313]|0;
      HEAP32[$vararg_buffer2>>2] = $114;
      (_lformat(17236,12801,$vararg_buffer2)|0);
     } else {
      label = 48;
     }
     break;
    }
    case 124: case 36: case 94: case 43: case 63: case 42: case 91: case 92: case 46:  {
     label = 48;
     break;
    }
    default: {
     $116 = $6;
     $117 = $3;
     $118 = ($116|0)!=($117|0);
     if ($118) {
      (_flexaddch(17236,92)|0);
     }
     $119 = $6;
     (_flexaddch(17236,$119)|0);
    }
    }
    if ((label|0) == 48) {
     label = 0;
     $115 = $6;
     HEAP32[$vararg_buffer5>>2] = $115;
     (_lformat(17236,11549,$vararg_buffer5)|0);
    }
    $5 = 0;
    break;
   }
   default: {
   }
   }
  } while(0);
  $120 = $7;
  $121 = ((($120)) + 1|0);
  $7 = $121;
 }
 $122 = $7;
 $123 = $2;
 HEAP32[$123>>2] = $122;
 $124 = $5;
 $125 = ($124|0)==(4);
 if (!($125)) {
  $126 = (_flexgetstr(17236)|0);
  STACKTOP = sp;return ($126|0);
 }
 (_lformat(17236,11553,$vararg_buffer8)|0);
 $126 = (_flexgetstr(17236)|0);
 STACKTOP = sp;return ($126|0);
}
function _rn_new($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_alloc(8)|0);
 $3 = $4;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $1 = 0;
  } else {
   $6 = $2;
   $7 = (_regcomp_jsvim($6)|0);
   $8 = $3;
   HEAP32[$8>>2] = $7;
   $9 = ($7|0)==(0|0);
   $10 = $3;
   if ($9) {
    _free($10);
    $1 = 0;
    break;
   } else {
    $11 = ((($10)) + 4|0);
    HEAP32[$11>>2] = 1;
    $12 = $3;
    $1 = $12;
    break;
   }
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _rn_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)<=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 _free($11);
 STACKTOP = sp;return;
}
function _xvFindPattern($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $4 = 0;
  $53 = $4;
  STACKTOP = sp;return ($53|0);
 }
 $14 = $6;
 $15 = HEAP32[4314]|0;
 $16 = ($14|0)!=($15|0);
 do {
  if ($16) {
   $17 = HEAP32[4314]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = $6;
    $20 = HEAP32[4314]|0;
    $21 = (_strcmp($19,$20)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
   }
   $23 = HEAP32[4315]|0;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = HEAP32[4315]|0;
    _rn_delete($25);
   }
   $26 = $6;
   $27 = (_rn_new($26)|0);
   HEAP32[4315] = $27;
   $28 = $6;
   HEAP32[4314] = $28;
  }
 } while(0);
 $29 = HEAP32[4315]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  HEAP32[4314] = 0;
  $4 = 0;
  $53 = $4;
  STACKTOP = sp;return ($53|0);
 }
 $31 = $7;
 $32 = ($31|0)==(1);
 if ($32) {
  $11 = 60;
 } else {
  $11 = 61;
 }
 $33 = HEAP32[4306]|0;
 $9 = $33;
 $34 = HEAP32[4315]|0;
 HEAP32[4306] = $34;
 $35 = $8;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $5;
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_match($38,$41)|0);
  $10 = $42;
  $43 = ($42|0)==(0|0);
  if ($43) {
   label = 16;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  $44 = $11;
  $45 = $5;
  $46 = HEAP32[$45>>2]|0;
  $47 = $5;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiii[$44 & 127]($46,$49,0)|0);
  $10 = $50;
 }
 $51 = $9;
 HEAP32[4306] = $51;
 $52 = $10;
 $4 = $52;
 $53 = $4;
 STACKTOP = sp;return ($53|0);
}
function _linesearch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($6)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(0);
  if ($20) {
   while(1) {
    $21 = (_inc($6)|0);
    $22 = ($21|0)==(0);
    if (!($22)) {
     break;
    }
   }
  }
 }
 $23 = HEAP32[$6>>2]|0;
 $24 = ((($6)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $4;
 $27 = $5;
 $28 = (_search($23,$25,$26,$27)|0);
 $7 = $28;
 $29 = $7;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  $33 = 0;
  STACKTOP = sp;return ($33|0);
 }
 $31 = $7;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32;
 STACKTOP = sp;return ($33|0);
}
function _regerror_jsvim($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4328]|0;
 $3 = $2 & 32;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  HEAP32[$vararg_buffer>>2] = $5;
  _show_error(12801,$vararg_buffer);
 }
 $6 = HEAP32[4328]|0;
 $7 = $6 & -97;
 HEAP32[4328] = $7;
 STACKTOP = sp;return;
}
function _exGlobal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = 0;
 while(1) {
  $16 = $7;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $7;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(32);
   if ($23) {
    $148 = 1;
   } else {
    $24 = $7;
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($26|0)==(9);
    $148 = $27;
   }
  } else {
   $148 = 0;
  }
  $28 = $7;
  if (!($148)) {
   break;
  }
  $29 = ((($28)) + 1|0);
  $7 = $29;
 }
 $30 = HEAP8[$28>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = $7;
  $34 = ((($33)) + 1|0);
  $35 = $7;
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = (_compile($34,$37,0)|0);
  $7 = $38;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $43 = $7;
   $44 = HEAP8[$43>>0]|0;
   $12 = $44;
   $45 = $44 << 24 >> 24;
   switch ($45|0) {
   case 0:  {
    $12 = 112;
    break;
   }
   case 112: case 108:  {
    break;
   }
   case 126: case 38: case 115:  {
    $46 = $7;
    $47 = ((($46)) + 1|0);
    $7 = $47;
    label = 13;
    break;
   }
   case 100:  {
    label = 13;
    break;
   }
   default: {
    _regerror_jsvim(11622);
    $4 = 0;
    $147 = $4;
    STACKTOP = sp;return ($147|0);
   }
   }
   if ((label|0) == 13) {
    $48 = (_start_command()|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     $4 = 0;
     $147 = $4;
     STACKTOP = sp;return ($147|0);
    }
   }
   $11 = 0;
   $50 = $5;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     $52 = HEAP32[4326]|0;
     $53 = ((($52)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $5 = $54;
     $55 = HEAP32[4326]|0;
     $56 = ((($55)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $6 = $57;
    } else {
     $58 = $6;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $60 = $5;
      $61 = ((($60)) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $6 = $62;
      break;
     } else {
      $63 = $6;
      $64 = ((($63)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $6 = $65;
      break;
     }
    }
   } while(0);
   $66 = $12;
   $67 = $66 << 24 >> 24;
   switch ($67|0) {
   case 108: case 112:  {
    $68 = $5;
    $69 = ((($68)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[4316] = $70;
    $71 = $5;
    HEAP32[4317] = $71;
    $72 = $6;
    HEAP32[4318] = $72;
    $73 = $8;
    HEAP32[4319] = $73;
    $74 = HEAP32[4327]|0;
    $75 = ((($74)) + 24|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $12;
    $78 = $77 << 24 >> 24;
    $79 = ($78|0)==(108);
    $80 = $79&1;
    _disp_init(62,$76,$80);
    $4 = 1;
    $147 = $4;
    STACKTOP = sp;return ($147|0);
    break;
   }
   default: {
   }
   }
   $81 = HEAP32[4306]|0;
   $82 = ($81|0)!=(0|0);
   if ($82) {
    $83 = HEAP32[4306]|0;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + 1)|0;
    HEAP32[$84>>2] = $86;
    $87 = HEAP32[4306]|0;
    $88 = $87;
   } else {
    $88 = 0;
   }
   $9 = $88;
   $89 = HEAP32[4306]|0;
   $90 = HEAP32[$89>>2]|0;
   $10 = $90;
   _gotocmd(0);
   $11 = 0;
   L36: while(1) {
    $91 = $5;
    $92 = $6;
    $93 = ($91|0)!=($92|0);
    if (!($93)) {
     break;
    }
    $94 = $8;
    $95 = $10;
    $96 = $5;
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (_regexec_jsvim($95,$98,1)|0);
    $100 = ($94|0)==($99|0);
    $101 = $5;
    if (!($100)) {
     $124 = ((($101)) + 4|0);
     $125 = HEAP32[$124>>2]|0;
     $5 = $125;
     continue;
    }
    _move_cursor($101,0);
    $102 = $5;
    $13 = $102;
    $103 = $5;
    $104 = ((($103)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $5 = $105;
    $106 = $12;
    $107 = $106 << 24 >> 24;
    switch ($107|0) {
    case 100:  {
     $108 = $13;
     _repllines($108,1,0);
     $109 = $11;
     $110 = (($109) + 1)|0;
     $11 = $110;
     continue L36;
     break;
    }
    case 126: case 38: case 115:  {
     break;
    }
    default: {
     continue L36;
    }
    }
    $111 = $12;
    $112 = $111 << 24 >> 24;
    switch ($112|0) {
    case 115:  {
     $14 = 45;
     break;
    }
    case 38:  {
     $14 = 46;
     break;
    }
    case 126:  {
     $14 = 47;
     break;
    }
    default: {
    }
    }
    $113 = HEAP32[4328]|0;
    $15 = $113;
    $114 = HEAP32[4328]|0;
    $115 = $114 & -65;
    HEAP32[4328] = $115;
    $116 = $14;
    $117 = $13;
    $118 = $13;
    $119 = $7;
    $120 = (FUNCTION_TABLE_iiii[$116 & 127]($117,$118,$119)|0);
    $121 = $11;
    $122 = (($121) + ($120))|0;
    $11 = $122;
    $123 = $15;
    HEAP32[4328] = $123;
   }
   $126 = $9;
   _rn_delete($126);
   $127 = $12;
   $128 = $127 << 24 >> 24;
   switch ($128|0) {
   case 126: case 38: case 115: case 100:  {
    _end_command();
    $129 = $11;
    $130 = ($129|0)!=(0);
    if ($130) {
     _xvUpdateAllBufferWindows();
     _cursupdate();
     _begin_line(1);
     $131 = $11;
     $132 = HEAP32[(3972)>>2]|0;
     $133 = ($131|0)>=($132|0);
     if ($133) {
      $134 = $12;
      $135 = $134 << 24 >> 24;
      $136 = ($135|0)==(100);
      $137 = $136 ? 11648 : 11665;
      $138 = $11;
      $139 = $11;
      $140 = ($139|0)>(1);
      $141 = $140 ? 115 : 32;
      HEAP32[$vararg_buffer>>2] = $138;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $141;
      _show_message($137,$vararg_buffer);
     }
    }
    break;
   }
   default: {
   }
   }
   $142 = $11;
   $143 = ($142|0)==(0);
   if ($143) {
    $144 = HEAP32[4328]|0;
    $145 = $144 & 64;
    $146 = ($145|0)!=(0);
    if ($146) {
     _regerror_jsvim(11684);
     $4 = 0;
     $147 = $4;
     STACKTOP = sp;return ($147|0);
    }
   }
   $4 = 1;
   $147 = $4;
   STACKTOP = sp;return ($147|0);
  }
 }
 $40 = $8;
 $41 = ($40|0)!=(0);
 $42 = $41 ? 11556 : 11589;
 _regerror_jsvim($42);
 $4 = 0;
 $147 = $4;
 STACKTOP = sp;return ($147|0);
}
function _grep_line() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[4306]|0;
 $3 = HEAP32[$2>>2]|0;
 $1 = $3;
 while(1) {
  $4 = HEAP32[4317]|0;
  $5 = HEAP32[4318]|0;
  $6 = ($4|0)!=($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[4319]|0;
  $8 = $1;
  $9 = HEAP32[4317]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_regexec_jsvim($8,$11,1)|0);
  $13 = ($7|0)==($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $20 = HEAP32[4317]|0;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[4317] = $22;
  $23 = HEAP32[4316]|0;
  $24 = (($23) + 1)|0;
  HEAP32[4316] = $24;
 }
 if ((label|0) == 4) {
  HEAP32[(17296)>>2] = 0;
  HEAP32[(17292)>>2] = 0;
  $14 = HEAP32[(3708)>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = HEAP32[4316]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   (_lformat(17284,11776,$vararg_buffer)|0);
  }
  $17 = HEAP32[4317]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $19;
  (_lformat(17284,12801,$vararg_buffer1)|0);
 }
 $25 = HEAP32[4317]|0;
 $26 = HEAP32[4318]|0;
 $27 = ($25|0)==($26|0);
 if ($27) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $28 = HEAP32[4317]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[4317] = $30;
  $31 = HEAP32[4316]|0;
  $32 = (($31) + 1)|0;
  HEAP32[4316] = $32;
  $33 = (_flexgetstr(17284)|0);
  $0 = $33;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _exSubstitute($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $14 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $15 = $6;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $6;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(32);
   if ($22) {
    $162 = 1;
   } else {
    $23 = $6;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(9);
    $162 = $26;
   }
  } else {
   $162 = 0;
  }
  $27 = $6;
  if (!($162)) {
   break;
  }
  $28 = ((($27)) + 1|0);
  $6 = $28;
 }
 $29 = HEAP8[$27>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = $4;
  $33 = $5;
  $34 = $6;
  $35 = (_exAmpersand($32,$33,$34)|0);
  $3 = $35;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $36 = $6;
 $37 = (_strsave($36)|0);
 $7 = $37;
 $38 = $7;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $40 = $7;
 $41 = HEAP8[$40>>0]|0;
 $10 = $41;
 $42 = $10;
 $43 = $42 << 24 >> 24;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = $7;
  $46 = ((($45)) + 1|0);
  $47 = $10;
  $48 = $47 << 24 >> 24;
  $49 = (_compile($46,$48,1)|0);
  $9 = $49;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   $52 = $9;
   $8 = $52;
   while(1) {
    $53 = $9;
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    $56 = ($55|0)!=(0);
    if (!($56)) {
     break;
    }
    $57 = $9;
    $58 = HEAP8[$57>>0]|0;
    $59 = $58 << 24 >> 24;
    $60 = ($59|0)==(92);
    $61 = $9;
    if ($60) {
     $62 = ((($61)) + 1|0);
     $9 = $62;
     $63 = HEAP8[$62>>0]|0;
     $64 = $63 << 24 >> 24;
     $65 = ($64|0)==(0);
     if ($65) {
      break;
     }
    } else {
     $66 = HEAP8[$61>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = $10;
     $69 = $68 << 24 >> 24;
     $70 = ($67|0)==($69|0);
     if ($70) {
      label = 19;
      break;
     }
    }
    $73 = $9;
    $74 = ((($73)) + 1|0);
    $9 = $74;
   }
   if ((label|0) == 19) {
    $71 = $9;
    $72 = ((($71)) + 1|0);
    $9 = $72;
    HEAP8[$71>>0] = 0;
   }
   $75 = HEAP32[4320]|0;
   $76 = ($75|0)!=(0|0);
   if ($76) {
    $77 = HEAP32[4320]|0;
    _rn_delete($77);
   }
   $78 = HEAP32[4306]|0;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = HEAP32[4306]|0;
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$81>>2] = $83;
    $84 = HEAP32[4306]|0;
    $85 = $84;
   } else {
    $85 = 0;
   }
   HEAP32[4320] = $85;
   $86 = HEAP32[(3924)>>2]|0;
   $87 = ($86|0)!=(0);
   $88 = $87&1;
   $12 = $88;
   $89 = $12;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $8;
    $92 = (_strcmp($91,11842)|0);
    $93 = ($92|0)==(0);
    if ($93) {
     label = 28;
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    $94 = $8;
    $95 = $12;
    $96 = ($95|0)!=(0);
    $97 = $96 ? 11844 : 11846;
    $98 = (_strcmp($94,$97)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     label = 28;
    } else {
     $101 = $8;
     $102 = (_strchr($101,126)|0);
     $103 = ($102|0)!=(0|0);
     if ($103) {
      $104 = ((($14)) + 4|0);
      HEAP32[$104>>2] = 0;
      $105 = ((($14)) + 12|0);
      HEAP32[$105>>2] = 0;
      $106 = ((($14)) + 8|0);
      HEAP32[$106>>2] = 0;
      $13 = 0;
      $107 = $8;
      $9 = $107;
      while(1) {
       $108 = $9;
       $109 = HEAP8[$108>>0]|0;
       $110 = $109 << 24 >> 24;
       $111 = ($110|0)!=(0);
       if (!($111)) {
        break;
       }
       $112 = $9;
       $113 = HEAP8[$112>>0]|0;
       $114 = $113 << 24 >> 24;
       L45: do {
        switch ($114|0) {
        case 92:  {
         $115 = $13;
         $116 = ($115|0)!=(0);
         $117 = $9;
         if ($116) {
          $118 = HEAP8[$117>>0]|0;
          $119 = $118 << 24 >> 24;
          (_flexaddch($14,$119)|0);
          $120 = $9;
          $121 = HEAP8[$120>>0]|0;
          $122 = $121 << 24 >> 24;
          (_flexaddch($14,$122)|0);
          $13 = 0;
          break L45;
         }
         $123 = ((($117)) + 1|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = $124 << 24 >> 24;
         $126 = ($125|0)==(0);
         if ($126) {
          $127 = $9;
          $128 = HEAP8[$127>>0]|0;
          $129 = $128 << 24 >> 24;
          (_flexaddch($14,$129)|0);
          break L45;
         } else {
          $13 = 1;
          break L45;
         }
         break;
        }
        case 126:  {
         $130 = $12;
         $131 = $13;
         $132 = $130 ^ $131;
         $133 = ($132|0)!=(0);
         if ($133) {
          $134 = HEAP32[4313]|0;
          HEAP32[$vararg_buffer>>2] = $134;
          (_lformat($14,12801,$vararg_buffer)|0);
         } else {
          $135 = $13;
          $136 = ($135|0)!=(0);
          if ($136) {
           (_flexaddch($14,92)|0);
          }
          $137 = $9;
          $138 = HEAP8[$137>>0]|0;
          $139 = $138 << 24 >> 24;
          (_flexaddch($14,$139)|0);
         }
         $13 = 0;
         break;
        }
        default: {
         $140 = $9;
         $141 = HEAP8[$140>>0]|0;
         $142 = $141 << 24 >> 24;
         (_flexaddch($14,$142)|0);
         $13 = 0;
        }
        }
       } while(0);
       $143 = $9;
       $144 = ((($143)) + 1|0);
       $9 = $144;
      }
      $145 = $7;
      _free($145);
      $146 = (_flexdetach($14)|0);
      $8 = $146;
      $147 = $8;
      $7 = $147;
     }
    }
   }
   if ((label|0) == 28) {
    $100 = HEAP32[4313]|0;
    $8 = $100;
   }
   $148 = $4;
   $149 = $5;
   $150 = $8;
   $151 = $9;
   $152 = (_substitute($148,$149,$150,$151)|0);
   $11 = $152;
   $153 = $8;
   $154 = HEAP32[4313]|0;
   $155 = ($153|0)!=($154|0);
   if ($155) {
    $156 = HEAP32[4313]|0;
    _free($156);
    $157 = $8;
    $158 = (_strsave($157)|0);
    HEAP32[4313] = $158;
   }
   $159 = $7;
   _free($159);
   $160 = $11;
   $3 = $160;
   $161 = $3;
   STACKTOP = sp;return ($161|0);
  }
 }
 _regerror_jsvim(11804);
 $51 = $7;
 _free($51);
 $3 = 0;
 $161 = $3;
 STACKTOP = sp;return ($161|0);
}
function _exAmpersand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[4320]|0;
 $9 = ($8|0)==(0|0);
 $10 = HEAP32[4313]|0;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  _show_error(11693,$vararg_buffer);
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 $12 = HEAP32[4306]|0;
 _rn_delete($12);
 $13 = HEAP32[4320]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[4320]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = HEAP32[4320]|0;
  $20 = $19;
 } else {
  $20 = 0;
 }
 HEAP32[4306] = $20;
 $21 = $4;
 $22 = $5;
 $23 = HEAP32[4313]|0;
 $24 = $6;
 $25 = (_substitute($21,$22,$23,$24)|0);
 $7 = $25;
 $26 = $7;
 $3 = $26;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _exTilde($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[4306]|0;
 $9 = ($8|0)==(0|0);
 $10 = HEAP32[4313]|0;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  _show_error(11693,$vararg_buffer);
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $12 = HEAP32[4320]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[4320]|0;
  _rn_delete($14);
 }
 $15 = HEAP32[4306]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[4306]|0;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
  $21 = HEAP32[4306]|0;
  $22 = $21;
 } else {
  $22 = 0;
 }
 HEAP32[4320] = $22;
 $23 = $4;
 $24 = $5;
 $25 = HEAP32[4313]|0;
 $26 = $6;
 $27 = (_substitute($23,$24,$25,$26)|0);
 $7 = $27;
 $28 = $7;
 $3 = $28;
 $29 = $3;
 STACKTOP = sp;return ($29|0);
}
function _substitute($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $10 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = (_start_command()|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $4 = 0;
  $113 = $4;
  STACKTOP = sp;return ($113|0);
 }
 $18 = HEAP32[4306]|0;
 $19 = HEAP32[$18>>2]|0;
 $11 = $19;
 $20 = $8;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = ($22|0)==(103);
 $24 = $23&1;
 $12 = $24;
 $9 = 0;
 $25 = HEAP32[4327]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $13 = $27;
 $28 = $5;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = $13;
  $5 = $30;
 }
 $31 = $6;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $6 = $35;
 } else {
  $36 = $6;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $6 = $38;
 }
 $39 = ((($10)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($10)) + 12|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($10)) + 8|0);
 HEAP32[$41>>2] = 0;
 while(1) {
  $42 = $5;
  $43 = $6;
  $44 = ($42|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $45 = $11;
  $46 = $5;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_regexec_jsvim($45,$48,1)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $13;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $5;
    $54 = $13;
    $55 = ($53|0)!=($54|0);
    if ($55) {
     _setpcmark();
     $13 = 0;
    }
   }
   $56 = $5;
   _move_cursor($56,0);
   $57 = ((($10)) + 12|0);
   HEAP32[$57>>2] = 0;
   $58 = ((($10)) + 8|0);
   HEAP32[$58>>2] = 0;
   $59 = $5;
   $60 = ((($59)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $14 = $61;
   while(1) {
    while(1) {
     $62 = $14;
     $63 = $11;
     $64 = HEAP32[$63>>2]|0;
     $65 = ($62>>>0)<($64>>>0);
     if (!($65)) {
      break;
     }
     $66 = $14;
     $67 = HEAP8[$66>>0]|0;
     $68 = $67 << 24 >> 24;
     (_flexaddch($10,$68)|0);
     $69 = $14;
     $70 = ((($69)) + 1|0);
     $14 = $70;
    }
    $71 = $11;
    $72 = $7;
    $73 = $5;
    $74 = ((($73)) + 16|0);
    $75 = HEAP32[$74>>2]|0;
    _regsubst($71,$72,$10,$75);
    $76 = $11;
    $77 = ((($76)) + 40|0);
    $78 = HEAP32[$77>>2]|0;
    $14 = $78;
    $15 = $78;
    $79 = $11;
    $80 = HEAP32[$79>>2]|0;
    $81 = $14;
    $82 = ($80>>>0)>=($81>>>0);
    if ($82) {
     $83 = $14;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)==(0);
     if ($86) {
      break;
     }
     $87 = $15;
     $88 = ((($87)) + 1|0);
     $15 = $88;
    }
    $89 = $12;
    $90 = ($89|0)!=(0);
    if (!($90)) {
     break;
    }
    $91 = $11;
    $92 = $15;
    $93 = (_regexec_jsvim($91,$92,0)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
   }
   $95 = $14;
   HEAP32[$vararg_buffer>>2] = $95;
   (_lformat($10,12801,$vararg_buffer)|0);
   $96 = $5;
   $97 = $5;
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (_strlen($99)|0);
   $101 = (_flexgetstr($10)|0);
   _replchars($96,0,$100,$101);
   $102 = $9;
   $103 = (($102) + 1)|0;
   $9 = $103;
  }
  $104 = $5;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $5 = $106;
 }
 _flexdelete($10);
 _end_command();
 $107 = $9;
 $108 = ($107|0)!=(0);
 if (!($108)) {
  $109 = HEAP32[4328]|0;
  $110 = $109 & 64;
  $111 = ($110|0)!=(0);
  if ($111) {
   _regerror_jsvim(11684);
  }
 }
 $112 = $9;
 $4 = $112;
 $113 = $4;
 STACKTOP = sp;return ($113|0);
}
function _regsubst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 $15 = $5;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 | $16;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 $or$cond3 = $or$cond | $18;
 if ($or$cond3) {
  _regerror_jsvim(11718);
  STACKTOP = sp;return;
 }
 $19 = $4;
 $20 = ((($19)) + 92|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)!=(156);
 if ($23) {
  _regerror_jsvim(11745);
  STACKTOP = sp;return;
 }
 $9 = 0;
 $24 = HEAP32[(3924)>>2]|0;
 $10 = $24;
 L9: while(1) {
  $25 = $5;
  $26 = ((($25)) + 1|0);
  $5 = $26;
  $27 = HEAP8[$25>>0]|0;
  $28 = $27 << 24 >> 24;
  $8 = $28;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   label = 31;
   break;
  }
  $11 = -1;
  $30 = $8;
  $31 = ($30|0)==(38);
  $32 = $10;
  $33 = ($32|0)!=(0);
  $or$cond5 = $31 & $33;
  L12: do {
   if ($or$cond5) {
    $11 = 0;
   } else {
    $34 = $8;
    $35 = ($34|0)==(92);
    if ($35) {
     $36 = $5;
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 << 24 >> 24;
     switch ($38|0) {
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $39 = $5;
      $40 = ((($39)) + 1|0);
      $5 = $40;
      $41 = HEAP8[$39>>0]|0;
      $42 = $41 << 24 >> 24;
      $43 = (($42) - 48)|0;
      $11 = $43;
      break L12;
      break;
     }
     case 35:  {
      $44 = $6;
      $45 = $7;
      HEAP32[$vararg_buffer>>2] = $45;
      (_lformat($44,11776,$vararg_buffer)|0);
      $46 = $5;
      $47 = ((($46)) + 1|0);
      $5 = $47;
      continue L9;
      break;
     }
     case 69: case 101: case 76: case 108: case 85: case 117:  {
      $48 = $5;
      $49 = ((($48)) + 1|0);
      $5 = $49;
      $50 = HEAP8[$48>>0]|0;
      $9 = $50;
      continue L9;
      break;
     }
     default: {
      break L12;
     }
     }
    }
   }
  } while(0);
  $51 = $11;
  $52 = ($51|0)<(0);
  if ($52) {
   $53 = $8;
   $54 = ($53|0)==(92);
   if ($54) {
    $55 = $5;
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = ($57|0)!=(0);
    if ($58) {
     $59 = $5;
     $60 = ((($59)) + 1|0);
     $5 = $60;
     $61 = HEAP8[$59>>0]|0;
     $62 = $61 << 24 >> 24;
     $8 = $62;
    }
   }
   $63 = $6;
   $64 = $8;
   $65 = $9;
   $66 = $65 << 24 >> 24;
   _add_char_to_rhs($63,$64,$66);
   $67 = $9;
   $68 = $67 << 24 >> 24;
   $69 = ($68|0)==(117);
   if (!($69)) {
    $70 = $9;
    $71 = $70 << 24 >> 24;
    $72 = ($71|0)==(108);
    if (!($72)) {
     continue;
    }
   }
   $9 = 0;
   continue;
  }
  $73 = $4;
  $74 = $11;
  $75 = (($73) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0|0);
  if (!($77)) {
   continue;
  }
  $78 = $4;
  $79 = ((($78)) + 40|0);
  $80 = $11;
  $81 = (($79) + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if (!($83)) {
   continue;
  }
  $84 = $4;
  $85 = $11;
  $86 = (($84) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $12 = $87;
  while(1) {
   $88 = $12;
   $89 = $4;
   $90 = ((($89)) + 40|0);
   $91 = $11;
   $92 = (($90) + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($88>>>0)<($93>>>0);
   if (!($94)) {
    continue L9;
   }
   $95 = $12;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96 << 24 >> 24;
   $98 = ($97|0)==(0);
   if ($98) {
    break L9;
   }
   $99 = $6;
   $100 = $12;
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 << 24 >> 24;
   $103 = $9;
   $104 = $103 << 24 >> 24;
   _add_char_to_rhs($99,$102,$104);
   $105 = $9;
   $106 = $105 << 24 >> 24;
   $107 = ($106|0)==(117);
   if ($107) {
    label = 29;
   } else {
    $108 = $9;
    $109 = $108 << 24 >> 24;
    $110 = ($109|0)==(108);
    if ($110) {
     label = 29;
    }
   }
   if ((label|0) == 29) {
    label = 0;
    $9 = 0;
   }
   $111 = $12;
   $112 = ((($111)) + 1|0);
   $12 = $112;
  }
 }
 if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
 _regerror_jsvim(11783);
 STACKTOP = sp;return;
}
function _add_char_to_rhs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 switch ($6|0) {
 case 85: case 117:  {
  $7 = $4;
  $8 = ($7>>>0)<(128);
  if ($8) {
   $9 = $4;
   $10 = (_islower($9)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $4;
    $13 = $12 & 95;
    $4 = $13;
   }
  }
  break;
 }
 case 76: case 108:  {
  $14 = $4;
  $15 = ($14>>>0)<(128);
  if ($15) {
   $16 = $4;
   $17 = (_isupper($16)|0);
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $4;
    $20 = $19 | 32;
    $4 = $20;
   }
  }
  break;
 }
 default: {
 }
 }
 $21 = $3;
 $22 = $4;
 (_flexaddch($21,$22)|0);
 STACKTOP = sp;return;
}
function _catch_signals() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _setsigcatcher(2,63);
 _setsigcatcher(20,64);
 _setsigcatcher(1,65);
 _setsigcatcher(15,66);
 return;
}
function _int_handler($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (_isatty(0)|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  _sys_exit(-2);
 }
 (_signal(2,(63|0))|0);
 HEAP8[19093] = 1;
 STACKTOP = sp;return;
}
function _setsigcatcher($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 (_signal(($4|0),($5|0))|0);
 STACKTOP = sp;return;
}
function _tstp_handler($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 (_signal(20,(64|0))|0);
 HEAP8[19090] = 1;
 STACKTOP = sp;return;
}
function _hup_handler($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 (_signal(1,((1)|0))|0);
 HEAP8[19091] = 1;
 STACKTOP = sp;return;
}
function _term_handler($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 (_signal(15,((1)|0))|0);
 HEAP8[19092] = 1;
 STACKTOP = sp;return;
}
function _xvi_startup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink3 = 0, $$sink5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $13 = 0;
 $16 = 0;
 $17 = 0;
 $26 = (_new_buffer()|0);
 HEAP32[4326] = $26;
 $27 = HEAP32[4326]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  _startup_error(5948);
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 $29 = $5;
 $30 = (_xvInitWindow($29)|0);
 HEAP32[4327] = $30;
 $31 = HEAP32[4327]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  _startup_error(5948);
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 $33 = HEAP32[4327]|0;
 $34 = HEAP32[4326]|0;
 _xvMapWindowOntoBuffer($33,$34);
 _init_params();
 _init_yankput();
 _init_sline();
 $35 = $8;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $8;
  $38 = (_strsave($37)|0);
  $15 = $38;
 } else {
  $15 = 0;
 }
 $39 = (_getenv((11850|0))|0);
 $18 = $39;
 $40 = $18;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $18;
  HEAP32[$vararg_buffer>>2] = $42;
  _set_param(43,$vararg_buffer);
 }
 $43 = $15;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $20 = 0;
  $45 = $15;
  $19 = $45;
  L18: while(1) {
   $46 = $19;
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)!=(0);
   $49 = $19;
   if (!($48)) {
    break;
   }
   $50 = ((($49)) + 1|0);
   $19 = $50;
   $51 = HEAP8[$49>>0]|0;
   $52 = $51 << 24 >> 24;
   switch ($52|0) {
   case 92:  {
    $20 = 1;
    continue L18;
    break;
   }
   case 10: case 124:  {
    label = 15;
    break;
   }
   default: {
   }
   }
   do {
    if ((label|0) == 15) {
     label = 0;
     $53 = $20;
     $54 = ($53|0)!=(0);
     $55 = $19;
     $56 = ((($55)) + -1|0);
     if (!($54)) {
      HEAP8[$56>>0] = 0;
      $65 = $15;
      (_exCommand($65)|0);
      $66 = $19;
      $15 = $66;
      break;
     }
     $19 = $56;
     $21 = $56;
     $57 = ((($56)) + -1|0);
     $22 = $57;
     while(1) {
      $58 = $21;
      $59 = ((($58)) + 1|0);
      $21 = $59;
      $60 = HEAP8[$58>>0]|0;
      $61 = $22;
      $62 = ((($61)) + 1|0);
      $22 = $62;
      HEAP8[$61>>0] = $60;
      $63 = $60 << 24 >> 24;
      $64 = ($63|0)!=(0);
      if (!($64)) {
       break;
      }
     }
    }
   } while(0);
   $20 = 0;
  }
  $67 = $15;
  $68 = ($49>>>0)>($67>>>0);
  if ($68) {
   $69 = $15;
   (_exCommand($69)|0);
  }
 }
 $14 = 1;
 L34: while(1) {
  $70 = $14;
  $71 = $6;
  $72 = ($70|0)<($71|0);
  if (!($72)) {
   label = 60;
   break;
  }
  $73 = $7;
  $74 = $14;
  $75 = (($73) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP8[$76>>0]|0;
  $78 = $77 << 24 >> 24;
  $79 = ($78|0)==(45);
  if (!($79)) {
   $80 = $7;
   $81 = $14;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = HEAP8[$83>>0]|0;
   $85 = $84 << 24 >> 24;
   $86 = ($85|0)==(43);
   if (!($86)) {
    label = 60;
    break;
   }
  }
  $87 = $7;
  $88 = $14;
  $89 = (($87) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91 << 24 >> 24;
  $93 = ($92|0)==(45);
  L40: do {
   if ($93) {
    $94 = $7;
    $95 = $14;
    $96 = (($94) + ($95<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    switch ($100|0) {
    case 99:  {
     $101 = $14;
     $102 = $6;
     $103 = (($102) - 1)|0;
     $104 = ($101|0)<($103|0);
     if (!($104)) {
      label = 30;
      break L34;
     }
     $105 = $16;
     $106 = $17;
     $107 = (($106) + 1)|0;
     $17 = $107;
     $108 = $107<<2;
     $109 = (_realloc($105,$108)|0);
     $16 = $109;
     $110 = $7;
     $111 = $14;
     $112 = (($111) + 1)|0;
     $14 = $112;
     $113 = (($110) + ($112<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $16;
     $116 = $17;
     $117 = (($116) - 1)|0;
     $118 = (($115) + ($117<<2)|0);
     HEAP32[$118>>2] = $114;
     break L40;
     break;
    }
    case 82:  {
     HEAP32[(3876)>>2] = 1;
     break L40;
     break;
    }
    case 116:  {
     $119 = $13;
     $120 = ($119|0)!=(0);
     if ($120) {
      label = 33;
      break L34;
     }
     $121 = $7;
     $122 = $14;
     $123 = (($121) + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 2|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126 << 24 >> 24;
     $128 = ($127|0)!=(0);
     if ($128) {
      $129 = $7;
      $130 = $14;
      $131 = (($129) + ($130<<2)|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($132)) + 2|0);
      $9 = $133;
      break L40;
     }
     $134 = $14;
     $135 = $6;
     $136 = (($135) - 1)|0;
     $137 = ($134|0)<($136|0);
     if (!($137)) {
      label = 38;
      break L34;
     }
     $138 = $14;
     $139 = (($138) + 1)|0;
     $14 = $139;
     $140 = $7;
     $141 = $14;
     $142 = (($140) + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $9 = $143;
     break L40;
     break;
    }
    case 115:  {
     $144 = $7;
     $145 = $14;
     $146 = (($144) + ($145<<2)|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ((($147)) + 2|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     $151 = ($150|0)!=(0);
     if ($151) {
      $152 = $7;
      $153 = $14;
      $154 = (($152) + ($153<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($155)) + 2|0);
      HEAP32[$154>>2] = $156;
     } else {
      $157 = $14;
      $158 = $6;
      $159 = (($158) - 1)|0;
      $160 = ($157|0)<($159|0);
      if (!($160)) {
       label = 43;
       break L34;
      }
      $161 = $14;
      $162 = (($161) + 1)|0;
      $14 = $162;
     }
     $163 = $7;
     $164 = $14;
     $165 = (($163) + ($164<<2)|0);
     _exSet(1,$165);
     break L40;
     break;
    }
    case 119:  {
     $166 = $7;
     $167 = $14;
     $168 = (($166) + ($167<<2)|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ((($169)) + 2|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = ($172|0)!=(0);
     if ($173) {
      break L40;
     }
     $174 = $14;
     $175 = $6;
     $176 = (($175) - 1)|0;
     $177 = ($174|0)<($176|0);
     if (!($177)) {
      label = 48;
      break L34;
     }
     $178 = $14;
     $179 = (($178) + 1)|0;
     $14 = $179;
     break L40;
     break;
    }
    default: {
     label = 49;
     break L34;
    }
    }
   } else {
    $180 = $14;
    $181 = $6;
    $182 = (($181) - 1)|0;
    $183 = ($180|0)>=($182|0);
    if ($183) {
     label = 52;
     break L34;
    }
    $184 = $7;
    $185 = $14;
    $186 = (($184) + ($185<<2)|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ((($187)) + 1|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189 << 24 >> 24;
    $191 = (_strchr(11856,$190)|0);
    $192 = ($191|0)!=(0|0);
    if (!($192)) {
     label = 52;
     break L34;
    }
    $193 = $7;
    $194 = $14;
    $195 = (($193) + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ((($196)) + 1|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198 << 24 >> 24;
    $200 = ($199|0)==(45);
    if ($200) {
     $201 = $7;
     $202 = $14;
     $203 = (($201) + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (_strlen($204)|0);
     $206 = (($205) + 2)|0;
     $207 = (_alloc($206)|0);
     $23 = $207;
     $208 = $23;
     $209 = ($208|0)!=(0|0);
     if ($209) {
      $210 = $23;
      HEAP8[$210>>0] = 36;
      $211 = $23;
      $212 = ((($211)) + 1|0);
      $213 = $7;
      $214 = $14;
      $215 = (($213) + ($214<<2)|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = ((($216)) + 1|0);
      (_strcpy($212,$217)|0);
      $218 = $16;
      $219 = $17;
      $220 = (($219) + 1)|0;
      $17 = $220;
      $221 = $220<<2;
      $222 = (_realloc($218,$221)|0);
      $16 = $222;
      $223 = $23;
      $224 = $16;
      $225 = $17;
      $$sink = $223;$$sink3 = $224;$$sink5 = $225;
      label = 57;
     }
    } else {
     $226 = $16;
     $227 = $17;
     $228 = (($227) + 1)|0;
     $17 = $228;
     $229 = $228<<2;
     $230 = (_realloc($226,$229)|0);
     $16 = $230;
     $231 = $7;
     $232 = $14;
     $233 = (($231) + ($232<<2)|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ((($234)) + 1|0);
     $236 = $16;
     $237 = $17;
     $$sink = $235;$$sink3 = $236;$$sink5 = $237;
     label = 57;
    }
    if ((label|0) == 57) {
     label = 0;
     $238 = (($$sink5) - 1)|0;
     $239 = (($$sink3) + ($238<<2)|0);
     HEAP32[$239>>2] = $$sink;
    }
    $240 = $14;
    $241 = (($240) + 1)|0;
    $14 = $241;
    $242 = $7;
    $243 = $14;
    $244 = (($242) + ($243<<2)|0);
    $12 = $244;
    $13 = 1;
   }
  } while(0);
  $245 = $14;
  $246 = (($245) + 1)|0;
  $14 = $246;
 }
 if ((label|0) == 30) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 33) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 38) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 43) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 48) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 49) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 52) {
  _usage();
  $4 = 0;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 else if ((label|0) == 60) {
  _tagInit();
  $247 = $13;
  $248 = ($247|0)!=(0);
  $249 = $9;
  $250 = ($249|0)!=(0|0);
  $or$cond = $248 | $250;
  if ($or$cond) {
   $251 = $14;
   $252 = $6;
   $253 = ($251|0)<($252|0);
   if ($253) {
    _usage();
    $4 = 0;
    $340 = $4;
    STACKTOP = sp;return ($340|0);
   }
  } else {
   $254 = $6;
   $255 = $14;
   $256 = (($254) - ($255))|0;
   $13 = $256;
   $257 = $13;
   $258 = ($257|0)>(0);
   if ($258) {
    $259 = $7;
    $260 = $14;
    $261 = (($259) + ($260<<2)|0);
    $12 = $261;
   }
  }
  $262 = HEAP32[4326]|0;
  $263 = ((($262)) + 4|0);
  $264 = HEAP32[$263>>2]|0;
  _move_cursor($264,0);
  $265 = HEAP32[4327]|0;
  $266 = ((($265)) + 56|0);
  HEAP32[$266>>2] = 0;
  $267 = HEAP32[4327]|0;
  $268 = ((($267)) + 52|0);
  HEAP32[$268>>2] = 0;
  _xvClear();
  $269 = $13;
  $270 = ($269|0)!=(0);
  do {
   if ($270) {
    $271 = $11;
    $272 = ($271|0)==(0);
    $273 = $10;
    $274 = ($273|0)==(0|0);
    $or$cond8 = $272 & $274;
    if ($or$cond8) {
     HEAP32[4328] = 137;
    }
    $275 = $13;
    $276 = $12;
    (_exNext($275,$276,0)|0);
    while(1) {
     $277 = HEAP32[4327]|0;
     $278 = ((($277)) + 76|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)!=(0|0);
     $281 = HEAP32[4327]|0;
     if (!($280)) {
      break;
     }
     $282 = ((($281)) + 76|0);
     $283 = HEAP32[$282>>2]|0;
     HEAP32[4327] = $283;
    }
    $284 = ((($281)) + 4|0);
    $285 = HEAP32[$284>>2]|0;
    HEAP32[4326] = $285;
    _xvUseWindow();
    $286 = $10;
    $287 = ($286|0)!=(0|0);
    if ($287) {
     HEAP32[4328] = 233;
     $288 = $10;
     $289 = (_xvDoSearch($288,47)|0);
     $24 = $289;
     $290 = $24;
     $291 = ($290|0)!=(0|0);
     if (!($291)) {
      break;
     }
     _setpcmark();
     $292 = $24;
     $293 = HEAP32[$292>>2]|0;
     $294 = $24;
     $295 = ((($294)) + 4|0);
     $296 = HEAP32[$295>>2]|0;
     _move_cursor($293,$296);
     $297 = HEAP32[4327]|0;
     $298 = ((($297)) + 68|0);
     HEAP32[$298>>2] = 1;
     break;
    }
    $299 = $11;
    $300 = ($299|0)!=(0);
    if ($300) {
     HEAP32[4328] = 137;
     $301 = $11;
     $302 = ($301|0)<(0);
     if ($302) {
      $303 = HEAP32[4326]|0;
      $304 = ((($303)) + 8|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = HEAP32[$305>>2]|0;
      $307 = ((($306)) + 16|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = $11;
      $310 = (($308) + ($309))|0;
      $11 = $310;
     }
     $311 = $11;
     _xvMoveToLineNumber($311);
    }
   } else {
    $312 = $9;
    $313 = ($312|0)!=(0|0);
    if (!($313)) {
     HEAP32[4328] = 137;
     _show_file_info(1);
     break;
    }
    HEAP32[4328] = 233;
    $314 = $9;
    $315 = (_exTag($314,0,1,0)|0);
    $316 = ($315|0)==(0);
    if ($316) {
     $317 = HEAP32[4327]|0;
     $318 = ((($317)) + 16|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ((($319)) + 80|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = HEAP32[4327]|0;
     $323 = ((($322)) + 16|0);
     $324 = HEAP32[$323>>2]|0;
     FUNCTION_TABLE_vi[$321 & 127]($324);
     (_sleep(2)|0);
     _show_file_info(1);
    }
   }
  } while(0);
  $325 = $16;
  $326 = ($325|0)!=(0|0);
  if ($326) {
   $25 = 0;
   while(1) {
    $327 = $25;
    $328 = $17;
    $329 = ($327|0)<($328|0);
    $330 = $16;
    if (!($329)) {
     break;
    }
    $331 = $25;
    $332 = (($330) + ($331<<2)|0);
    $333 = HEAP32[$332>>2]|0;
    (_exCommand($333)|0);
    $334 = $25;
    $335 = (($334) + 1)|0;
    $25 = $335;
   }
   _free($330);
  }
  _setpcmark();
  HEAP32[4328] = 129;
  _move_window_to_cursor();
  _redraw_all(0);
  _cursupdate();
  _wind_goto();
  HEAP32[4328] = 65535;
  $336 = $15;
  $337 = ($336|0)!=(0|0);
  if ($337) {
   $338 = $15;
   _free($338);
  }
  $339 = HEAP32[4327]|0;
  $4 = $339;
  $340 = $4;
  STACKTOP = sp;return ($340|0);
 }
 return (0)|0;
}
function _usage() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _startup_error(12620);
 _startup_error(11870);
 _startup_error(11907);
 _startup_error(11937);
 _startup_error(11972);
 _startup_error(12007);
 _startup_error(12021);
 _startup_error(12042);
 _startup_error(12072);
 _startup_error(12104);
 _startup_error(12130);
 return;
}
function _init_sline() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4327]|0;
 $1 = ((($0)) + 36|0);
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[4327]|0;
 $4 = ((($3)) + 36|0);
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _show_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 HEAP32[$2>>2] = $varargs;
 $3 = HEAP32[4327]|0;
 $4 = ((($3)) + 36|0);
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[4327]|0;
 $7 = ((($6)) + 36|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 36|0);
 $11 = $1;
 (_vformat($10,$11,$2)|0);
 _update_sline();
 STACKTOP = sp;return;
}
function _show_error($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 $3 = HEAP32[(3348)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  _beep();
 }
 HEAP32[$2>>2] = $varargs;
 $5 = HEAP32[4327]|0;
 $6 = ((($5)) + 36|0);
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[4327]|0;
 $9 = ((($8)) + 36|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[4327]|0;
 $12 = ((($11)) + 36|0);
 $13 = $1;
 (_vformat($12,$13,$2)|0);
 _update_sline();
 STACKTOP = sp;return;
}
function _show_file_info($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $6 = HEAP32[4328]|0;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  _update_sline();
  STACKTOP = sp;return;
 }
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 36|0);
 $2 = $10;
 $11 = $2;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[4326]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = $2;
 if ($18) {
  (_lformat($19,12157,$vararg_buffer)|0);
  $20 = (_bufempty()|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   $1 = 0;
  }
 } else {
  $22 = HEAP32[4326]|0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $24;
  (_lformat($19,12165,$vararg_buffer1)|0);
 }
 $25 = HEAP32[(3876)>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  label = 8;
 } else {
  $27 = HEAP32[4326]|0;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 2;
  $31 = ($30|0)!=(0);
  if ($31) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $32 = $2;
  (_lformat($32,12170,$vararg_buffer3)|0);
 }
 $33 = HEAP32[4326]|0;
 $34 = ((($33)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 1;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $2;
  (_lformat($38,12183,$vararg_buffer5)|0);
 }
 $39 = $1;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  _update_sline();
  STACKTOP = sp;return;
 }
 $41 = HEAP32[4327]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $3 = $45;
 $46 = HEAP32[4326]|0;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $4 = $51;
 $52 = $4;
 $53 = ($52|0)>(0);
 if ($53) {
  $54 = $3;
  $55 = ($54*100)|0;
  $56 = $4;
  $57 = (($55|0) / ($56|0))&-1;
  $58 = $57;
 } else {
  $58 = 0;
 }
 $5 = $58;
 $59 = $2;
 $60 = $3;
 $61 = $4;
 $62 = $5;
 HEAP32[$vararg_buffer7>>2] = $60;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $61;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $62;
 (_lformat($59,12195,$vararg_buffer7)|0);
 _update_sline();
 STACKTOP = sp;return;
}
function _info_update() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3492)>>2]|0;
 $1 = ($0|0)==(1);
 $2 = $1&1;
 _show_file_info($2);
 return;
}
function _tagInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $2 = sp + 24|0;
 $7 = HEAP32[(4388)>>2]|0;
 $0 = $7;
 $8 = $0;
 $9 = ($8|0)==(0|0);
 $10 = HEAP32[4332]|0;
 $11 = ($10|0)!=(0|0);
 $or$cond3 = $9 | $11;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $1 = 0;
 while(1) {
  $12 = $0;
  $13 = $1;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 16;
   break;
  }
  $17 = $0;
  $18 = $1;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_fexpand($20,0)|0);
  $22 = (_fopen($21,13220)|0);
  $3 = $22;
  $23 = $3;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = HEAP32[4332]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $27 = (_clr_alloc(1009,4)|0);
    HEAP32[4332] = $27;
    $28 = HEAP32[4332]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     label = 16;
     break;
    }
   }
   while(1) {
    $4 = $2;
    $6 = 0;
    while(1) {
     $30 = $3;
     $31 = (_getc($30)|0);
     $5 = $31;
     $32 = ($31|0)!=(-1);
     $33 = $5;
     $34 = ($33|0)!=(10);
     $or$cond = $32 & $34;
     if ($or$cond) {
      $35 = $6;
      $36 = (($35) + 1)|0;
      $6 = $36;
      $37 = ($36>>>0)<(512);
      $47 = $37;
     } else {
      $47 = 0;
     }
     $38 = $5;
     if (!($47)) {
      break;
     }
     $39 = $38&255;
     $40 = $4;
     $41 = ((($40)) + 1|0);
     $4 = $41;
     HEAP8[$40>>0] = $39;
    }
    $42 = ($38|0)==(-1);
    if ($42) {
     break;
    }
    $43 = $4;
    HEAP8[$43>>0] = 0;
    _EnterTag($2);
   }
   $44 = $3;
   (_fclose($44)|0);
  }
  $45 = $1;
  $46 = (($45) + 1)|0;
  $1 = $46;
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _EnterTag($0) {
 $0 = $0|0;
 var $$ = 0, $$sink = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $9 = HEAP32[(4356)>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)==(0);
 $$ = $11 ? 2147483647 : $9;
 $6 = $$;
 $12 = $1;
 $13 = (_strrchr($12,59)|0);
 $7 = $13;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = (_strrchr($15,34)|0);
  $8 = $16;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $8;
   $19 = $7;
   $20 = ((($19)) + 1|0);
   $21 = ($18|0)==($20|0);
   if ($21) {
    $22 = $8;
    $23 = ((($22)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(9);
    if ($26) {
     $27 = $7;
     HEAP8[$27>>0] = 0;
    }
   }
  }
 }
 $28 = $1;
 $29 = (_strlen($28)|0);
 $30 = (16 + ($29))|0;
 $31 = (($30) + 1)|0;
 $32 = (_alloc($31)|0);
 $2 = $32;
 $33 = $2;
 $34 = ($33|0)==(0|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $2;
 $36 = ((($35)) + 16|0);
 $37 = $2;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 $39 = $2;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 (_strcpy($41,$42)|0);
 $43 = $2;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_strchr($45,9)|0);
 $47 = $2;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 $53 = $2;
 $54 = ((($53)) + 8|0);
 if ($52) {
  HEAP32[$54>>2] = 12222;
 } else {
  $55 = HEAP32[$54>>2]|0;
  $56 = $2;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = (($58) + ($59)|0);
  $61 = ($55>>>0)>($60>>>0);
  $62 = $2;
  if ($61) {
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $6;
   $66 = (($64) + ($65)|0);
   $$sink = $66;
  } else {
   $67 = ((($62)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $$sink = $68;
  }
  HEAP8[$$sink>>0] = 0;
  $69 = $2;
  $70 = ((($69)) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 1|0);
  HEAP32[$70>>2] = $72;
 }
 $73 = $2;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (_strchr($75,9)|0);
 $77 = $2;
 $78 = ((($77)) + 12|0);
 HEAP32[$78>>2] = $76;
 $79 = $2;
 $80 = ((($79)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 $83 = $2;
 $84 = ((($83)) + 12|0);
 if ($82) {
  HEAP32[$84>>2] = 12231;
 } else {
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($85)) + 1|0);
  HEAP32[$84>>2] = $86;
  HEAP8[$85>>0] = 0;
 }
 $5 = 0;
 $87 = $2;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $4 = $89;
 while(1) {
  $90 = $4;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91 << 24 >> 24;
  $93 = ($92|0)!=(0);
  if (!($93)) {
   break;
  }
  $94 = $5;
  $95 = $94 << 1;
  $5 = $95;
  $96 = $4;
  $97 = HEAP8[$96>>0]|0;
  $98 = $97 << 24 >> 24;
  $99 = $5;
  $100 = $99 ^ $98;
  $5 = $100;
  $101 = $4;
  $102 = ((($101)) + 1|0);
  $4 = $102;
 }
 $103 = HEAP32[4332]|0;
 $104 = $5;
 $105 = (($104>>>0) % 1009)&-1;
 $106 = (($103) + ($105<<2)|0);
 $3 = $106;
 $107 = $3;
 $108 = HEAP32[$107>>2]|0;
 $109 = $2;
 HEAP32[$109>>2] = $108;
 $110 = $2;
 $111 = $3;
 HEAP32[$111>>2] = $110;
 STACKTOP = sp;return;
}
function _tagword() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 8|0;
 $2 = sp + 16|0;
 $3 = $2;
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$1>>2]=HEAP32[$5>>2]|0;HEAP32[$1+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $0 = $12;
 while(1) {
  $13 = $0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(32);
  if (!($15)) {
   $16 = $0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(9);
   if (!($18)) {
    break;
   }
  }
  $19 = (_inc($1)|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   break;
  }
  $21 = HEAP32[$1>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($1)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $0 = $27;
 }
 $28 = $0;
 $29 = $28 << 24 >> 24;
 $30 = ($29>>>0)<(128);
 if ($30) {
  $31 = $0;
  $32 = $31 << 24 >> 24;
  $33 = (_isalnum($32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $35 = $0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(95);
  if (!($37)) {
   STACKTOP = sp;return;
  }
 }
 while(1) {
  $38 = $0;
  $39 = $38 << 24 >> 24;
  $40 = ($39>>>0)<(128);
  if ($40) {
   $41 = $0;
   $42 = $41 << 24 >> 24;
   $43 = (_isalnum($42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $45 = $0;
   $46 = $45 << 24 >> 24;
   $47 = ($46|0)==(95);
   if (!($47)) {
    break;
   }
  }
  $48 = $3;
  $49 = ((($2)) + 50|0);
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $0;
  $52 = $3;
  $53 = ((($52)) + 1|0);
  $3 = $53;
  HEAP8[$52>>0] = $51;
  $54 = (_inc($1)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($1)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $0 = $62;
 }
 $63 = $3;
 $64 = ((($2)) + 50|0);
 $65 = ($63>>>0)>=($64>>>0);
 if ($65) {
  _beep();
  STACKTOP = sp;return;
 } else {
  $66 = $3;
  HEAP8[$66>>0] = 0;
  (_exTag($2,0,1,1)|0);
  STACKTOP = sp;return;
 }
}
function _exTag($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 92|0;
 $13 = sp + 88|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $19 = $5;
 $20 = ($19|0)==(0|0);
 if ($20) {
  label = 3;
 } else {
  $21 = $5;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)==(0);
  if ($24) {
   label = 3;
  } else {
   $25 = $5;
   (_strncpy(19094,$25,31)|0);
  }
 }
 if ((label|0) == 3) {
  $5 = 19094;
 }
 $26 = $5;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = $5;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(0);
  if (!($31)) {
   _gotocmd(0);
   $34 = $5;
   $35 = (_tagLookup($34,$12,$13)|0);
   $11 = $35;
   $36 = $11;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $38 = $7;
    $39 = ($38|0)!=(0);
    if ($39) {
     $40 = HEAP32[4332]|0;
     $41 = ($40|0)==(0|0);
     $42 = $41 ? 12258 : 12271;
     _show_error($42,$vararg_buffer1);
    }
    $4 = 0;
    $136 = $4;
    STACKTOP = sp;return ($136|0);
   }
   $43 = HEAP32[4327]|0;
   $44 = $11;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_xvFindWindowByName($43,$46)|0);
   $10 = $47;
   $48 = $10;
   $49 = ($48|0)!=(0|0);
   do {
    if ($49) {
     $50 = $10;
     HEAP32[4327] = $50;
     $51 = HEAP32[4327]|0;
     $52 = ($51|0)!=(0|0);
     if ($52) {
      $53 = HEAP32[4327]|0;
      $54 = ((($53)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $55;
     } else {
      $56 = 0;
     }
     HEAP32[4326] = $56;
     $9 = 1;
    } else {
     $57 = $8;
     $58 = ($57|0)!=(0);
     if ($58) {
      $59 = (_xvCanSplit()|0);
      $60 = ($59|0)!=(0);
      if ($60) {
       $61 = $11;
       $62 = ((($61)) + 8|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (_exNewBuffer($63,0)|0);
       $65 = ($64|0)!=(0);
       if ($65) {
        $9 = 1;
        break;
       }
      }
     }
     $66 = $6;
     $67 = ($66|0)!=(0);
     if (!($67)) {
      _xvAutoWrite();
      $68 = HEAP32[4326]|0;
      $69 = ((($68)) + 28|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $70 & 1;
      $72 = ($71|0)!=(0);
      if ($72) {
       _show_error(6703,$vararg_buffer3);
       $4 = 0;
       $136 = $4;
       STACKTOP = sp;return ($136|0);
      }
     }
     $73 = $11;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (_access($75,0)|0);
     $77 = ($76|0)==(0);
     if (!($77)) {
      _show_error(12285,$vararg_buffer5);
      $4 = 0;
      $136 = $4;
      STACKTOP = sp;return ($136|0);
     }
     $78 = $6;
     $79 = $11;
     $80 = ((($79)) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_exEditFile($78,$81)|0);
     $83 = ($82|0)!=(0);
     if ($83) {
      $9 = 1;
      break;
     }
     $4 = 0;
     $136 = $4;
     STACKTOP = sp;return ($136|0);
    }
   } while(0);
   $84 = $9;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = $11;
    $87 = ((($86)) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP8[$88>>0]|0;
    $90 = $89 << 24 >> 24;
    switch ($90|0) {
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
     $91 = $11;
     $92 = ((($91)) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (_atol($93)|0);
     _xvMoveToLineNumber($94);
     break;
    }
    case 63: case 47:  {
     $95 = $11;
     $96 = ((($95)) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($97)) + 1|0);
     $99 = (_strsave($98)|0);
     $17 = $99;
     $100 = $17;
     $101 = ($100|0)==(0|0);
     if ($101) {
      $4 = 0;
      $136 = $4;
      STACKTOP = sp;return ($136|0);
     }
     $102 = $17;
     $103 = $17;
     $104 = (_strlen($103)|0);
     $105 = (($102) + ($104)|0);
     $106 = ((($105)) + -1|0);
     $18 = $106;
     $107 = $18;
     $108 = HEAP8[$107>>0]|0;
     $109 = $108 << 24 >> 24;
     $110 = ($109|0)==(47);
     if ($110) {
      label = 38;
     } else {
      $111 = $18;
      $112 = HEAP8[$111>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = ($113|0)==(63);
      if ($114) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $115 = $18;
      HEAP8[$115>>0] = 0;
     }
     $116 = HEAP32[(3924)>>2]|0;
     $14 = $116;
     HEAP32[$vararg_buffer7>>2] = 0;
     $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 0;
     _set_param(36,$vararg_buffer7);
     $117 = HEAP32[(4596)>>2]|0;
     $15 = $117;
     HEAP32[$vararg_buffer10>>2] = 1;
     _set_param(64,$vararg_buffer10);
     $118 = $17;
     $119 = (_xvDoSearch($118,47)|0);
     $16 = $119;
     $120 = $17;
     _free($120);
     $121 = $16;
     $122 = ($121|0)!=(0|0);
     if ($122) {
      _setpcmark();
      $123 = $16;
      $124 = HEAP32[$123>>2]|0;
      $125 = $16;
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      _move_cursor($124,$127);
      $128 = HEAP32[4327]|0;
      $129 = ((($128)) + 68|0);
      HEAP32[$129>>2] = 1;
      _show_file_info(1);
     } else {
      _beep();
     }
     $130 = $14;
     HEAP32[$vararg_buffer13>>2] = $130;
     $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
     HEAP32[$vararg_ptr16>>2] = 0;
     _set_param(36,$vararg_buffer13);
     $131 = $15;
     HEAP32[$vararg_buffer17>>2] = $131;
     _set_param(64,$vararg_buffer17);
     break;
    }
    default: {
     $132 = $11;
     $133 = ((($132)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     HEAP32[$vararg_buffer20>>2] = $134;
     _show_error(12300,$vararg_buffer20);
    }
    }
    _move_window_to_cursor();
    _redraw_all(0);
   }
   $135 = $9;
   $4 = $135;
   $136 = $4;
   STACKTOP = sp;return ($136|0);
  }
 }
 $32 = $7;
 $33 = ($32|0)!=(0);
 if ($33) {
  _show_error(12233,$vararg_buffer);
 } else {
  _beep();
 }
 $4 = 0;
 $136 = $4;
 STACKTOP = sp;return ($136|0);
}
function _tagLookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $6;
  HEAP32[$17>>2] = 0;
  $3 = 0;
  $143 = $3;
  STACKTOP = sp;return ($143|0);
 }
 $18 = HEAP32[4332]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  _tagInit();
  $20 = HEAP32[4332]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $3 = 0;
   $143 = $3;
   STACKTOP = sp;return ($143|0);
  }
 }
 $22 = $4;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = ($24>>>0)<(128);
 if ($25) {
  $26 = $4;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = (_isalnum($28)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $31 = $4;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)==(95);
  if (!($34)) {
   $10 = 0;
   $35 = $4;
   $8 = $35;
   while(1) {
    $36 = $8;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)!=(0);
    if ($39) {
     $40 = $8;
     $41 = HEAP8[$40>>0]|0;
     $42 = $41 << 24 >> 24;
     $43 = ($42>>>0)<(128);
     if ($43) {
      $44 = $8;
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = (_isalnum($46)|0);
      $48 = ($47|0)!=(0);
      if ($48) {
       $54 = 1;
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
     if ((label|0) == 13) {
      label = 0;
      $49 = $8;
      $50 = HEAP8[$49>>0]|0;
      $51 = $50 << 24 >> 24;
      $52 = ($51|0)==(95);
      $54 = $52;
     }
     $53 = $54 ^ 1;
     $144 = $53;
    } else {
     $144 = 0;
    }
    $55 = $10;
    if (!($144)) {
     break;
    }
    $56 = (($55) + 1)|0;
    $10 = $56;
    $57 = $8;
    $58 = ((($57)) + 1|0);
    $8 = $58;
   }
   $59 = $6;
   HEAP32[$59>>2] = $55;
   $3 = 0;
   $143 = $3;
   STACKTOP = sp;return ($143|0);
  }
 }
 $60 = HEAP32[(4356)>>2]|0;
 $12 = $60;
 $61 = $12;
 $62 = ($61|0)==(0);
 $$ = $62 ? 2147483647 : $60;
 $12 = $$;
 $9 = 0;
 $63 = $4;
 $8 = $63;
 $10 = 0;
 while(1) {
  $64 = $8;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   break;
  }
  $68 = $8;
  $69 = HEAP8[$68>>0]|0;
  $70 = $69 << 24 >> 24;
  $71 = ($70>>>0)<(128);
  if ($71) {
   $72 = $8;
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = (_isalnum($74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    label = 22;
   }
  } else {
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
   $77 = $8;
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   $80 = ($79|0)==(95);
   if (!($80)) {
    break;
   }
  }
  $81 = $10;
  $82 = $12;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $9;
  $85 = $84 << 1;
  $9 = $85;
  $86 = $8;
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = $9;
  $90 = $89 ^ $88;
  $9 = $90;
  $91 = $8;
  $92 = ((($91)) + 1|0);
  $8 = $92;
  $93 = $10;
  $94 = (($93) + 1)|0;
  $10 = $94;
 }
 $95 = $10;
 $96 = $5;
 HEAP32[$96>>2] = $95;
 $97 = $10;
 $11 = $97;
 while(1) {
  $98 = $8;
  $99 = HEAP8[$98>>0]|0;
  $100 = $99 << 24 >> 24;
  $101 = ($100|0)!=(0);
  do {
   if ($101) {
    $102 = $8;
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = ($104>>>0)<(128);
    if ($105) {
     $106 = $8;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107 << 24 >> 24;
     $109 = (_isalnum($108)|0);
     $110 = ($109|0)!=(0);
     if ($110) {
      $145 = 1;
      break;
     }
    }
    $111 = $8;
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 << 24 >> 24;
    $114 = ($113|0)==(95);
    $145 = $114;
   } else {
    $145 = 0;
   }
  } while(0);
  $115 = $11;
  if (!($145)) {
   break;
  }
  $116 = (($115) + 1)|0;
  $11 = $116;
  $117 = $8;
  $118 = ((($117)) + 1|0);
  $8 = $118;
 }
 $119 = $6;
 HEAP32[$119>>2] = $115;
 $120 = HEAP32[4332]|0;
 $121 = $9;
 $122 = (($121>>>0) % 1009)&-1;
 $123 = (($120) + ($122<<2)|0);
 $124 = HEAP32[$123>>2]|0;
 $7 = $124;
 while(1) {
  $125 = $7;
  $126 = ($125|0)!=(0|0);
  if (!($126)) {
   label = 38;
   break;
  }
  $127 = $4;
  $128 = $7;
  $129 = ((($128)) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $10;
  $132 = (_strncmp($127,$130,$131)|0);
  $133 = ($132|0)==(0);
  if ($133) {
   $134 = $7;
   $135 = ((($134)) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (_strlen($136)|0);
   $138 = $10;
   $139 = ($137>>>0)<=($138>>>0);
   if ($139) {
    label = 36;
    break;
   }
  }
  $141 = $7;
  $142 = HEAP32[$141>>2]|0;
  $7 = $142;
 }
 if ((label|0) == 36) {
  $140 = $7;
  $3 = $140;
  $143 = $3;
  STACKTOP = sp;return ($143|0);
 }
 else if ((label|0) == 38) {
  $3 = 0;
  $143 = $3;
  STACKTOP = sp;return ($143|0);
 }
 return (0)|0;
}
function _tagSetParam($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 _tagFree();
 STACKTOP = sp;return 1;
}
function _tagFree() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[4332]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $0 = 0;
 while(1) {
  $5 = $0;
  $6 = ($5|0)<(1009);
  $7 = HEAP32[4332]|0;
  if (!($6)) {
   break;
  }
  $8 = $0;
  $9 = (($7) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  while(1) {
   $11 = $1;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $1;
   $2 = $13;
   $14 = $1;
   $15 = HEAP32[$14>>2]|0;
   $1 = $15;
   $16 = $2;
   _free($16);
  }
  $17 = $0;
  $18 = (($17) + 1)|0;
  $0 = $18;
 }
 _free($7);
 HEAP32[4332] = 0;
 STACKTOP = sp;return;
}
function _do_target($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $1 = $0;
 $2 = 0;
 $7 = HEAP32[4327]|0;
 $8 = HEAP32[$7>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$8+4>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 L1: do {
  switch ($11|0) {
  case 71:  {
   $12 = $1;
   $13 = ((($12)) + 36|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[4326]|0;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($14>>>0)>($20>>>0);
   if ($21) {
    $22 = $1;
    $23 = ((($22)) + 8|0);
    HEAP32[$23>>2] = 0;
    STACKTOP = sp;return;
   }
   $24 = HEAP32[4326]|0;
   $25 = $1;
   $26 = ((($25)) + 36|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    $29 = $1;
    $30 = ((($29)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31;
   } else {
    $32 = -1;
   }
   $33 = (_gotoline($24,$32)|0);
   $34 = $1;
   $35 = ((($34)) + 8|0);
   HEAP32[$35>>2] = $33;
   $36 = $1;
   $37 = ((($36)) + 8|0);
   $38 = ((($37)) + 4|0);
   HEAP32[$38>>2] = 0;
   $39 = $1;
   $40 = ((($39)) + 8|0);
   _xvSetPosnToStartOfLine($40,1);
   $2 = 1;
   break;
  }
  case 45:  {
   $2 = 1;
   label = 8;
   break;
  }
  case 16: case 132: case 107:  {
   label = 8;
   break;
  }
  case 13: case 43:  {
   $2 = 1;
   label = 13;
   break;
  }
  case 14: case 133: case 106: case 10:  {
   label = 13;
   break;
  }
  case 95:  {
   $71 = $1;
   $72 = ((($71)) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $79 = 1;
   } else {
    $75 = $1;
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $79 = $77;
   }
   $78 = (($79) - 1)|0;
   $80 = (_xvMoveDown($3,$78,0)|0);
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $1;
    $83 = ((($82)) + 8|0);
    ;HEAP32[$83>>2]=HEAP32[$3>>2]|0;HEAP32[$83+4>>2]=HEAP32[$3+4>>2]|0;
   }
   break;
  }
  case 124:  {
   $84 = $1;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) - 1)|0;
   _xvMoveToColumn($3,$87);
   $88 = $1;
   $89 = ((($88)) + 36|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) - 1)|0;
   $92 = HEAP32[4327]|0;
   $93 = ((($92)) + 64|0);
   HEAP32[$93>>2] = $91;
   $94 = $1;
   $95 = ((($94)) + 8|0);
   ;HEAP32[$95>>2]=HEAP32[$3>>2]|0;HEAP32[$95+4>>2]=HEAP32[$3+4>>2]|0;
   break;
  }
  case 37:  {
   $96 = (_showmatch()|0);
   $4 = $96;
   $97 = $4;
   $98 = ($97|0)!=(0|0);
   if ($98) {
    $99 = $1;
    $100 = ((($99)) + 8|0);
    $101 = $4;
    ;HEAP32[$100>>2]=HEAP32[$101>>2]|0;HEAP32[$100+4>>2]=HEAP32[$101+4>>2]|0;
   }
   break;
  }
  case 139: case 36:  {
   $102 = $1;
   $103 = ((($102)) + 36|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)==(0);
   if ($105) {
    $110 = 1;
   } else {
    $106 = $1;
    $107 = ((($106)) + 36|0);
    $108 = HEAP32[$107>>2]|0;
    $110 = $108;
   }
   $109 = (($110) - 1)|0;
   $111 = (_xvMoveDown($3,$109,0)|0);
   $112 = ($111|0)!=(0);
   if ($112) {
    while(1) {
     $113 = (_xvMoveRight($3,0)|0);
     $114 = ($113|0)!=(0);
     if (!($114)) {
      break;
     }
    }
    $115 = $1;
    $116 = ((($115)) + 8|0);
    ;HEAP32[$116>>2]=HEAP32[$3>>2]|0;HEAP32[$116+4>>2]=HEAP32[$3+4>>2]|0;
    $117 = HEAP32[4327]|0;
    $118 = ((($117)) + 64|0);
    HEAP32[$118>>2] = 2147483647;
    $119 = HEAP32[4327]|0;
    $120 = ((($119)) + 68|0);
    HEAP32[$120>>2] = 0;
   }
   break;
  }
  case 131: case 48: case 94:  {
   $121 = $1;
   $122 = ((($121)) + 28|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)!=(48);
   $125 = $124&1;
   _xvSetPosnToStartOfLine($3,$125);
   $126 = $1;
   $127 = ((($126)) + 8|0);
   ;HEAP32[$127>>2]=HEAP32[$3>>2]|0;HEAP32[$127+4>>2]=HEAP32[$3+4>>2]|0;
   break;
  }
  case 78: case 110:  {
   $128 = $1;
   $129 = ((($128)) + 28|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (_xvDoSearch(19254,$130)|0);
   $4 = $131;
   $132 = $4;
   $133 = ($132|0)!=(0|0);
   if ($133) {
    $134 = $1;
    $135 = ((($134)) + 8|0);
    $136 = $4;
    ;HEAP32[$135>>2]=HEAP32[$136>>2]|0;HEAP32[$135+4>>2]=HEAP32[$136+4>>2]|0;
   }
   break;
  }
  case 93: case 91: case 125: case 123: case 41: case 40:  {
   $137 = $1;
   $138 = ((($137)) + 36|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(0);
   if ($140) {
    $144 = 1;
   } else {
    $141 = $1;
    $142 = ((($141)) + 36|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143;
   }
   $5 = $144;
   while(1) {
    $145 = $5;
    $146 = ($145|0)>(0);
    if (!($146)) {
     break;
    }
    $147 = $1;
    $148 = ((($147)) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $1;
    $151 = ((($150)) + 32|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (_xvLocateTextObject($3,$149,$152)|0);
    $4 = $153;
    $154 = $4;
    $155 = ($154|0)!=(0|0);
    if (!($155)) {
     break;
    }
    $156 = $4;
    ;HEAP32[$3>>2]=HEAP32[$156>>2]|0;HEAP32[$3+4>>2]=HEAP32[$156+4>>2]|0;
    $157 = $5;
    $158 = (($157) + -1)|0;
    $5 = $158;
   }
   $159 = HEAP32[$3>>2]|0;
   $160 = HEAP32[4327]|0;
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)!=($162|0);
   if (!($163)) {
    $164 = ((($3)) + 4|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = HEAP32[4327]|0;
    $167 = HEAP32[$166>>2]|0;
    $168 = ((($167)) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($165|0)!=($169|0);
    if (!($170)) {
     break L1;
    }
   }
   $171 = $1;
   $172 = ((($171)) + 8|0);
   ;HEAP32[$172>>2]=HEAP32[$3>>2]|0;HEAP32[$172+4>>2]=HEAP32[$3+4>>2]|0;
   break;
  }
  case 96: case 39:  {
   $173 = $1;
   $174 = ((($173)) + 32|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = HEAP32[4326]|0;
   $177 = (_getmark($175,$176)|0);
   $6 = $177;
   $178 = $6;
   $179 = ($178|0)==(0|0);
   if ($179) {
    _show_error(12328,$vararg_buffer);
    break L1;
   }
   $180 = $6;
   $181 = HEAP32[$180>>2]|0;
   $182 = $1;
   $183 = ((($182)) + 8|0);
   HEAP32[$183>>2] = $181;
   $184 = $1;
   $185 = ((($184)) + 28|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)==(39);
   if ($187) {
    $2 = 1;
    break L1;
   } else {
    $188 = $6;
    $189 = ((($188)) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $1;
    $192 = ((($191)) + 8|0);
    $193 = ((($192)) + 4|0);
    HEAP32[$193>>2] = $190;
    $194 = HEAP32[4327]|0;
    $195 = ((($194)) + 68|0);
    HEAP32[$195>>2] = 1;
    break L1;
   }
   break;
  }
  case 63: case 47:  {
   $196 = $1;
   $197 = ((($196)) + 28|0);
   $198 = HEAP32[$197>>2]|0;
   _cmd_init($198);
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 8) {
  $41 = $1;
  $42 = ((($41)) + 36|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0);
  if ($44) {
   $48 = 1;
  } else {
   $45 = $1;
   $46 = ((($45)) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47;
  }
  $49 = (_xvMoveUp($3,$48,0)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = HEAP32[4327]|0;
   $52 = ((($51)) + 64|0);
   $53 = HEAP32[$52>>2]|0;
   _xvMoveToColumn($3,$53);
   $54 = $1;
   $55 = ((($54)) + 8|0);
   ;HEAP32[$55>>2]=HEAP32[$3>>2]|0;HEAP32[$55+4>>2]=HEAP32[$3+4>>2]|0;
  }
 }
 else if ((label|0) == 13) {
  $56 = $1;
  $57 = ((($56)) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $63 = 1;
  } else {
   $60 = $1;
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62;
  }
  $64 = (_xvMoveDown($3,$63,0)|0);
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = HEAP32[4327]|0;
   $67 = ((($66)) + 64|0);
   $68 = HEAP32[$67>>2]|0;
   _xvMoveToColumn($3,$68);
   $69 = $1;
   $70 = ((($69)) + 8|0);
   ;HEAP32[$70>>2]=HEAP32[$3>>2]|0;HEAP32[$70+4>>2]=HEAP32[$3+4>>2]|0;
  }
 }
 $199 = $1;
 $200 = ((($199)) + 8|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = ($201|0)!=(0|0);
 $203 = $2;
 $204 = ($203|0)!=(0);
 $or$cond = $202 & $204;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $205 = $1;
 $206 = ((($205)) + 8|0);
 _xvSetPosnToStartOfLine($206,1);
 STACKTOP = sp;return;
}
function _do_left_right($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $1 = $0;
 $6 = HEAP32[4327]|0;
 $7 = HEAP32[$6>>2]|0;
 ;HEAP32[$2>>2]=HEAP32[$7>>2]|0;HEAP32[$2+4>>2]=HEAP32[$7+4>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(108);
 if ($11) {
  $21 = 1;
 } else {
  $12 = $1;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(32);
  if ($15) {
   $21 = 1;
  } else {
   $16 = $1;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(135);
   $21 = $19;
  }
 }
 $20 = $21 ? 67 : 68;
 $3 = $20;
 $22 = $1;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $29 = 1;
 } else {
  $26 = $1;
  $27 = ((($26)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28;
 }
 $4 = $29;
 $5 = 0;
 while(1) {
  $30 = $5;
  $31 = $4;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $3;
  $34 = (FUNCTION_TABLE_iii[$33 & 127]($2,0)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   break;
  }
  $36 = $5;
  $37 = (($36) + 1)|0;
  $5 = $37;
 }
 $38 = $5;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $1;
 $41 = ((($40)) + 8|0);
 ;HEAP32[$41>>2]=HEAP32[$2>>2]|0;HEAP32[$41+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function _do_word($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $1 = $0;
 $9 = $1;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(128);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_isupper($15)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $5 = 1;
   $18 = $1;
   $19 = ((($18)) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 | 32;
   $4 = $21;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = 0;
  $22 = $1;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $4 = $24;
 }
 $25 = $4;
 switch ($25|0) {
 case 98:  {
  $2 = 69;
  break;
 }
 case 119:  {
  $2 = 70;
  break;
 }
 case 101:  {
  $2 = 71;
  break;
 }
 default: {
 }
 }
 $26 = HEAP32[4327]|0;
 $27 = HEAP32[$26>>2]|0;
 ;HEAP32[$6>>2]=HEAP32[$27>>2]|0;HEAP32[$6+4>>2]=HEAP32[$27+4>>2]|0;
 $28 = $1;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $35 = 1;
 } else {
  $32 = $1;
  $33 = ((($32)) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34;
 }
 $3 = $35;
 while(1) {
  $36 = $3;
  $37 = ($36|0)>(0);
  if (!($37)) {
   break;
  }
  $38 = $3;
  $39 = ($38|0)==(1);
  if ($39) {
   $40 = $1;
   $41 = ((($40)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(99);
   $44 = $4;
   $45 = ($44|0)==(119);
   $or$cond = $43 & $45;
   if ($or$cond) {
    $8 = 0;
    $46 = $1;
    $47 = ((($46)) + 16|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 | 8;
    $51 = $50&255;
    HEAP8[$47>>0] = $51;
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $8 = 1;
  }
  $52 = $2;
  $53 = $5;
  $54 = $8;
  $55 = (FUNCTION_TABLE_iiii[$52 & 127]($6,$53,$54)|0);
  $7 = $55;
  $56 = $7;
  $57 = ($56|0)==(0|0);
  if ($57) {
   label = 37;
   break;
  }
  $58 = $3;
  $59 = ($58|0)==(1);
  $60 = $4;
  $61 = ($60|0)==(119);
  $or$cond3 = $59 & $61;
  if ($or$cond3) {
   $62 = $1;
   $63 = ((($62)) + 24|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $7;
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$6>>2]|0;
    $69 = ($67|0)!=($68|0);
    if ($69) {
     while(1) {
      $70 = $7;
      $71 = (_dec($70)|0);
      $72 = ($71|0)==(0);
      if (!($72)) {
       break;
      }
     }
     $73 = $1;
     $74 = ((($73)) + 16|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = $76 | 8;
     $78 = $77&255;
     HEAP8[$74>>0] = $78;
    }
   }
  }
  $79 = $3;
  $80 = ($79|0)==(1);
  do {
   if ($80) {
    $81 = $1;
    $82 = ((($81)) + 24|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(100);
    $85 = $4;
    $86 = ($85|0)==(119);
    $or$cond5 = $84 & $86;
    if ($or$cond5) {
     $87 = $7;
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[4326]|0;
     $90 = ((($89)) + 8|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = HEAP32[$91>>2]|0;
     $93 = ($88|0)==($92|0);
     if ($93) {
      $94 = $7;
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($95)) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $7;
      $99 = ((($98)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + 1)|0;
      $102 = (($97) + ($101)|0);
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)==(0);
      if ($105) {
       $106 = $7;
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($107)) + 8|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $7;
       $111 = ((($110)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($109) + ($112)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $114 << 24 >> 24;
       $116 = ($115>>>0)<(128);
       if ($116) {
        $117 = $7;
        $118 = HEAP32[$117>>2]|0;
        $119 = ((($118)) + 8|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = $7;
        $122 = ((($121)) + 4|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($120) + ($123)|0);
        $125 = HEAP8[$124>>0]|0;
        $126 = $125 << 24 >> 24;
        $127 = (_isalnum($126)|0);
        $128 = ($127|0)!=(0);
        if (!($128)) {
         label = 29;
        }
       } else {
        label = 29;
       }
       if ((label|0) == 29) {
        label = 0;
        $129 = $7;
        $130 = HEAP32[$129>>2]|0;
        $131 = ((($130)) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = $7;
        $134 = ((($133)) + 4|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (($132) + ($135)|0);
        $137 = HEAP8[$136>>0]|0;
        $138 = $137 << 24 >> 24;
        $139 = ($138|0)==(95);
        if (!($139)) {
         $140 = $7;
         $141 = HEAP32[$140>>2]|0;
         $142 = ((($141)) + 8|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = $7;
         $145 = ((($144)) + 4|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = (($143) + ($146)|0);
         $148 = HEAP8[$147>>0]|0;
         $149 = $148 << 24 >> 24;
         $150 = ($149|0)==(32);
         if (!($150)) {
          $151 = $7;
          $152 = HEAP32[$151>>2]|0;
          $153 = ((($152)) + 8|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = $7;
          $156 = ((($155)) + 4|0);
          $157 = HEAP32[$156>>2]|0;
          $158 = (($154) + ($157)|0);
          $159 = HEAP8[$158>>0]|0;
          $160 = $159 << 24 >> 24;
          $161 = ($160|0)==(9);
          if (!($161)) {
           break;
          }
         }
        }
       }
       $162 = $1;
       $163 = ((($162)) + 16|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = $164&255;
       $166 = $165 | 8;
       $167 = $166&255;
       HEAP8[$163>>0] = $167;
      }
     }
    }
   }
  } while(0);
  $168 = $8;
  $169 = ($168|0)==(0);
  if ($169) {
   $170 = $7;
   (_dec($170)|0);
  }
  $171 = $7;
  ;HEAP32[$6>>2]=HEAP32[$171>>2]|0;HEAP32[$6+4>>2]=HEAP32[$171+4>>2]|0;
  $172 = $3;
  $173 = (($172) + -1)|0;
  $3 = $173;
 }
 if ((label|0) == 37) {
  STACKTOP = sp;return;
 }
 $174 = $1;
 $175 = ((($174)) + 8|0);
 ;HEAP32[$175>>2]=HEAP32[$6>>2]|0;HEAP32[$175+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return;
}
function _do_csearch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 102: case 70: case 116: case 84:  {
  $7 = $1;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<(128);
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_isupper($13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $3 = 1;
    $16 = $1;
    $17 = ((($16)) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | 32;
    $20 = $1;
    $21 = ((($20)) + 28|0);
    HEAP32[$21>>2] = $19;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   $3 = 0;
  }
  $22 = $1;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = $1;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(116);
  $30 = $29&1;
  $31 = $1;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $38 = 1;
  } else {
   $35 = $1;
   $36 = ((($35)) + 36|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37;
  }
  $39 = (_searchc($24,$25,$30,$38)|0);
  $2 = $39;
  break;
 }
 case 59: case 44:  {
  $40 = $1;
  $41 = ((($40)) + 16|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 | 8;
  $45 = $44&255;
  HEAP8[$41>>0] = $45;
  $46 = HEAP32[4326]|0;
  $47 = $1;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(44);
  $51 = $50&1;
  $52 = $1;
  $53 = ((($52)) + 36|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  if ($55) {
   $59 = 1;
  } else {
   $56 = $1;
   $57 = ((($56)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58;
  }
  $60 = (_crepsearch($46,$51,$59)|0);
  $2 = $60;
  break;
 }
 default: {
 }
 }
 $61 = $2;
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = $1;
  $64 = ((($63)) + 8|0);
  $65 = $2;
  ;HEAP32[$64>>2]=HEAP32[$65>>2]|0;HEAP32[$64+4>>2]=HEAP32[$65+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _unstuff();
  STACKTOP = sp;return;
 }
}
function _do_HLM($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $1 = $0;
 $9 = $1;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[4327]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 $16 = HEAP32[4327]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $3 = $18;
 $19 = HEAP32[4327]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $4 = $22;
 $23 = $1;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 L4: do {
  switch ($25|0) {
  case 72:  {
   $26 = $3;
   $2 = $26;
   $27 = $1;
   $28 = ((($27)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) - 1)|0;
   $6 = $30;
   while(1) {
    $31 = $6;
    $32 = ($31|0)>(0);
    if (!($32)) {
     break L4;
    }
    $33 = $2;
    $34 = $4;
    $35 = ($33|0)!=($34|0);
    if (!($35)) {
     break L4;
    }
    $36 = $2;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $2 = $38;
    $39 = $6;
    $40 = (($39) + -1)|0;
    $6 = $40;
   }
   break;
  }
  case 76:  {
   $41 = $4;
   $2 = $41;
   $42 = $1;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) - 1)|0;
   $7 = $45;
   while(1) {
    $46 = $7;
    $47 = ($46|0)>(0);
    if (!($47)) {
     break L4;
    }
    $48 = $2;
    $49 = $3;
    $50 = ($48|0)!=($49|0);
    if (!($50)) {
     break L4;
    }
    $51 = $2;
    $52 = HEAP32[$51>>2]|0;
    $2 = $52;
    $53 = $7;
    $54 = (($53) + -1)|0;
    $7 = $54;
   }
   break;
  }
  case 77:  {
   $55 = $3;
   $56 = ((($55)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $4;
   $59 = ((($58)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($57) + ($60))|0;
   $62 = (($61>>>0) / 2)&-1;
   $8 = $62;
   $63 = $3;
   $2 = $63;
   while(1) {
    $64 = $2;
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $8;
    $68 = ($66>>>0)<($67>>>0);
    if (!($68)) {
     break L4;
    }
    $69 = $2;
    $70 = $4;
    $71 = ($69|0)!=($70|0);
    if (!($71)) {
     break L4;
    }
    $72 = $2;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $2 = $74;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $75 = $2;
 $76 = ($75|0)!=(0|0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $2;
 HEAP32[$5>>2] = $77;
 $78 = ((($5)) + 4|0);
 HEAP32[$78>>2] = 0;
 _xvSetPosnToStartOfLine($5,1);
 $79 = $1;
 $80 = ((($79)) + 8|0);
 ;HEAP32[$80>>2]=HEAP32[$5>>2]|0;HEAP32[$80+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function _init_undo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_alloc(16)|0);
 $2 = $3;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 360|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = 1;
 $23 = $1;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 16|0);
 HEAP32[$26>>2] = -1;
 STACKTOP = sp;return;
}
function _free_undo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 360|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _free_changes($8);
 $9 = $2;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 360|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 STACKTOP = sp;return;
}
function _free_changes($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $2 = $5;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  switch ($10|0) {
  case 0:  {
   $11 = $2;
   $12 = ((($11)) + 12|0);
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   _throw($14);
   break;
  }
  case 1:  {
   $15 = $2;
   $16 = ((($15)) + 12|0);
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   _free($18);
   break;
  }
  default: {
  }
  }
  $19 = $2;
  _chfree($19);
 }
 STACKTOP = sp;return;
}
function _start_command() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4326]|0;
 $3 = ((($2)) + 360|0);
 $4 = HEAP32[$3>>2]|0;
 $1 = $4;
 $5 = (_init_change_data()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _init_change_data() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4326]|0;
 $3 = ((($2)) + 360|0);
 $4 = HEAP32[$3>>2]|0;
 $1 = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  _free_changes($10);
  $11 = $1;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = 0;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = 0;
  $15 = $1;
  HEAP32[$15>>2] = 0;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = (_save_position($17)|0);
  $19 = ($18|0)!=(0);
  if (!($19)) {
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $0 = 1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _save_position($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_challoc()|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $7 = $3;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = 3;
  $9 = HEAP32[4327]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 12|0);
  HEAP32[$15>>2] = $13;
  $16 = $3;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $13;
  $18 = HEAP32[4327]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = ((($22)) + 12|0);
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $21;
  $25 = $2;
  $26 = $3;
  _push_change($25,$26);
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _push_change($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = $2;
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _end_command() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[4326]|0;
 $2 = ((($1)) + 360|0);
 $3 = HEAP32[$2>>2]|0;
 $0 = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>(0);
 if (!($6)) {
  _show_error(12341,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 _report();
 STACKTOP = sp;return;
}
function _report() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[4326]|0;
 $2 = ((($1)) + 360|0);
 $3 = HEAP32[$2>>2]|0;
 $0 = $3;
 $4 = HEAP32[4328]|0;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(3972)>>2]|0;
 $11 = ($9|0)>($10|0);
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  HEAP32[$vararg_buffer>>2] = $14;
  _show_message(12381,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $15 = (0 - ($14))|0;
 $16 = HEAP32[(3972)>>2]|0;
 $17 = ($15|0)>($16|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (0 - ($20))|0;
 HEAP32[$vararg_buffer1>>2] = $21;
 _show_message(12396,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _replchars($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = HEAP32[4326]|0;
 $11 = ((($10)) + 360|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = (_init_change_data()|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = (__replchars($15,$16,$17,$18)|0);
 $9 = $19;
 $20 = $9;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $8;
 $23 = ((($22)) + 8|0);
 $24 = $9;
 _push_change($23,$24);
 STACKTOP = sp;return;
}
function __replchars($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = HEAP32[4326]|0;
 $14 = $17;
 $18 = (_challoc()|0);
 $15 = $18;
 $19 = $15;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $4 = 0;
  $154 = $4;
  STACKTOP = sp;return ($154|0);
 }
 $21 = $8;
 $22 = (_strlen($21)|0);
 $11 = $22;
 $23 = $5;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $6;
 $27 = (($25) + ($26)|0);
 $28 = (_strlen($27)|0);
 $12 = $28;
 $29 = $12;
 $30 = $7;
 $31 = ($29|0)<($30|0);
 if ($31) {
  $32 = $12;
  $7 = $32;
 }
 $33 = $11;
 $34 = $7;
 $35 = (($33) - ($34))|0;
 $13 = $35;
 $36 = $7;
 $37 = ($36|0)==(0);
 $38 = $15;
 $39 = ((($38)) + 4|0);
 do {
  if ($37) {
   HEAP32[$39>>2] = 2;
  } else {
   HEAP32[$39>>2] = 1;
   $40 = $7;
   $41 = (($40) + 1)|0;
   $42 = (_alloc($41)|0);
   $43 = $15;
   $44 = ((($43)) + 12|0);
   $45 = ((($44)) + 8|0);
   HEAP32[$45>>2] = $42;
   $46 = $15;
   $47 = ((($46)) + 12|0);
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   $51 = $15;
   if (!($50)) {
    $52 = ((($51)) + 12|0);
    $53 = ((($52)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $5;
    $56 = ((($55)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $6;
    $59 = (($57) + ($58)|0);
    $60 = $7;
    (_strncpy($54,$59,$60)|0);
    $61 = $15;
    $62 = ((($61)) + 12|0);
    $63 = ((($62)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $7;
    $66 = (($64) + ($65)|0);
    HEAP8[$66>>0] = 0;
    break;
   }
   _chfree($51);
   HEAP32[4325] = 0;
   $4 = 0;
   $154 = $4;
   STACKTOP = sp;return ($154|0);
  }
 } while(0);
 $67 = $5;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $15;
 $71 = ((($70)) + 8|0);
 HEAP32[$71>>2] = $69;
 $72 = $6;
 $73 = $15;
 $74 = ((($73)) + 12|0);
 HEAP32[$74>>2] = $72;
 $75 = $11;
 $76 = $15;
 $77 = ((($76)) + 12|0);
 $78 = ((($77)) + 4|0);
 HEAP32[$78>>2] = $75;
 $79 = $13;
 $80 = ($79|0)>(0);
 L16: do {
  if ($80) {
   $81 = $5;
   $82 = $13;
   $83 = (_grow_line($81,$82)|0);
   $84 = ($83|0)==(0);
   if (!($84)) {
    $92 = $5;
    $93 = ((($92)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $6;
    $96 = (($94) + ($95)|0);
    $9 = $96;
    $97 = $9;
    $98 = $13;
    $99 = (($97) + ($98)|0);
    $100 = $12;
    $101 = (($99) + ($100)|0);
    $102 = ((($101)) + 1|0);
    $10 = $102;
    $103 = $9;
    $104 = $12;
    $105 = (($103) + ($104)|0);
    $106 = ((($105)) + 1|0);
    $16 = $106;
    while(1) {
     $107 = $16;
     $108 = $9;
     $109 = ($107>>>0)>($108>>>0);
     if (!($109)) {
      break L16;
     }
     $110 = $16;
     $111 = ((($110)) + -1|0);
     $16 = $111;
     $112 = HEAP8[$111>>0]|0;
     $113 = $10;
     $114 = ((($113)) + -1|0);
     $10 = $114;
     HEAP8[$114>>0] = $112;
    }
   }
   $85 = $7;
   $86 = ($85|0)!=(0);
   if ($86) {
    $87 = $15;
    $88 = ((($87)) + 12|0);
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    _free($90);
   }
   $91 = $15;
   _chfree($91);
   HEAP32[4325] = 0;
   $4 = 0;
   $154 = $4;
   STACKTOP = sp;return ($154|0);
  } else {
   $115 = $13;
   $116 = ($115|0)<(0);
   if ($116) {
    $117 = $13;
    $118 = (0 - ($117))|0;
    $13 = $118;
    $119 = $5;
    $120 = ((($119)) + 8|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $6;
    $123 = (($121) + ($122)|0);
    $10 = $123;
    $124 = $10;
    $125 = $13;
    $126 = (($124) + ($125)|0);
    $9 = $126;
    while(1) {
     $127 = $9;
     $128 = ((($127)) + 1|0);
     $9 = $128;
     $129 = HEAP8[$127>>0]|0;
     $130 = $10;
     $131 = ((($130)) + 1|0);
     $10 = $131;
     HEAP8[$130>>0] = $129;
     $132 = $129 << 24 >> 24;
     $133 = ($132|0)!=(0);
     if (!($133)) {
      break;
     }
    }
   }
  }
 } while(0);
 $134 = $8;
 $9 = $134;
 $135 = $5;
 $136 = ((($135)) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $6;
 $139 = (($137) + ($138)|0);
 $10 = $139;
 while(1) {
  $140 = $9;
  $141 = HEAP8[$140>>0]|0;
  $142 = $141 << 24 >> 24;
  $143 = ($142|0)!=(0);
  if (!($143)) {
   break;
  }
  $144 = $9;
  $145 = ((($144)) + 1|0);
  $9 = $145;
  $146 = HEAP8[$144>>0]|0;
  $147 = $10;
  $148 = ((($147)) + 1|0);
  $10 = $148;
  HEAP8[$147>>0] = $146;
 }
 $149 = $14;
 $150 = ((($149)) + 28|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | 1;
 HEAP32[$150>>2] = $152;
 $153 = $15;
 $4 = $153;
 $154 = $4;
 STACKTOP = sp;return ($154|0);
}
function _repllines($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = HEAP32[4326]|0;
 $9 = ((($8)) + 360|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = (_init_change_data()|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = (__repllines($13,$14,$15)|0);
 $7 = $16;
 $17 = $7;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $6;
  $20 = ((($19)) + 8|0);
  $21 = $7;
  _push_change($20,$21);
 }
 $22 = $6;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 _report();
 STACKTOP = sp;return;
}
function __repllines($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$sink = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond10 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $27 = HEAP32[4327]|0;
 $7 = $27;
 $28 = HEAP32[4326]|0;
 $9 = $28;
 $29 = $9;
 $30 = ((($29)) + 360|0);
 $31 = HEAP32[$30>>2]|0;
 $21 = $31;
 $32 = (_challoc()|0);
 $20 = $32;
 $33 = $20;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $3 = 0;
  $357 = $3;
  STACKTOP = sp;return ($357|0);
 }
 $35 = $20;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = $6;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $6;
  $13 = $39;
  $15 = 1;
  $17 = 0;
  $40 = $6;
  $14 = $40;
  while(1) {
   $41 = $14;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0|0);
   if (!($44)) {
    break;
   }
   $45 = $15;
   $46 = (($45) + 1)|0;
   $15 = $46;
   $47 = $14;
   $48 = (_plines($47)|0);
   $49 = $17;
   $50 = (($49) + ($48))|0;
   $17 = $50;
   $51 = $14;
   $52 = $9;
   _restoremarks($51,$52);
   $53 = $14;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $14 = $55;
  }
  $56 = $14;
  $57 = (_plines($56)|0);
  $58 = $17;
  $59 = (($58) + ($57))|0;
  $17 = $59;
 } else {
  $14 = 0;
  $13 = 0;
  $15 = 0;
  $17 = 0;
 }
 $60 = $4;
 $61 = HEAP32[$60>>2]|0;
 $10 = $61;
 $62 = $4;
 $12 = $62;
 $63 = $10;
 $64 = ((($63)) + 16|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 $67 = $20;
 $68 = ((($67)) + 8|0);
 HEAP32[$68>>2] = $66;
 $16 = 0;
 $69 = $4;
 $11 = $69;
 $18 = 0;
 while(1) {
  $70 = $11;
  $71 = $9;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)!=($73|0);
  if (!($74)) {
   break;
  }
  $75 = $18;
  $76 = $5;
  $77 = ($75|0)<($76|0);
  if (!($77)) {
   break;
  }
  $78 = $11;
  $12 = $78;
  $79 = $11;
  $80 = $9;
  _clrmark($79,$80);
  $81 = $11;
  $82 = (_plines($81)|0);
  $83 = $16;
  $84 = (($83) + ($82))|0;
  $16 = $84;
  $85 = $7;
  $19 = $85;
  while(1) {
   $86 = $19;
   $87 = ((($86)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $9;
   $90 = ($88|0)!=($89|0);
   if (!($90)) {
    $91 = $11;
    $92 = $19;
    $93 = HEAP32[$92>>2]|0;
    $94 = HEAP32[$93>>2]|0;
    $95 = ($91|0)==($94|0);
    if ($95) {
     $96 = $19;
     $97 = HEAP32[$96>>2]|0;
     HEAP32[$97>>2] = 0;
     $98 = $4;
     $99 = $11;
     $100 = (_cntllines($98,$99)|0);
     $22 = $100;
     $101 = $22;
     $102 = ($101|0)>(2147483647);
     $$ = $102 ? 0 : $100;
     $22 = $$;
     $103 = $22;
     $104 = $19;
     $105 = HEAP32[$104>>2]|0;
     $106 = ((($105)) + 4|0);
     HEAP32[$106>>2] = $103;
    }
   }
   $107 = $19;
   $108 = (_xvNextWindow($107)|0);
   $19 = $108;
   $109 = $7;
   $110 = ($108|0)!=($109|0);
   if (!($110)) {
    break;
   }
  }
  $111 = $18;
  $112 = (($111) + 1)|0;
  $18 = $112;
  $113 = $11;
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $11 = $115;
 }
 $116 = $15;
 $117 = ($116|0)==(0);
 do {
  if ($117) {
   $118 = $10;
   $119 = $9;
   $120 = HEAP32[$119>>2]|0;
   $121 = ($118|0)==($120|0);
   if ($121) {
    $122 = $11;
    $123 = $9;
    $124 = ((($123)) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($122|0)==($125|0);
    if ($126) {
     $127 = HEAP32[4328]|0;
     $23 = $127;
     $128 = HEAP32[4328]|0;
     $129 = $128 & -129;
     HEAP32[4328] = $129;
     $130 = (_newline(1)|0);
     $13 = $130;
     $131 = $13;
     $132 = ((($131)) + 16|0);
     HEAP32[$132>>2] = 0;
     $133 = $23;
     HEAP32[4328] = $133;
     $134 = $13;
     $135 = ($134|0)==(0|0);
     if (!($135)) {
      $137 = $13;
      $14 = $137;
      $15 = 1;
      $17 = 1;
      break;
     }
     _show_error(5948,$vararg_buffer);
     $136 = $20;
     _chfree($136);
     $3 = 0;
     $357 = $3;
     STACKTOP = sp;return ($357|0);
    }
   }
  }
 } while(0);
 $138 = HEAP32[4327]|0;
 $8 = $138;
 while(1) {
  $139 = HEAP32[4326]|0;
  $140 = $9;
  $141 = ($139|0)!=($140|0);
  do {
   if (!($141)) {
    $142 = $4;
    $143 = ((($142)) + 16|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[4327]|0;
    $146 = ((($145)) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ((($147)) + 16|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($144>>>0)<($149>>>0);
    if (!($150)) {
     $151 = $12;
     $152 = ((($151)) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = HEAP32[4327]|0;
     $155 = ((($154)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($156)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($153>>>0)<($158>>>0);
     if ($159) {
      $160 = HEAP32[4327]|0;
      $161 = ((($160)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = $4;
      $164 = (_cntplines($162,$163)|0);
      $24 = $164;
      $165 = $17;
      $166 = $16;
      $167 = ($165|0)>($166|0);
      $168 = $24;
      $169 = ($168|0)>(0);
      $or$cond = $167 & $169;
      if ($or$cond) {
       $170 = $24;
       $171 = $17;
       $172 = (($170) + ($171))|0;
       $173 = $16;
       $174 = (($172) - ($173))|0;
       $175 = HEAP32[4327]|0;
       $176 = ((($175)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = (($177) - 2)|0;
       $179 = ($174>>>0)<($178>>>0);
       if ($179) {
        $180 = $24;
        $181 = $17;
        $182 = $16;
        $183 = (($181) - ($182))|0;
        _s_ins($180,$183);
        break;
       }
      }
      $184 = $17;
      $185 = $16;
      $186 = ($184|0)<($185|0);
      if ($186) {
       $187 = $24;
       $188 = $16;
       $189 = (($187) + ($188))|0;
       $190 = $17;
       $191 = (($189) - ($190))|0;
       $192 = HEAP32[4327]|0;
       $193 = ((($192)) + 20|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = (($194) - 2)|0;
       $196 = ($191>>>0)<($195>>>0);
       if ($196) {
        $197 = $24;
        $198 = $16;
        $199 = $17;
        $200 = (($198) - ($199))|0;
        _s_del($197,$200);
       }
      }
     }
    }
   }
  } while(0);
  $201 = HEAP32[4327]|0;
  $202 = (_xvNextDisplayedWindow($201)|0);
  HEAP32[4327] = $202;
  $203 = HEAP32[4327]|0;
  $204 = ($203|0)!=(0|0);
  if ($204) {
   $205 = HEAP32[4327]|0;
   $206 = ((($205)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $207;
  } else {
   $208 = 0;
  }
  HEAP32[4326] = $208;
  $209 = HEAP32[4327]|0;
  $210 = $8;
  $211 = ($209|0)!=($210|0);
  if (!($211)) {
   break;
  }
 }
 $212 = $5;
 $213 = ($212|0)>(0);
 if ($213) {
  $214 = $11;
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($215)) + 4|0);
  HEAP32[$216>>2] = 0;
  $217 = $4;
  HEAP32[$217>>2] = 0;
  $218 = $4;
  $219 = $20;
  $$sink = $218;$$sink5 = $219;
 } else {
  $220 = $20;
  $$sink = 0;$$sink5 = $220;
 }
 $221 = ((($$sink5)) + 12|0);
 $222 = ((($221)) + 4|0);
 HEAP32[$222>>2] = $$sink;
 $223 = $15;
 $224 = $20;
 $225 = ((($224)) + 12|0);
 HEAP32[$225>>2] = $223;
 $226 = $13;
 $227 = ($226|0)!=(0|0);
 if ($227) {
  $228 = $13;
  $229 = $10;
  $230 = ((($229)) + 4|0);
  HEAP32[$230>>2] = $228;
  $231 = $14;
  $232 = $11;
  HEAP32[$232>>2] = $231;
  $233 = $11;
  $234 = $14;
  $235 = ((($234)) + 4|0);
  HEAP32[$235>>2] = $233;
  $236 = $10;
  $237 = $13;
  $$sink6 = $236;$$sink8 = $237;
 } else {
  $238 = $11;
  $239 = $10;
  $240 = ((($239)) + 4|0);
  HEAP32[$240>>2] = $238;
  $241 = $10;
  $242 = $11;
  $$sink6 = $241;$$sink8 = $242;
 }
 HEAP32[$$sink8>>2] = $$sink6;
 $243 = $9;
 $244 = ((($243)) + 28|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $245 | 1;
 HEAP32[$244>>2] = $246;
 $247 = $9;
 $248 = HEAP32[$247>>2]|0;
 $249 = ((($248)) + 4|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = $9;
 $252 = ((($251)) + 4|0);
 HEAP32[$252>>2] = $250;
 while(1) {
  $253 = HEAP32[4327]|0;
  $19 = $253;
  $254 = $19;
  $255 = ((($254)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = $9;
  $258 = ($256|0)!=($257|0);
  $259 = $5;
  $260 = ($259|0)==(0);
  $or$cond10 = $258 | $260;
  if (!($or$cond10)) {
   $261 = $19;
   $262 = HEAP32[$261>>2]|0;
   $263 = HEAP32[$262>>2]|0;
   $264 = ($263|0)==(0|0);
   if ($264) {
    $265 = $19;
    $266 = HEAP32[$265>>2]|0;
    $267 = ((($266)) + 4|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ($268|0)==(0);
    if ($269) {
     $270 = $11;
     $271 = $9;
     $272 = ((($271)) + 8|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ($270|0)!=($273|0);
     $275 = $11;
     if ($274) {
      $279 = $275;
     } else {
      $276 = HEAP32[$275>>2]|0;
      $279 = $276;
     }
     $277 = $19;
     $278 = HEAP32[$277>>2]|0;
     HEAP32[$278>>2] = $279;
    } else {
     $280 = $10;
     $281 = $19;
     $282 = HEAP32[$281>>2]|0;
     HEAP32[$282>>2] = $280;
     $283 = $19;
     $284 = HEAP32[$283>>2]|0;
     $285 = $19;
     $286 = HEAP32[$285>>2]|0;
     $287 = ((($286)) + 4|0);
     $288 = HEAP32[$287>>2]|0;
     (_xvMoveDown($284,$288,0)|0);
    }
    $289 = $19;
    $290 = HEAP32[$289>>2]|0;
    $291 = ((($290)) + 4|0);
    HEAP32[$291>>2] = 0;
    _begin_line(1);
   }
   $292 = $4;
   $293 = ((($292)) + 16|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $19;
   $296 = ((($295)) + 8|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = ((($297)) + 16|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = ($294>>>0)<=($299>>>0);
   if ($300) {
    $301 = $12;
    $302 = ((($301)) + 16|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $19;
    $305 = ((($304)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ((($306)) + 16|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ($303>>>0)>=($308>>>0);
    if ($309) {
     $310 = $19;
     $311 = HEAP32[$310>>2]|0;
     $312 = HEAP32[$311>>2]|0;
     $313 = $19;
     $314 = ((($313)) + 8|0);
     HEAP32[$314>>2] = $312;
    }
   }
  }
  $315 = $19;
  $316 = (_xvNextWindow($315)|0);
  HEAP32[4327] = $316;
  $317 = HEAP32[4327]|0;
  $318 = ($317|0)!=(0|0);
  if ($318) {
   $319 = HEAP32[4327]|0;
   $320 = ((($319)) + 4|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = $321;
  } else {
   $322 = 0;
  }
  HEAP32[4326] = $322;
  $323 = HEAP32[4327]|0;
  $324 = $8;
  $325 = ($323|0)!=($324|0);
  if (!($325)) {
   break;
  }
 }
 $326 = $10;
 $25 = $326;
 $327 = $25;
 $328 = ((($327)) + 16|0);
 $329 = HEAP32[$328>>2]|0;
 $26 = $329;
 $330 = $25;
 $331 = ((($330)) + 4|0);
 $332 = HEAP32[$331>>2]|0;
 $25 = $332;
 while(1) {
  $333 = $25;
  $334 = $9;
  $335 = ((($334)) + 8|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($333|0)!=($336|0);
  if (!($337)) {
   break;
  }
  $338 = $26;
  $339 = (($338) + 1)|0;
  $26 = $339;
  $340 = $25;
  $341 = ((($340)) + 16|0);
  HEAP32[$341>>2] = $339;
  $342 = $25;
  $343 = ((($342)) + 4|0);
  $344 = HEAP32[$343>>2]|0;
  $25 = $344;
 }
 $345 = $9;
 $346 = ((($345)) + 8|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = ((($347)) + 16|0);
 HEAP32[$348>>2] = -1;
 $349 = $15;
 $350 = $5;
 $351 = (($349) - ($350))|0;
 $352 = $21;
 $353 = ((($352)) + 4|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = (($354) + ($351))|0;
 HEAP32[$353>>2] = $355;
 $356 = $20;
 $3 = $356;
 $357 = $3;
 STACKTOP = sp;return ($357|0);
}
function _replbuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $8 = HEAP32[4326]|0;
 $3 = $8;
 $9 = HEAP32[4326]|0;
 $10 = ((($9)) + 360|0);
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $1;
 $13 = ($12|0)==(0|0);
 if ($13) {
  _show_error(12412,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  _show_error(12460,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $17 = $4;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 _free_changes($19);
 $20 = $4;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $5 = $22;
 while(1) {
  $23 = $5;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $5;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $5 = $29;
 }
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = $3;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 _throw($37);
 $38 = $1;
 $39 = $3;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $38;
 $41 = $3;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = $38;
 $44 = $3;
 $45 = HEAP32[$44>>2]|0;
 $46 = $1;
 HEAP32[$46>>2] = $45;
 $47 = $5;
 $48 = $3;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$50>>2] = $47;
 $51 = $3;
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $5;
 $55 = ((($54)) + 4|0);
 HEAP32[$55>>2] = $53;
 $56 = HEAP32[4327]|0;
 $2 = $56;
 while(1) {
  $57 = HEAP32[4326]|0;
  $58 = $3;
  $59 = ($57|0)==($58|0);
  if ($59) {
   $60 = $3;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   _move_cursor($62,0);
   $63 = HEAP32[4327]|0;
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[4327]|0;
   $67 = ((($66)) + 8|0);
   HEAP32[$67>>2] = $65;
  }
  $68 = HEAP32[4327]|0;
  $69 = (_xvNextWindow($68)|0);
  HEAP32[4327] = $69;
  $70 = HEAP32[4327]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = HEAP32[4327]|0;
   $73 = ((($72)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74;
  } else {
   $75 = 0;
  }
  HEAP32[4326] = $75;
  $76 = HEAP32[4327]|0;
  $77 = $2;
  $78 = ($76|0)!=($77|0);
  if (!($78)) {
   break;
  }
 }
 $7 = 0;
 $79 = $3;
 $80 = HEAP32[$79>>2]|0;
 $6 = $80;
 while(1) {
  $81 = $6;
  $82 = $3;
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($81|0)!=($84|0);
  if (!($85)) {
   break;
  }
  $86 = $7;
  $87 = (($86) + 1)|0;
  $7 = $87;
  $88 = $6;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = $86;
  $90 = $6;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $6 = $92;
 }
 $93 = $3;
 $94 = ((($93)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($95)) + 16|0);
 HEAP32[$96>>2] = -1;
 $97 = $3;
 $98 = ((($97)) + 28|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & -2;
 HEAP32[$98>>2] = $100;
 $101 = $3;
 _init_marks($101);
 STACKTOP = sp;return;
}
function _undoline() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4327]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $0 = $4;
 $5 = HEAP32[4326]|0;
 $1 = $5;
 $6 = $1;
 $7 = ((($6)) + 360|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = 0;
 (_init_change_data()|0);
 $9 = $0;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_strlen($12)|0);
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _replchars($9,0,$13,$16);
 $17 = $0;
 _move_cursor($17,0);
 _xvUpdateAllBufferWindows();
 STACKTOP = sp;return;
}
function _undo() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 28|0;
 $7 = HEAP32[4326]|0;
 $8 = ((($7)) + 360|0);
 $9 = HEAP32[$8>>2]|0;
 $1 = $9;
 $10 = HEAP32[4326]|0;
 $0 = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  _show_error(12512,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $2 = $16;
 $17 = $2;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _show_error(12558,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = 0;
 $19 = (_save_position($4)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 HEAP32[$23>>2] = 0;
 while(1) {
  $24 = $2;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $2;
  $5 = $26;
  $27 = $2;
  $28 = HEAP32[$27>>2]|0;
  $2 = $28;
  $29 = $0;
  $30 = $5;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_gotoline($29,$32)|0);
  $6 = $33;
  $3 = 0;
  $34 = $5;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  switch ($36|0) {
  case 0:  {
   $37 = $6;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $5;
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($39>>>0)<($42>>>0);
   if ($43) {
    $44 = $5;
    $45 = ((($44)) + 12|0);
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $49 = $0;
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $6 = $51;
    }
   }
   $52 = $6;
   $53 = $5;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $5;
   $57 = ((($56)) + 12|0);
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (__repllines($52,$55,$59)|0);
   $3 = $60;
   break;
  }
  case 2:  {
   $61 = $6;
   $62 = $5;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $5;
   $66 = ((($65)) + 12|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (__replchars($61,$64,$68,19254)|0);
   $3 = $69;
   break;
  }
  case 1:  {
   $70 = $6;
   $71 = $5;
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $5;
   $75 = ((($74)) + 12|0);
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $5;
   $79 = ((($78)) + 12|0);
   $80 = ((($79)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (__replchars($70,$73,$77,$81)|0);
   $3 = $82;
   $83 = $5;
   $84 = ((($83)) + 12|0);
   $85 = ((($84)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   _free($86);
   break;
  }
  case 3:  {
   $87 = $0;
   $88 = $5;
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (_gotoline($87,$90)|0);
   $92 = $5;
   $93 = ((($92)) + 12|0);
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   _move_cursor($91,$95);
   break;
  }
  default: {
   _show_error(12575,$vararg_buffer3);
  }
  }
  $96 = $3;
  $97 = ($96|0)!=(0|0);
  if ($97) {
   $98 = $3;
   _push_change($4,$98);
  }
  $99 = $5;
  _chfree($99);
 }
 $100 = HEAP32[$4>>2]|0;
 $101 = $1;
 $102 = ((($101)) + 8|0);
 HEAP32[$102>>2] = $100;
 _xvUpdateAllBufferWindows();
 STACKTOP = sp;return;
}
function _xvUpdateScr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = HEAP32[4327]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = HEAP32[4328]|0;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = $3;
 $17 = (($15) + ($16))|0;
 $5 = $17;
 $18 = $6;
 $19 = ((($18)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = $6;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_vii[$20 & 31]($21,$24);
 $25 = $2;
 $4 = $25;
 while(1) {
  $26 = $4;
  $27 = $5;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $6;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $4;
  $33 = (($31) + ($32<<4)|0);
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
  $36 = $6;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $4;
  $40 = (($38) + ($39<<4)|0);
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $8 = $42;
  $43 = $7;
  $44 = $43 & 4;
  $45 = ($44|0)!=(0);
  if ($45) {
   label = 6;
  } else {
   $46 = $8;
   $47 = $46 & 4;
   $48 = ($47|0)!=(0);
   if ($48) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $49 = $6;
   $50 = $4;
   _xvUpdateLine($49,$50);
   $51 = $8;
   $52 = $51 & -61;
   $53 = $7;
   $54 = $53 & 56;
   $55 = $52 | $54;
   $56 = $6;
   $57 = ((($56)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $4;
   $60 = (($58) + ($59<<4)|0);
   $61 = ((($60)) + 12|0);
   HEAP32[$61>>2] = $55;
   $62 = $6;
   $63 = ((($62)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $4;
   $66 = (($64) + ($65<<4)|0);
   $67 = ((($66)) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 & -5;
   HEAP32[$67>>2] = $69;
  }
  $70 = $4;
  $71 = (($70) + 1)|0;
  $4 = $71;
 }
 STACKTOP = sp;return;
}
function _xvUpdateLine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $2;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 $23 = (($21) + ($22<<4)|0);
 $4 = $23;
 $24 = $2;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $3;
 $28 = (($26) + ($27<<4)|0);
 $5 = $28;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $6 = $30;
 $31 = $5;
 $32 = HEAP32[$31>>2]|0;
 $7 = $32;
 $33 = $4;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $8 = $35;
 $36 = $5;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $9 = $38;
 $39 = $4;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $10 = $41;
 $42 = $5;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $11 = $44;
 $14 = 0;
 $13 = 0;
 while(1) {
  $45 = $13;
  $46 = $10;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $13;
  $49 = $11;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $6;
  $52 = $13;
  $53 = (($51) + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $15 = $55;
  $56 = $15;
  $57 = $7;
  $58 = $13;
  $59 = (($57) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60 << 24 >> 24;
  $62 = ($56|0)!=($61|0);
  if ($62) {
   label = 6;
  } else {
   $63 = $8;
   $64 = $13;
   $65 = (($63) + ($64)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $9;
   $69 = $13;
   $70 = (($68) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($67|0)!=($72|0);
   if ($73) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $74 = $2;
   $75 = ((($74)) + 72|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $2;
   $78 = $2;
   $79 = ((($78)) + 24|0);
   $80 = $8;
   $81 = $13;
   $82 = (($80) + ($81)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = (($79) + ($84<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   FUNCTION_TABLE_vii[$76 & 31]($77,$86);
   $87 = $2;
   $88 = ((($87)) + 68|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $2;
   $91 = $3;
   $92 = $13;
   $93 = $15;
   FUNCTION_TABLE_viiii[$89 & 63]($90,$91,$92,$93);
   $94 = $13;
   $95 = (($94) + 1)|0;
   $14 = $95;
  }
  $96 = $13;
  $97 = (($96) + 1)|0;
  $13 = $97;
 }
 $98 = $10;
 $99 = $11;
 $100 = ($98|0)>($99|0);
 if ($100) {
  while(1) {
   $101 = $6;
   $102 = $13;
   $103 = (($101) + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104 << 24 >> 24;
   $106 = ($105|0)==(32);
   if ($106) {
    $107 = $8;
    $108 = $13;
    $109 = (($107) + ($108)|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = ($111|0)==(0);
    $164 = $112;
   } else {
    $164 = 0;
   }
   $113 = $13;
   if (!($164)) {
    break;
   }
   $114 = (($113) + 1)|0;
   $13 = $114;
  }
  $115 = $12;
  $116 = ($113|0)<($115|0);
  if ($116) {
   $117 = $2;
   $118 = $6;
   $119 = $13;
   $120 = (($118) + ($119)|0);
   $121 = $10;
   $122 = $13;
   $123 = (($121) - ($122))|0;
   $124 = $8;
   $125 = $13;
   $126 = (($124) + ($125)|0);
   $127 = $3;
   $128 = $13;
   _xvWriteMultiString($117,$120,$123,$126,$127,$128);
  }
 } else {
  $129 = $11;
  $130 = $10;
  $131 = ($129|0)>($130|0);
  if ($131) {
   $132 = $2;
   $133 = ((($132)) + 72|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $2;
   $136 = $2;
   $137 = ((($136)) + 24|0);
   $138 = HEAP32[$137>>2]|0;
   FUNCTION_TABLE_vii[$134 & 31]($135,$138);
   $139 = $2;
   $140 = ((($139)) + 56|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $2;
   $143 = $3;
   $144 = $13;
   FUNCTION_TABLE_viii[$141 & 31]($142,$143,$144);
  }
 }
 $145 = $5;
 $146 = HEAP32[$145>>2]|0;
 $147 = $4;
 $148 = HEAP32[$147>>2]|0;
 $149 = $10;
 _memcpy(($146|0),($148|0),($149|0))|0;
 $150 = $5;
 $151 = ((($150)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $4;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $10;
 _memcpy(($152|0),($155|0),($156|0))|0;
 $157 = $5;
 $158 = HEAP32[$157>>2]|0;
 $159 = $10;
 $160 = (($158) + ($159)|0);
 HEAP8[$160>>0] = 0;
 $161 = $10;
 $162 = $5;
 $163 = ((($162)) + 8|0);
 HEAP32[$163>>2] = $161;
 STACKTOP = sp;return;
}
function _xvWriteMultiString($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $6;
 $15 = ((($14)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $6;
 $18 = $6;
 $19 = ((($18)) + 24|0);
 $20 = $9;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($19) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_vii[$16 & 31]($17,$24);
 $25 = $9;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $13 = $27;
 $12 = 0;
 while(1) {
  $28 = $12;
  $29 = $8;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $9;
  $32 = $12;
  $33 = (($31) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $13;
  $37 = ($35|0)!=($36|0);
  if ($37) {
   $38 = $6;
   $39 = ((($38)) + 72|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $6;
   $42 = $6;
   $43 = ((($42)) + 24|0);
   $44 = $9;
   $45 = $12;
   $46 = (($44) + ($45)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (($43) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   FUNCTION_TABLE_vii[$40 & 31]($41,$50);
   $51 = $9;
   $52 = $12;
   $53 = (($51) + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $13 = $55;
  }
  $56 = $6;
  $57 = ((($56)) + 68|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = $10;
  $61 = $11;
  $62 = (($61) + 1)|0;
  $11 = $62;
  $63 = $7;
  $64 = $12;
  $65 = (($63) + ($64)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  FUNCTION_TABLE_viiii[$58 & 63]($59,$60,$61,$67);
  $68 = $12;
  $69 = (($68) + 1)|0;
  $12 = $69;
 }
 $70 = $6;
 $71 = ((($70)) + 72|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $6;
 $74 = $6;
 $75 = ((($74)) + 24|0);
 $76 = HEAP32[$75>>2]|0;
 FUNCTION_TABLE_vii[$72 & 31]($73,$76);
 STACKTOP = sp;return;
}
function _xvMarkDirty($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = HEAP32[4327]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($11) + ($12<<4)|0);
 $2 = $13;
 $14 = $5;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($16) + ($17<<4)|0);
 $3 = $18;
 $19 = $2;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & -5;
 $23 = $3;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & -5;
 $27 = ($22|0)!=($26|0);
 if (!($27)) {
  $28 = $2;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $4 = $30;
  $31 = $3;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)!=($33|0);
  if (!($34)) {
   $35 = $2;
   $36 = HEAP32[$35>>2]|0;
   $37 = $3;
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = (_memcmp($36,$38,$39)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    $42 = $2;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $3;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $4;
    $49 = (_memcmp($44,$47,$48)|0);
    $50 = ($49|0)!=(0);
    if (!($50)) {
     $59 = $3;
     $60 = ((($59)) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 & -5;
     HEAP32[$60>>2] = $62;
     $63 = $2;
     $64 = ((($63)) + 12|0);
     HEAP32[$64>>2] = $62;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $51 = $3;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 | 4;
 HEAP32[$52>>2] = $54;
 $55 = $2;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 | 4;
 HEAP32[$56>>2] = $58;
 STACKTOP = sp;return;
}
function _xvClearLine($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[4327]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($8) + ($9<<4)|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = $2;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($14) + ($15<<4)|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP8[$17>>0] = 0;
 $18 = $1;
 _xvMarkDirty($18);
 STACKTOP = sp;return;
}
function _xvClear() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[4327]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $0 = $5;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $0;
 $10 = ((($9)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = $0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$11 & 31]($12,$15);
 $16 = $0;
 $17 = ((($16)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 FUNCTION_TABLE_vi[$18 & 127]($19);
 $1 = 0;
 while(1) {
  $20 = $1;
  $21 = $2;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $1;
  _xvClearLine($23);
  $24 = $1;
  $25 = (($24) + 1)|0;
  $1 = $25;
 }
 STACKTOP = sp;return;
}
function _do_cmd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 do {
  switch ($8|0) {
  case 128:  {
   _exHelp();
   STACKTOP = sp;return;
   break;
  }
  case 12: case 18:  {
   _redraw_all(1);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   _show_file_info(1);
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   _tagword();
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $9 = $1;
   $10 = ((($9)) + 48|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $11;
   _stuff(12643,$vararg_buffer);
   STACKTOP = sp;return;
   break;
  }
  case 89:  {
   $12 = $1;
   $13 = ((($12)) + 48|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = ((($15)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    $22 = 1;
   } else {
    $19 = $1;
    $20 = ((($19)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   }
   HEAP32[$vararg_buffer1>>2] = $14;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $22;
   _stuff(12649,$vararg_buffer1);
   STACKTOP = sp;return;
   break;
  }
  case 67:  {
   $23 = $1;
   $24 = ((($23)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $25;
   _stuff(12657,$vararg_buffer5);
   STACKTOP = sp;return;
   break;
  }
  case 83:  {
   $26 = $1;
   $27 = ((($26)) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $1;
   $30 = ((($29)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $36 = 1;
   } else {
    $33 = $1;
    $34 = ((($33)) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35;
   }
   HEAP32[$vararg_buffer8>>2] = $28;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $36;
   _stuff(12663,$vararg_buffer8);
   STACKTOP = sp;return;
   break;
  }
  case 80: case 112:  {
   HEAP32[4268] = 2;
   $37 = HEAP32[4327]|0;
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = ((($39)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(112);
   $43 = $42 ? 0 : 1;
   $44 = $1;
   $45 = ((($44)) + 48|0);
   $46 = HEAP32[$45>>2]|0;
   _do_put($38,$43,$46);
   $47 = $1;
   $48 = ((($47)) + 48|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49>>>0)<(128);
   if ($50) {
    $51 = $1;
    $52 = ((($51)) + 48|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_isdigit($53)|0);
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $1;
     $57 = ((($56)) + 48|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)!=(48);
     if ($59) {
      $60 = $1;
      $61 = ((($60)) + 48|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)!=(57);
      if ($63) {
       $64 = $1;
       $65 = ((($64)) + 48|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + 1)|0;
       HEAP32[$65>>2] = $67;
      }
     }
    }
   }
   HEAP32[(17088)>>2] = 0;
   HEAP32[(17084)>>2] = 0;
   $68 = $1;
   $69 = ((($68)) + 48|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $1;
   $72 = ((($71)) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $81 = 1;
   } else {
    $75 = $1;
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $81 = $77;
   }
   $78 = $1;
   $79 = ((($78)) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   HEAP32[$vararg_buffer12>>2] = $70;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $81;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $80;
   (_lformat((17076),12671,$vararg_buffer12)|0);
   STACKTOP = sp;return;
   break;
  }
  case 115:  {
   $82 = (_start_command()|0);
   $83 = ($82|0)!=(0);
   if (!($83)) {
    STACKTOP = sp;return;
   }
   $84 = HEAP32[4327]|0;
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = (_plines($86)|0);
   $2 = $87;
   $88 = HEAP32[4327]|0;
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[4327]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $1;
   $96 = ((($95)) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(0);
   if ($98) {
    $102 = 1;
   } else {
    $99 = $1;
    $100 = ((($99)) + 36|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101;
   }
   _replchars($90,$94,$102,19254);
   $103 = $2;
   $104 = HEAP32[4327]|0;
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$105>>2]|0;
   $107 = (_plines($106)|0);
   $108 = ($103|0)!=($107|0);
   $109 = $108&1;
   _updateline($109);
   HEAP32[4268] = 0;
   HEAP32[(17088)>>2] = 0;
   HEAP32[(17084)>>2] = 0;
   $110 = $1;
   $111 = ((($110)) + 36|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(0);
   if ($113) {
    $117 = 1;
   } else {
    $114 = $1;
    $115 = ((($114)) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $116;
   }
   HEAP32[$vararg_buffer17>>2] = $117;
   (_lformat((17076),12679,$vararg_buffer17)|0);
   _startinsert(0,0);
   STACKTOP = sp;return;
   break;
  }
  case 47: case 63: case 58:  {
   $118 = $1;
   $119 = ((($118)) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   _cmd_init($120);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $121 = HEAP32[4327]|0;
   $122 = HEAP32[$121>>2]|0;
   $123 = HEAP32[$122>>2]|0;
   $124 = HEAP32[4327]|0;
   $125 = HEAP32[$124>>2]|0;
   $126 = HEAP32[$125>>2]|0;
   (_exAmpersand($123,$126,19254)|0);
   _begin_line(1);
   _updateline(0);
   STACKTOP = sp;return;
   break;
  }
  case 114: case 82:  {
   $127 = $1;
   $128 = ((($127)) + 28|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(114);
   $131 = $130 ? 1 : 0;
   HEAP32[4268] = $131;
   HEAP32[(17088)>>2] = 0;
   HEAP32[(17084)>>2] = 0;
   $132 = $1;
   $133 = ((($132)) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (_flexaddch((17076),$134)|0);
   $136 = ($135|0)!=(0);
   if (!($136)) {
    STACKTOP = sp;return;
   }
   $137 = $1;
   $138 = ((($137)) + 28|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $1;
   $141 = ((($140)) + 36|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   if ($143) {
    $148 = 1;
   } else {
    $144 = $1;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $148 = $146;
   }
   $147 = (($148) - 1)|0;
   _startreplace($139,$147);
   STACKTOP = sp;return;
   break;
  }
  case 74:  {
   $149 = HEAP32[4327]|0;
   $150 = HEAP32[$149>>2]|0;
   $151 = HEAP32[$150>>2]|0;
   $5 = $151;
   $152 = (_start_command()|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    _beep();
    STACKTOP = sp;return;
   }
   $154 = $5;
   $155 = ((($154)) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (_strlen($156)|0);
   $4 = $157;
   $158 = $1;
   $159 = ((($158)) + 36|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($160|0)==(0);
   if ($161) {
    $166 = 1;
   } else {
    $162 = $1;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $166 = $164;
   }
   $165 = (($166) - 1)|0;
   $3 = $165;
   while(1) {
    $167 = $5;
    $168 = (_xvJoinLine($167,0)|0);
    $169 = ($168|0)!=(0);
    if (!($169)) {
     label = 40;
     break;
    }
    $170 = $3;
    $171 = (($170) + -1)|0;
    $3 = $171;
    $172 = ($171|0)>(0);
    if (!($172)) {
     break;
    }
   }
   if ((label|0) == 40) {
    _beep();
   }
   $173 = $5;
   $174 = ((($173)) + 8|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $4;
   $177 = (($175) + ($176)|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178 << 24 >> 24;
   $180 = ($179|0)==(0);
   if ($180) {
    $181 = $4;
    $182 = (($181) + -1)|0;
    $4 = $182;
   }
   $183 = $5;
   $184 = $4;
   _move_cursor($183,$184);
   _xvUpdateAllBufferWindows();
   _end_command();
   HEAP32[4268] = 2;
   HEAP32[(17088)>>2] = 0;
   HEAP32[(17084)>>2] = 0;
   $185 = $1;
   $186 = ((($185)) + 28|0);
   $187 = HEAP32[$186>>2]|0;
   (_flexaddch((17076),$187)|0);
   STACKTOP = sp;return;
   break;
  }
  case 30: case 136:  {
   _exEditAlternateFile();
   STACKTOP = sp;return;
   break;
  }
  case 129: case 117:  {
   _undo();
   STACKTOP = sp;return;
   break;
  }
  case 85:  {
   _undoline();
   STACKTOP = sp;return;
   break;
  }
  case 26:  {
   _exSuspend(0);
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $188 = $1;
   $189 = ((($188)) + 36|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($190|0)==(0);
   if ($191) {
    $196 = 1;
   } else {
    $192 = $1;
    $193 = ((($192)) + 36|0);
    $194 = HEAP32[$193>>2]|0;
    $196 = $194;
   }
   $195 = (0 - ($196))|0;
   _xvResizeWindow($195);
   _move_cursor_to_window();
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $197 = $1;
   $198 = ((($197)) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ($199|0)==(0);
   if ($200) {
    $204 = 1;
   } else {
    $201 = $1;
    $202 = ((($201)) + 36|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $203;
   }
   _xvResizeWindow($204);
   STACKTOP = sp;return;
   break;
  }
  case 15:  {
   _xvResizeWindow(2147483647);
   STACKTOP = sp;return;
   break;
  }
  case 103:  {
   $205 = HEAP32[4327]|0;
   $206 = (_xvNextDisplayedWindow($205)|0);
   HEAP32[4327] = $206;
   $207 = HEAP32[4327]|0;
   $208 = ($207|0)!=(0|0);
   if ($208) {
    $209 = HEAP32[4327]|0;
    $210 = ((($209)) + 4|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $211;
   } else {
    $212 = 0;
   }
   HEAP32[4326] = $212;
   _xvUseWindow();
   _move_cursor_to_window();
   _cursupdate();
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   $213 = $1;
   $214 = ((($213)) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   _yp_stuff_input($215,1,1);
   STACKTOP = sp;return;
   break;
  }
  case 109:  {
   $216 = $1;
   $217 = ((($216)) + 32|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = HEAP32[4326]|0;
   $220 = HEAP32[4327]|0;
   $221 = HEAP32[$220>>2]|0;
   $222 = (_setmark($218,$219,$221)|0);
   $223 = ($222|0)!=(0);
   if ($223) {
    STACKTOP = sp;return;
   }
   _beep();
   STACKTOP = sp;return;
   break;
  }
  case 90:  {
   $224 = $1;
   $225 = ((($224)) + 32|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = ($226|0)!=(90);
   if ($227) {
    _beep();
    STACKTOP = sp;return;
   }
   $228 = (_exXit()|0);
   $229 = ($228|0)!=(0);
   if ($229) {
    STACKTOP = sp;return;
   }
   _unstuff();
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $230 = (_flexgetstr((17076))|0);
   HEAP32[$vararg_buffer20>>2] = $230;
   _stuff(12801,$vararg_buffer20);
   $231 = HEAP32[4268]|0;
   $232 = ($231|0)!=(2);
   if (!($232)) {
    STACKTOP = sp;return;
   }
   _yp_stuff_input(60,1,0);
   $233 = HEAP32[4268]|0;
   $234 = ($233|0)==(0);
   if (!($234)) {
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer23>>2] = 27;
   _stuff(12683,$vararg_buffer23);
   STACKTOP = sp;return;
   break;
  }
  default: {
   _beep();
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _do_page($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 $8 = HEAP32[4327]|0;
 $9 = ((($8)) + 12|0);
 $10 = ((($8)) + 8|0);
 $$sink = $7 ? $10 : $9;
 $11 = HEAP32[$$sink>>2]|0;
 _move_cursor($11,0);
 $12 = HEAP32[4327]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[4326]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==($17|0);
 if ($18) {
  $19 = HEAP32[4326]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  _move_cursor($22,0);
 }
 $23 = HEAP32[4327]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25>>>0)>(10);
 do {
  if ($26) {
   $2 = 2;
  } else {
   $27 = HEAP32[4327]|0;
   $28 = ((($27)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)>(3);
   if ($30) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while(0);
 $31 = $1;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(6);
 if ($34) {
  $35 = $2;
  $36 = (0 - ($35))|0;
  $3 = $36;
  $37 = $1;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $45 = 1;
  } else {
   $41 = $1;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $45 = $43;
  }
  $44 = (($45) - 1)|0;
  $46 = HEAP32[4327]|0;
  $47 = ((($46)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $2;
  $50 = (($48) - ($49))|0;
  $51 = (($50) - 1)|0;
  $52 = Math_imul($44, $51)|0;
  $53 = $3;
  $54 = (($53) + ($52))|0;
  $3 = $54;
 } else {
  $55 = $1;
  $56 = ((($55)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0);
  if ($58) {
   $63 = 1;
  } else {
   $59 = $1;
   $60 = ((($59)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $63 = $61;
  }
  $62 = (0 - ($63))|0;
  $64 = HEAP32[4327]|0;
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $2;
  $68 = (($66) - ($67))|0;
  $69 = (($68) - 1)|0;
  $70 = Math_imul($62, $69)|0;
  $3 = $70;
 }
 $71 = $3;
 $72 = ($71|0)>(0);
 $73 = HEAP32[4327]|0;
 $74 = HEAP32[$73>>2]|0;
 $75 = $3;
 if ($72) {
  (_xvMoveDown($74,$75,1)|0);
 } else {
  $76 = (0 - ($75))|0;
  (_xvMoveUp($74,$76,1)|0);
 }
 _begin_line(1);
 $77 = HEAP32[4327]|0;
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[4327]|0;
 $81 = ((($80)) + 8|0);
 HEAP32[$81>>2] = $79;
 _redraw_window(0);
 $82 = $1;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(2);
 if (!($85)) {
  _show_file_info(1);
  STACKTOP = sp;return;
 }
 _move_window_to_cursor();
 _cursupdate();
 $86 = HEAP32[4327]|0;
 $87 = ((($86)) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$88>>2]|0;
 _move_cursor($89,0);
 _begin_line(1);
 _show_file_info(1);
 STACKTOP = sp;return;
}
function _do_scroll($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = HEAP32[(4020)>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[(4020)>>2]|0;
  $10 = $5;
 } else {
  $6 = HEAP32[4327]|0;
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8>>>0) / 2)&-1;
  $10 = $9;
 }
 $2 = $10;
 $11 = $1;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 4:  {
  $14 = $2;
  _scrollup($14);
  $15 = HEAP32[4327]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (_xvMoveDown($16,$17,1)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   _info_update();
   $20 = HEAP32[4327]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[4327]|0;
   $23 = ((($22)) + 64|0);
   $24 = HEAP32[$23>>2]|0;
   _xvMoveToColumn($21,$24);
  }
  break;
 }
 case 21:  {
  $25 = $2;
  _scrolldown($25);
  $26 = HEAP32[4327]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $2;
  $29 = (_xvMoveUp($27,$28,1)|0);
  $30 = ($29|0)!=(0);
  if ($30) {
   _info_update();
   $31 = HEAP32[4327]|0;
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[4327]|0;
   $34 = ((($33)) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   _xvMoveToColumn($32,$35);
  }
  break;
 }
 case 5:  {
  $36 = $1;
  $37 = ((($36)) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $43 = 1;
  } else {
   $40 = $1;
   $41 = ((($40)) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42;
  }
  _scrollup($43);
  break;
 }
 case 25:  {
  $44 = $1;
  $45 = ((($44)) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   $51 = 1;
  } else {
   $48 = $1;
   $49 = ((($48)) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50;
  }
  _scrolldown($51);
  break;
 }
 default: {
 }
 }
 _redraw_window(0);
 _move_cursor_to_window();
 STACKTOP = sp;return;
}
function _do_z($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 13: case 10:  {
  $4 = 1;
  break;
 }
 case 46:  {
  $8 = HEAP32[4327]|0;
  $9 = ((($8)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10>>>0) / 2)&-1;
  $4 = $11;
  break;
 }
 case 45:  {
  $12 = HEAP32[4327]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - 1)|0;
  $4 = $15;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $16 = $1;
 $17 = ((($16)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  _xvMoveToLineNumber($22);
 }
 $23 = HEAP32[4327]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $2 = $25;
 $3 = 0;
 while(1) {
  $26 = $3;
  $27 = $4;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $2;
  $30 = HEAP32[4326]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)!=($31|0);
  if (!($32)) {
   break;
  }
  $33 = $2;
  $34 = (_plines($33)|0);
  $35 = $3;
  $36 = (($35) + ($34))|0;
  $3 = $36;
  $37 = $2;
  $38 = HEAP32[4327]|0;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  $40 = $2;
  $41 = HEAP32[$40>>2]|0;
  $2 = $41;
 }
 _move_cursor_to_window();
 _cursupdate();
 _redraw_window(0);
 STACKTOP = sp;return;
}
function _do_x($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = 1;
 } else {
  $12 = $1;
  $13 = ((($12)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
 }
 $4 = $15;
 HEAP32[4268] = 2;
 HEAP32[(17088)>>2] = 0;
 HEAP32[(17084)>>2] = 0;
 $16 = $4;
 $17 = $1;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $19;
 (_lformat((17076),12686,$vararg_buffer)|0);
 $20 = HEAP32[4327]|0;
 $21 = HEAP32[$20>>2]|0;
 $2 = $21;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_plines($23)|0);
 $6 = $24;
 $25 = $1;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(88);
 if ($28) {
  $5 = 0;
  while(1) {
   $29 = $5;
   $30 = $4;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $32 = (_one_left(0)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    break;
   }
   $34 = $5;
   $35 = (($34) + 1)|0;
   $5 = $35;
  }
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = ($37|0)==(0);
  if ($38) {
   _beep();
   STACKTOP = sp;return;
  }
 } else {
  $39 = $2;
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) + ($45)|0);
  $7 = $46;
  $5 = 0;
  while(1) {
   $47 = $5;
   $48 = $4;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $7;
   $51 = $5;
   $52 = (($50) + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   $56 = $5;
   $57 = (($56) + 1)|0;
   $5 = $57;
  }
  $58 = $5;
  $4 = $58;
  $59 = $2;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = ($64|0)==(0);
  if ($65) {
   _beep();
   STACKTOP = sp;return;
  }
 }
 $66 = $2;
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$3>>2] = $67;
 $68 = $2;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $4;
 $72 = (($70) + ($71))|0;
 $73 = (($72) - 1)|0;
 $74 = ((($3)) + 4|0);
 HEAP32[$74>>2] = $73;
 _yp_push_deleted();
 $75 = $2;
 $76 = $1;
 $77 = ((($76)) + 48|0);
 $78 = HEAP32[$77>>2]|0;
 (_do_yank($75,$3,1,$78)|0);
 $79 = $2;
 $80 = HEAP32[$79>>2]|0;
 $81 = $2;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $4;
 _replchars($80,$83,$84,19254);
 $85 = $2;
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $2;
 $90 = ((($89)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($88) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93 << 24 >> 24;
 $95 = ($94|0)==(0);
 if ($95) {
  (_one_left(0)|0);
 }
 $96 = $6;
 $97 = $2;
 $98 = HEAP32[$97>>2]|0;
 $99 = (_plines($98)|0);
 $100 = ($96|0)!=($99|0);
 $101 = $100&1;
 _updateline($101);
 STACKTOP = sp;return;
}
function _do_rchar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $1 = $0;
 HEAP32[4268] = 2;
 HEAP32[(17088)>>2] = 0;
 HEAP32[(17084)>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_flexaddch((17076),$9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[4327]|0;
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $3 = $17;
 $18 = $3;
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(0);
 if ($21) {
  _beep();
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $29 = 1;
 } else {
  $26 = $1;
  $27 = ((($26)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28;
 }
 $6 = $29;
 (_start_command()|0);
 while(1) {
  $30 = $3;
  $31 = $2;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($30) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $4 = $36;
  $37 = $1;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  switch ($39|0) {
  case 126:  {
   $40 = $4;
   $41 = ($40>>>0)<(128);
   do {
    if ($41) {
     $42 = $4;
     $43 = (_isalpha($42)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = $4;
      $46 = ($45>>>0)<(128);
      if ($46) {
       $47 = $4;
       $48 = (_islower($47)|0);
       $49 = ($48|0)!=(0);
       if ($49) {
        $50 = $4;
        $51 = $50 & 95;
        $56 = $51;
        break;
       }
      }
      $52 = $4;
      $53 = $52 | 32;
      $56 = $53;
     } else {
      label = 14;
     }
    } else {
     label = 14;
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    $54 = $4;
    $56 = $54;
   }
   $55 = $56&255;
   HEAP8[$5>>0] = $55;
   break;
  }
  case 31:  {
   $57 = $4;
   $58 = $57 ^ 128;
   $59 = $58&255;
   HEAP8[$5>>0] = $59;
   $60 = HEAP8[$5>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $4;
    $64 = $63&255;
    HEAP8[$5>>0] = $64;
   }
   break;
  }
  default: {
  }
  }
  $65 = ((($5)) + 1|0);
  HEAP8[$65>>0] = 0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $2;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  _replchars($67,$70,1,$5);
  _updateline(0);
  $71 = (_one_right(0)|0);
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = $6;
  $74 = (($73) + -1)|0;
  $6 = $74;
  $75 = ($74|0)>(0);
  if (!($75)) {
   break;
  }
 }
 _end_command();
 STACKTOP = sp;return;
}
function _do_ins($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 $3 = (_start_command()|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 HEAP32[4268] = 0;
 HEAP32[(17088)>>2] = 0;
 HEAP32[(17084)>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_flexaddch((17076),$7)|0);
 $9 = ($8|0)!=(0);
 L4: do {
  if ($9) {
   $10 = $1;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   switch ($12|0) {
   case 79: case 111:  {
    $13 = $1;
    $14 = ((($13)) + 28|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(111);
    if ($16) {
     $17 = HEAP32[4327]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = (_openfwd($18,0)|0);
     $22 = $19;
    } else {
     $20 = (_openbwd()|0);
     $22 = $20;
    }
    $21 = ($22|0)==(0);
    if ($21) {
     break L4;
    }
    break;
   }
   case 73:  {
    _begin_line(1);
    break;
   }
   case 65:  {
    while(1) {
     $23 = (_one_right(1)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      break;
     }
    }
    break;
   }
   case 97:  {
    (_one_right(1)|0);
    break;
   }
   default: {
   }
   }
   $25 = $1;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) - 65)|0;
   $29 = $28 >>> 3;
   $30 = $28 << 29;
   $31 = $29 | $30;
   switch ($31|0) {
   case 5: case 4: case 1: case 0:  {
    $2 = 0;
    break;
   }
   default: {
   }
   }
   $32 = $2;
   $33 = $1;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $41 = 1;
   } else {
    $37 = $1;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $41 = $39;
   }
   $40 = (($41) - 1)|0;
   _startinsert($32,$40);
   STACKTOP = sp;return;
  }
 } while(0);
 _beep();
 _end_command();
 STACKTOP = sp;return;
}
function _xvOpShift($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _tabinout($4,$6,$9);
 _begin_line(1);
 _xvUpdateAllBufferWindows();
 HEAP32[4268] = 2;
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 _format_redo($12,$13);
 STACKTOP = sp;return;
}
function _format_redo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[(17088)>>2] = 0;
 HEAP32[(17084)>>2] = 0;
 $4 = $3;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $14;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $17;
  (_lformat((17076),12691,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $18 = ((($9)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $8;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $19;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $22;
  (_lformat((17076),12701,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
}
function _xvOpDelete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_cntllines($10,$13)|0);
 $2 = $14;
 $15 = $2;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = (_plines($18)|0);
  $3 = $19;
 }
 _yp_push_deleted();
 $20 = $1;
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = $1;
 $24 = ((($23)) + 16|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 & 4;
 $28 = ($27|0)==(0);
 $29 = $28&1;
 $30 = $1;
 $31 = ((($30)) + 48|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_do_yank($20,$22,$29,$32)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $1;
 $36 = ((($35)) + 16|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 & 4;
 $40 = ($39|0)!=(0);
 $41 = $1;
 $42 = HEAP32[$41>>2]|0;
 if ($40) {
  _move_cursor($42,0);
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  _repllines($44,$45,0);
  _begin_line(1);
  _info_update();
 } else {
  $46 = $1;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($42|0)==($48|0);
  do {
   if ($49) {
    $50 = $1;
    $51 = ((($50)) + 8|0);
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $1;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($53) - ($56))|0;
    $58 = (($57) + 1)|0;
    $4 = $58;
    $59 = $1;
    $60 = HEAP32[$59>>2]|0;
    $61 = $1;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $4;
    _replchars($60,$63,$64,19254);
   } else {
    $65 = (_start_command()|0);
    $66 = ($65|0)!=(0);
    if ($66) {
     $67 = $1;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $1;
     $71 = ((($70)) + 8|0);
     $72 = ((($71)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + 1)|0;
     _replchars($69,0,$74,19254);
     $75 = $1;
     $76 = HEAP32[$75>>2]|0;
     $77 = $1;
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $1;
     $81 = ((($80)) + 8|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     _replchars($76,$79,2147483647,$84);
     $85 = $1;
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($86)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $1;
     $90 = HEAP32[$89>>2]|0;
     $91 = $1;
     $92 = ((($91)) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (_cntllines($90,$93)|0);
     $95 = (($94) - 1)|0;
     _repllines($88,$95,0);
     _end_command();
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $96 = $1;
  $5 = $96;
  $97 = $5;
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)>(0);
  if ($100) {
   $101 = $5;
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $5;
   $106 = ((($105)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) + ($107)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109 << 24 >> 24;
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = $5;
    $113 = ((($112)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + -1)|0;
    HEAP32[$113>>2] = $115;
   }
  }
  $116 = $1;
  $117 = HEAP32[$116>>2]|0;
  $118 = $1;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _move_cursor($117,$120);
 }
 $121 = HEAP32[4327]|0;
 $122 = ((($121)) + 68|0);
 HEAP32[$122>>2] = 1;
 HEAP32[4268] = 2;
 $123 = $1;
 _format_redo(100,$123);
 $124 = $1;
 $125 = ((($124)) + 16|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 & 4;
 $129 = ($128|0)==(0);
 $130 = $2;
 $131 = ($130|0)==(1);
 $or$cond = $129 & $131;
 if ($or$cond) {
  $132 = $3;
  $133 = ($132|0)==(1);
  $135 = $133;
 } else {
  $135 = 0;
 }
 $134 = $135 ^ 1;
 $136 = $134&1;
 _updateline($136);
 STACKTOP = sp;return;
}
function _xvOpChange($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = (_start_command()|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  _yp_push_deleted();
  $13 = $1;
  $14 = $1;
  $15 = ((($14)) + 8|0);
  $16 = $1;
  $17 = ((($16)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_do_yank($13,$15,0,$18)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   STACKTOP = sp;return;
  }
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $3 = $22;
  $23 = $3;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_cntllines($23,$26)|0);
  $2 = $27;
  $28 = $2;
  $29 = ($28|0)>(1);
  if ($29) {
   $30 = $3;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   $34 = (($33) - 1)|0;
   _repllines($32,$34,0);
  }
  $35 = $3;
  _move_cursor($35,0);
  _begin_line(1);
  $36 = $3;
  $37 = HEAP32[4327]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $3;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_strlen($43)|0);
  _replchars($36,$40,$44,19254);
  _xvUpdateAllBufferWindows();
 } else {
  $45 = $1;
  $46 = ((($45)) + 8|0);
  $47 = (_endofline($46)|0);
  $4 = $47;
  $48 = $1;
  _xvOpDelete($48);
  $49 = $4;
  $50 = ($49|0)!=(0);
  if ($50) {
   (_one_right(1)|0);
  }
 }
 HEAP32[4268] = 0;
 $51 = $1;
 _format_redo(99,$51);
 _startinsert(0,0);
 STACKTOP = sp;return;
}
function _xvOpYank($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cntllines($8,$11)|0);
 $2 = $12;
 $13 = $2;
 $14 = HEAP32[(3972)>>2]|0;
 $15 = ($13|0)>($14|0);
 if ($15) {
  $16 = $2;
  HEAP32[$vararg_buffer>>2] = $16;
  _show_message(12708,$vararg_buffer);
 }
 $17 = $1;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = $1;
 $21 = ((($20)) + 16|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 4;
 $25 = ($24|0)==(0);
 $26 = $25&1;
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 (_do_yank($17,$19,$26,$29)|0);
 STACKTOP = sp;return;
}
function _vs_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<4;
 $10 = (_alloc($9)|0);
 $11 = $2;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<4;
 $21 = (_alloc($20)|0);
 $22 = $2;
 $23 = ((($22)) + 20|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 $3 = 0;
 while(1) {
  $28 = $3;
  $29 = $2;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)<($31>>>0);
  if (!($32)) {
   label = 16;
   break;
  }
  $33 = $2;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $3;
  $37 = (($35) + ($36<<4)|0);
  $4 = $37;
  $38 = $2;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $3;
  $42 = (($40) + ($41<<4)|0);
  $5 = $42;
  $43 = $2;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  $47 = $46;
  $48 = (_alloc($47)|0);
  $49 = $4;
  HEAP32[$49>>2] = $48;
  $50 = $4;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   label = 8;
   break;
  }
  $53 = $2;
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  $57 = $56;
  $58 = (_alloc($57)|0);
  $59 = $5;
  HEAP32[$59>>2] = $58;
  $60 = $5;
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0|0);
  if ($62) {
   label = 10;
   break;
  }
  $63 = $2;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 1)|0;
  $67 = $66;
  $68 = (_alloc($67)|0);
  $69 = $4;
  $70 = ((($69)) + 4|0);
  HEAP32[$70>>2] = $68;
  $71 = $4;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0|0);
  if ($74) {
   label = 12;
   break;
  }
  $75 = $2;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  $79 = $78;
  $80 = (_alloc($79)|0);
  $81 = $5;
  $82 = ((($81)) + 4|0);
  HEAP32[$82>>2] = $80;
  $83 = $5;
  $84 = ((($83)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if ($86) {
   label = 14;
   break;
  }
  $87 = $4;
  $88 = HEAP32[$87>>2]|0;
  HEAP8[$88>>0] = 0;
  $89 = $5;
  $90 = HEAP32[$89>>2]|0;
  HEAP8[$90>>0] = 0;
  $91 = $5;
  $92 = ((($91)) + 8|0);
  HEAP32[$92>>2] = 0;
  $93 = $4;
  $94 = ((($93)) + 8|0);
  HEAP32[$94>>2] = 0;
  $95 = $5;
  $96 = ((($95)) + 12|0);
  HEAP32[$96>>2] = 0;
  $97 = $4;
  $98 = ((($97)) + 12|0);
  HEAP32[$98>>2] = 0;
  $99 = $3;
  $100 = (($99) + 1)|0;
  $3 = $100;
 }
 if ((label|0) == 8) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 else if ((label|0) == 10) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 else if ((label|0) == 12) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 else if ((label|0) == 14) {
  $1 = 0;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 else if ((label|0) == 16) {
  $1 = 1;
  $101 = $1;
  STACKTOP = sp;return ($101|0);
 }
 return (0)|0;
}
function _vs_resize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $5;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = ($15|0)==(0);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $3 = 1;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 $17 = $4;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $9 = $19;
 $20 = $9;
 $21 = $5;
 $22 = (($20) - ($21))|0;
 $8 = $22;
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $10 = $25;
 $26 = $9;
 $7 = $26;
 while(1) {
  $27 = $7;
  $28 = $8;
  $29 = ($27|0)<($28|0);
  $30 = $4;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  if (!($29)) {
   break;
  }
  $33 = $7;
  $34 = (($32) + ($33<<4)|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = $4;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  $40 = (($38) + ($39<<4)|0);
  $41 = HEAP32[$40>>2]|0;
  _free($41);
  $42 = $4;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $7;
  $46 = (($44) + ($45<<4)|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  _free($48);
  $49 = $4;
  $50 = ((($49)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $7;
  $53 = (($51) + ($52<<4)|0);
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  _free($55);
  $56 = $7;
  $57 = (($56) + 1)|0;
  $7 = $57;
 }
 $58 = $9;
 $59 = $58<<4;
 $60 = (($59) + 1)|0;
 $61 = (_re_alloc($32,$60)|0);
 $62 = $4;
 $63 = ((($62)) + 16|0);
 HEAP32[$63>>2] = $61;
 $64 = $4;
 $65 = ((($64)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0|0);
 if ($67) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 $68 = $4;
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $9;
 $72 = $71<<4;
 $73 = (($72) + 1)|0;
 $74 = (_re_alloc($70,$73)|0);
 $75 = $4;
 $76 = ((($75)) + 20|0);
 HEAP32[$76>>2] = $74;
 $77 = $4;
 $78 = ((($77)) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 if ($80) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 $81 = $8;
 $7 = $81;
 while(1) {
  $82 = $7;
  $83 = $9;
  $84 = ($82|0)<($83|0);
  if (!($84)) {
   label = 21;
   break;
  }
  $85 = $4;
  $86 = ((($85)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $7;
  $89 = (($87) + ($88<<4)|0);
  $11 = $89;
  $90 = $4;
  $91 = ((($90)) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $7;
  $94 = (($92) + ($93<<4)|0);
  $12 = $94;
  $95 = $10;
  $96 = (($95) + 1)|0;
  $97 = $96;
  $98 = (_alloc($97)|0);
  $99 = $11;
  HEAP32[$99>>2] = $98;
  $100 = $11;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0|0);
  if ($102) {
   label = 13;
   break;
  }
  $103 = $10;
  $104 = (($103) + 1)|0;
  $105 = $104;
  $106 = (_alloc($105)|0);
  $107 = $12;
  HEAP32[$107>>2] = $106;
  $108 = $12;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(0|0);
  if ($110) {
   label = 15;
   break;
  }
  $111 = $10;
  $112 = (($111) + 1)|0;
  $113 = $112;
  $114 = (_alloc($113)|0);
  $115 = $11;
  $116 = ((($115)) + 4|0);
  HEAP32[$116>>2] = $114;
  $117 = $11;
  $118 = ((($117)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   label = 17;
   break;
  }
  $121 = $10;
  $122 = (($121) + 1)|0;
  $123 = $122;
  $124 = (_alloc($123)|0);
  $125 = $12;
  $126 = ((($125)) + 4|0);
  HEAP32[$126>>2] = $124;
  $127 = $12;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)==(0|0);
  if ($130) {
   label = 19;
   break;
  }
  $131 = $11;
  $132 = HEAP32[$131>>2]|0;
  HEAP8[$132>>0] = 0;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP8[$134>>0] = 0;
  $135 = $12;
  $136 = ((($135)) + 8|0);
  HEAP32[$136>>2] = 0;
  $137 = $11;
  $138 = ((($137)) + 8|0);
  HEAP32[$138>>2] = 0;
  $139 = $12;
  $140 = ((($139)) + 12|0);
  HEAP32[$140>>2] = 4;
  $141 = $11;
  $142 = ((($141)) + 12|0);
  HEAP32[$142>>2] = 4;
  $143 = $7;
  $144 = (($143) + 1)|0;
  $7 = $144;
 }
 if ((label|0) == 13) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 else if ((label|0) == 15) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 else if ((label|0) == 17) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 else if ((label|0) == 19) {
  $3 = 0;
  $213 = $3;
  STACKTOP = sp;return ($213|0);
 }
 else if ((label|0) == 21) {
  $145 = $9;
  $146 = (($145) - 1)|0;
  $7 = $146;
  $147 = $7;
  $148 = $8;
  $149 = (($148) - 1)|0;
  $150 = ($147|0)>($149|0);
  if ($150) {
   $151 = $8;
   $152 = (($151) - 1)|0;
   $7 = $152;
  }
  while(1) {
   $153 = $7;
   $154 = ($153|0)>=(0);
   if (!($154)) {
    label = 33;
    break;
   }
   $155 = $4;
   $156 = ((($155)) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $7;
   $159 = (($157) + ($158<<4)|0);
   $11 = $159;
   $160 = $4;
   $161 = ((($160)) + 20|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $7;
   $164 = (($162) + ($163<<4)|0);
   $12 = $164;
   $165 = $11;
   $166 = HEAP32[$165>>2]|0;
   $167 = $10;
   $168 = (($167) + 1)|0;
   $169 = $168;
   $170 = (_re_alloc($166,$169)|0);
   $171 = $11;
   HEAP32[$171>>2] = $170;
   $172 = $11;
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==(0|0);
   if ($174) {
    label = 25;
    break;
   }
   $175 = $12;
   $176 = HEAP32[$175>>2]|0;
   $177 = $10;
   $178 = (($177) + 1)|0;
   $179 = $178;
   $180 = (_re_alloc($176,$179)|0);
   $181 = $12;
   HEAP32[$181>>2] = $180;
   $182 = $12;
   $183 = HEAP32[$182>>2]|0;
   $184 = ($183|0)==(0|0);
   if ($184) {
    label = 27;
    break;
   }
   $185 = $11;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $10;
   $189 = (($188) + 1)|0;
   $190 = $189;
   $191 = (_re_alloc($187,$190)|0);
   $192 = $11;
   $193 = ((($192)) + 4|0);
   HEAP32[$193>>2] = $191;
   $194 = $11;
   $195 = ((($194)) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ($196|0)==(0|0);
   if ($197) {
    label = 29;
    break;
   }
   $198 = $12;
   $199 = ((($198)) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $10;
   $202 = (($201) + 1)|0;
   $203 = $202;
   $204 = (_re_alloc($200,$203)|0);
   $205 = $12;
   $206 = ((($205)) + 4|0);
   HEAP32[$206>>2] = $204;
   $207 = $12;
   $208 = ((($207)) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($209|0)==(0|0);
   if ($210) {
    label = 31;
    break;
   }
   $211 = $7;
   $212 = (($211) + -1)|0;
   $7 = $212;
  }
  if ((label|0) == 25) {
   $3 = 0;
   $213 = $3;
   STACKTOP = sp;return ($213|0);
  }
  else if ((label|0) == 27) {
   $3 = 0;
   $213 = $3;
   STACKTOP = sp;return ($213|0);
  }
  else if ((label|0) == 29) {
   $3 = 0;
   $213 = $3;
   STACKTOP = sp;return ($213|0);
  }
  else if ((label|0) == 31) {
   $3 = 0;
   $213 = $3;
   STACKTOP = sp;return ($213|0);
  }
  else if ((label|0) == 33) {
   $3 = 1;
   $213 = $3;
   STACKTOP = sp;return ($213|0);
  }
 }
 return (0)|0;
}
function _vs_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  $8 = $1;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $2;
  $12 = (($10) + ($11<<4)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $1;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (($16) + ($17<<4)|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = (($22) + ($23<<4)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  _free($26);
  $27 = $1;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = (($29) + ($30<<4)|0);
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $34 = $2;
  $35 = (($34) + 1)|0;
  $2 = $35;
 }
 _free($10);
 $36 = $1;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 _free($38);
 $39 = $1;
 $40 = ((($39)) + 48|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 FUNCTION_TABLE_vi[$41 & 127]($42);
 STACKTOP = sp;return;
}
function _xv_decode_colour($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 HEAP32[$6>>2] = $2;
 $8 = (_xv_strtoi($6)|0);
 $7 = $8;
 $9 = HEAP32[$6>>2]|0;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)!=(0);
 if ($12) {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $7;
  $14 = $4;
  $15 = ((($14)) + 24|0);
  $16 = $5;
  $17 = (($15) + ($16<<2)|0);
  HEAP32[$17>>2] = $13;
  $3 = 1;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _xvInitWindow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_add_window(0,0)|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $7 = $2;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = $7;
 $10 = $3;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $10;
 $15 = $3;
 $16 = (_alloc_window($15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $3;
  _free($18);
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $19 = $2;
 $20 = (_vs_init($19)|0);
 $21 = ($20|0)!=(0);
 $22 = $3;
 if ($21) {
  $24 = ((($22)) + 28|0);
  HEAP32[$24>>2] = 0;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  $29 = ((($28)) + 20|0);
  HEAP32[$29>>2] = $27;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $3;
  $34 = ((($33)) + 24|0);
  HEAP32[$34>>2] = $32;
  $35 = $3;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) - 1)|0;
  $39 = $3;
  $40 = ((($39)) + 32|0);
  HEAP32[$40>>2] = $38;
  $41 = $3;
  $1 = $41;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 } else {
  _dealloc_window($22);
  $23 = $3;
  _free($23);
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _add_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = (_alloc(88)|0);
 $5 = $6;
 $7 = $5;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = $3;
  $13 = ((($12)) + 80|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $5;
  $17 = $4;
  $18 = ((($17)) + 76|0);
  HEAP32[$18>>2] = $16;
 }
 $19 = $3;
 $20 = $5;
 $21 = ((($20)) + 76|0);
 HEAP32[$21>>2] = $19;
 $22 = $4;
 $23 = $5;
 $24 = ((($23)) + 80|0);
 HEAP32[$24>>2] = $22;
 $25 = $5;
 $2 = $25;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _alloc_window($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 36|0);
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ((($6)) + 36|0);
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 36|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = (_alloc(8)|0);
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $17 = (_alloc(56)|0);
 $18 = $2;
 $19 = ((($18)) + 84|0);
 HEAP32[$19>>2] = $17;
 $20 = $2;
 $21 = ((($20)) + 84|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $2;
  $25 = ((($24)) + 84|0);
  $26 = HEAP32[$25>>2]|0;
  _xvInitialiseCmd($26);
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _dealloc_window($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 $5 = ((($4)) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 36|0);
 _flexdelete($8);
 STACKTOP = sp;return;
}
function _xvOpenWindow($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $5 = HEAP32[4327]|0;
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<(4);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (4 - ($12))|0;
  _xvResizeWindow($13);
 }
 $14 = $3;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)<(4);
 if ($17) {
  _show_error(12725,$vararg_buffer);
  $1 = 0;
  $84 = $1;
  STACKTOP = sp;return ($84|0);
 }
 $18 = HEAP32[4327]|0;
 $19 = $3;
 $20 = ((($19)) + 80|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_add_window($18,$21)|0);
 $4 = $22;
 $23 = $4;
 $24 = ($23|0)==(0|0);
 if ($24) {
  _show_error(12742,$vararg_buffer3);
  $1 = 0;
  $84 = $1;
  STACKTOP = sp;return ($84|0);
 }
 $25 = $3;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = ((($28)) + 16|0);
 HEAP32[$29>>2] = $27;
 $30 = $4;
 $31 = $4;
 $32 = ((($31)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 12|0);
 HEAP32[$34>>2] = $30;
 $35 = $4;
 $36 = (_alloc_window($35)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  _show_error(5948,$vararg_buffer5);
  $38 = $4;
  _free($38);
  $1 = 0;
  $84 = $1;
  STACKTOP = sp;return ($84|0);
 }
 $39 = $2;
 $40 = ($39|0)!=(0);
 $41 = $3;
 $42 = ((($41)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 if ($40) {
  $44 = $2;
  $45 = (($43) - ($44))|0;
  $46 = $4;
  $$sink = $45;$$sink2 = $46;
 } else {
  $47 = (($43>>>0) / 2)&-1;
  $48 = $4;
  $$sink = $47;$$sink2 = $48;
 }
 $49 = ((($$sink2)) + 20|0);
 HEAP32[$49>>2] = $$sink;
 $50 = $3;
 $51 = ((($50)) + 32|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $4;
 $54 = ((($53)) + 32|0);
 HEAP32[$54>>2] = $52;
 $55 = $4;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $4;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($57) - ($60))|0;
 $62 = (($61) + 1)|0;
 $63 = $4;
 $64 = ((($63)) + 28|0);
 HEAP32[$64>>2] = $62;
 $65 = $4;
 $66 = ((($65)) + 20|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $3;
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - ($67))|0;
 HEAP32[$69>>2] = $71;
 $72 = $4;
 $73 = ((($72)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) - 1)|0;
 $76 = $3;
 $77 = ((($76)) + 32|0);
 HEAP32[$77>>2] = $75;
 $78 = $3;
 $79 = ((($78)) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $4;
 $82 = ((($81)) + 24|0);
 HEAP32[$82>>2] = $80;
 $83 = $4;
 $1 = $83;
 $84 = $1;
 STACKTOP = sp;return ($84|0);
}
function _xvResizeWindow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = HEAP32[4327]|0;
 $2 = $6;
 $7 = $1;
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 80|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   STACKTOP = sp;return;
  }
 }
 $17 = HEAP32[4327]|0;
 $3 = $17;
 $18 = HEAP32[4328]|0;
 $4 = $18;
 $19 = $1;
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = $1;
  $22 = (0 - ($21))|0;
  $1 = $22;
  $23 = $2;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) - 2)|0;
  $5 = $26;
  $27 = $5;
  $28 = ($27|0)<=(0);
  if ($28) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[4328]|0;
  $30 = $29 & -2;
  HEAP32[4328] = $30;
  $31 = $5;
  $32 = $1;
  $33 = ($31|0)<($32|0);
  $34 = $5;
  $35 = $1;
  $36 = $33 ? $34 : $35;
  $37 = (0 - ($36))|0;
  $38 = (_xvMoveStatusLine($37)|0);
  $39 = $1;
  $40 = (($39) + ($38))|0;
  $1 = $40;
  $41 = $1;
  $42 = ($41|0)>(0);
  if ($42) {
   $43 = HEAP32[4327]|0;
   $44 = ((($43)) + 76|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[4327] = $45;
   $46 = HEAP32[4327]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = HEAP32[4327]|0;
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50;
   } else {
    $51 = 0;
   }
   HEAP32[4326] = $51;
   $52 = $1;
   (_xvMoveStatusLine($52)|0);
  }
 } else {
  $53 = HEAP32[4328]|0;
  $54 = $53 & -2;
  HEAP32[4328] = $54;
  $55 = $1;
  $56 = (_xvMoveStatusLine($55)|0);
  $57 = $1;
  $58 = (($57) - ($56))|0;
  $1 = $58;
  $59 = $1;
  $60 = ($59|0)>(0);
  if ($60) {
   $61 = HEAP32[4327]|0;
   $62 = ((($61)) + 76|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP32[4327] = $63;
   $64 = HEAP32[4327]|0;
   $65 = ($64|0)!=(0|0);
   if ($65) {
    $66 = HEAP32[4327]|0;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68;
   } else {
    $69 = 0;
   }
   HEAP32[4326] = $69;
   $70 = $1;
   $71 = (0 - ($70))|0;
   (_xvMoveStatusLine($71)|0);
  }
 }
 $72 = $3;
 HEAP32[4327] = $72;
 $73 = HEAP32[4327]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = HEAP32[4327]|0;
  $76 = ((($75)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77;
 } else {
  $78 = 0;
 }
 HEAP32[4326] = $78;
 $79 = $4;
 HEAP32[4328] = $79;
 _redraw_all(0);
 STACKTOP = sp;return;
}
function _xvMoveStatusLine($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $8 = HEAP32[4327]|0;
 $3 = $8;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $3;
  $12 = ((($11)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $4 = $13;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = $2;
   $16 = ($15|0)<(0);
   if ($16) {
    $17 = $2;
    $18 = (0 - ($17))|0;
    $5 = $18;
    $19 = $3;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[(3660)>>2]|0;
    $23 = (($21) - ($22))|0;
    $6 = $23;
    $24 = $5;
    $25 = $6;
    $26 = ($24|0)>($25|0);
    if ($26) {
     $27 = $3;
     $28 = ((($27)) + 76|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)!=(0|0);
     if ($30) {
      $31 = $3;
      $32 = ((($31)) + 76|0);
      $33 = HEAP32[$32>>2]|0;
      HEAP32[4327] = $33;
      $34 = HEAP32[4327]|0;
      $35 = ($34|0)!=(0|0);
      if ($35) {
       $36 = HEAP32[4327]|0;
       $37 = ((($36)) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38;
      } else {
       $39 = 0;
      }
      HEAP32[4326] = $39;
      $40 = $6;
      $41 = $5;
      $42 = (($40) - ($41))|0;
      (_xvMoveStatusLine($42)|0);
      $43 = $3;
      HEAP32[4327] = $43;
      $44 = HEAP32[4327]|0;
      $45 = ($44|0)!=(0|0);
      if ($45) {
       $46 = HEAP32[4327]|0;
       $47 = ((($46)) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = $48;
      } else {
       $49 = 0;
      }
      HEAP32[4326] = $49;
      $50 = $3;
      $51 = ((($50)) + 20|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = HEAP32[(3660)>>2]|0;
      $54 = (($52) - ($53))|0;
      $6 = $54;
     }
    }
    $55 = $5;
    $56 = $6;
    $57 = ($55|0)>($56|0);
    if ($57) {
     $58 = $6;
     $5 = $58;
    }
    $59 = $5;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = $5;
     $62 = $3;
     $63 = ((($62)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) - ($61))|0;
     HEAP32[$63>>2] = $65;
     $66 = $5;
     $67 = $3;
     $68 = ((($67)) + 32|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) - ($66))|0;
     HEAP32[$68>>2] = $70;
     $71 = $5;
     $72 = $4;
     $73 = ((($72)) + 28|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) - ($71))|0;
     HEAP32[$73>>2] = $75;
     $76 = $5;
     $77 = $4;
     $78 = ((($77)) + 20|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76))|0;
     HEAP32[$78>>2] = $80;
     $81 = $4;
     HEAP32[4327] = $81;
     $82 = HEAP32[4327]|0;
     $83 = ($82|0)!=(0|0);
     if ($83) {
      $84 = HEAP32[4327]|0;
      $85 = ((($84)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86;
     } else {
      $87 = 0;
     }
     HEAP32[4326] = $87;
     $88 = $5;
     (_shiftdown($88)|0);
     $89 = $3;
     HEAP32[4327] = $89;
     $90 = HEAP32[4327]|0;
     $91 = ($90|0)!=(0|0);
     if ($91) {
      $92 = HEAP32[4327]|0;
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $94;
     } else {
      $95 = 0;
     }
     HEAP32[4326] = $95;
     $96 = $3;
     $97 = ((($96)) + 20|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98>>>0)>(0);
     if ($99) {
      _show_file_info(1);
     }
    }
    $100 = $5;
    $101 = (0 - ($100))|0;
    $2 = $101;
   } else {
    $102 = $4;
    $103 = ((($102)) + 20|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = HEAP32[(3660)>>2]|0;
    $106 = (($104) - ($105))|0;
    $7 = $106;
    $107 = $2;
    $108 = $7;
    $109 = ($107|0)>($108|0);
    if ($109) {
     $110 = $4;
     HEAP32[4327] = $110;
     $111 = HEAP32[4327]|0;
     $112 = ($111|0)!=(0|0);
     if ($112) {
      $113 = HEAP32[4327]|0;
      $114 = ((($113)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115;
     } else {
      $116 = 0;
     }
     HEAP32[4326] = $116;
     $117 = $2;
     $118 = $7;
     $119 = (($117) - ($118))|0;
     (_xvMoveStatusLine($119)|0);
     $120 = $3;
     HEAP32[4327] = $120;
     $121 = HEAP32[4327]|0;
     $122 = ($121|0)!=(0|0);
     if ($122) {
      $123 = HEAP32[4327]|0;
      $124 = ((($123)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $125;
     } else {
      $126 = 0;
     }
     HEAP32[4326] = $126;
     $127 = $4;
     $128 = ((($127)) + 20|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = HEAP32[(3660)>>2]|0;
     $131 = (($129) - ($130))|0;
     $7 = $131;
    }
    $132 = $2;
    $133 = $7;
    $134 = ($132|0)>($133|0);
    if ($134) {
     $135 = $7;
     $2 = $135;
    }
    $136 = $2;
    $137 = ($136|0)!=(0);
    if ($137) {
     $138 = $2;
     $139 = $3;
     $140 = ((($139)) + 20|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141) + ($138))|0;
     HEAP32[$140>>2] = $142;
     $143 = $2;
     $144 = $3;
     $145 = ((($144)) + 32|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($146) + ($143))|0;
     HEAP32[$145>>2] = $147;
     $148 = $2;
     $149 = $4;
     $150 = ((($149)) + 28|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + ($148))|0;
     HEAP32[$150>>2] = $152;
     $153 = $2;
     $154 = $4;
     $155 = ((($154)) + 20|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) - ($153))|0;
     HEAP32[$155>>2] = $157;
     $158 = $4;
     HEAP32[4327] = $158;
     $159 = HEAP32[4327]|0;
     $160 = ($159|0)!=(0|0);
     if ($160) {
      $161 = HEAP32[4327]|0;
      $162 = ((($161)) + 4|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $163;
     } else {
      $164 = 0;
     }
     HEAP32[4326] = $164;
     $165 = $2;
     (_shiftup($165)|0);
     $166 = $3;
     HEAP32[4327] = $166;
     $167 = HEAP32[4327]|0;
     $168 = ($167|0)!=(0|0);
     if ($168) {
      $169 = HEAP32[4327]|0;
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $171;
     } else {
      $172 = 0;
     }
     HEAP32[4326] = $172;
     $173 = $3;
     $174 = ((($173)) + 20|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = ($175>>>0)>(0);
     if ($176) {
      _show_file_info(1);
     }
    }
   }
   $177 = $2;
   $1 = $177;
   $178 = $1;
   STACKTOP = sp;return ($178|0);
  }
 }
 $1 = 0;
 $178 = $1;
 STACKTOP = sp;return ($178|0);
}
function _xvCloseWindow() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = HEAP32[4327]|0;
 $4 = $5;
 $6 = $4;
 $7 = ((($6)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $1 = $8;
 $9 = $4;
 $10 = ((($9)) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 $12 = $1;
 $13 = ($12|0)==(0|0);
 $14 = $2;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 & $15;
 L1: do {
  if ($or$cond) {
   $3 = 0;
  } else {
   $16 = $2;
   $17 = ($16|0)==(0|0);
   do {
    if (!($17)) {
     $18 = $1;
     $19 = ($18|0)!=(0|0);
     $20 = $2;
     $21 = ($20|0)!=(0|0);
     $or$cond3 = $19 & $21;
     if ($or$cond3) {
      $22 = $1;
      $23 = ((($22)) + 20|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $2;
      $26 = ((($25)) + 20|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($24>>>0)<($27>>>0);
      if ($28) {
       break;
      }
     }
     $42 = $4;
     $43 = ((($42)) + 20|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $2;
     $46 = ((($45)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + ($44))|0;
     HEAP32[$46>>2] = $48;
     $49 = $4;
     $50 = ((($49)) + 28|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $2;
     $53 = ((($52)) + 28|0);
     HEAP32[$53>>2] = $51;
     $54 = $2;
     $3 = $54;
     break L1;
    }
   } while(0);
   $29 = $4;
   $30 = ((($29)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $1;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31))|0;
   HEAP32[$33>>2] = $35;
   $36 = $4;
   $37 = ((($36)) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = ((($39)) + 32|0);
   HEAP32[$40>>2] = $38;
   $41 = $1;
   $3 = $41;
  }
 } while(0);
 $55 = $3;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $4;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  _vs_free($59);
  $0 = 0;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 } else {
  $60 = $3;
  $61 = $4;
  $62 = ((($61)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 12|0);
  HEAP32[$64>>2] = $60;
  $65 = $4;
  _dealloc_window($65);
  $66 = $4;
  _delete_window($66);
  $67 = $3;
  $0 = $67;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _delete_window($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 76|0);
  HEAP32[$14>>2] = $10;
 }
 $15 = $1;
 $16 = ((($15)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 80|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ((($22)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 80|0);
  HEAP32[$25>>2] = $21;
 }
 $26 = $1;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = $1;
 _free($32);
 STACKTOP = sp;return;
}
function _xvMapWindowOntoBuffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = $3;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = $3;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$15>>2] = $13;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = $3;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $2;
 $30 = ((($29)) + 56|0);
 HEAP32[$30>>2] = 0;
 $31 = $2;
 $32 = ((($31)) + 52|0);
 HEAP32[$32>>2] = 0;
 $33 = $2;
 $34 = ((($33)) + 60|0);
 HEAP32[$34>>2] = 0;
 $35 = $2;
 $36 = ((($35)) + 64|0);
 HEAP32[$36>>2] = 0;
 $37 = $2;
 $38 = ((($37)) + 68|0);
 HEAP32[$38>>2] = 0;
 STACKTOP = sp;return;
}
function _xvUnMapWindow() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4326]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) - 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[4327]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[4327]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[4327]|0;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _xvEqualiseWindows($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = HEAP32[4327]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[4327]|0;
  $3 = $10;
  while(1) {
   $11 = $1;
   $12 = (($11) + 1)|0;
   $1 = $12;
   $13 = $3;
   $14 = (_xvNextWindow($13)|0);
   $3 = $14;
   $15 = $3;
   $16 = HEAP32[4327]|0;
   $17 = ($15|0)!=($16|0);
   if (!($17)) {
    break;
   }
  }
 }
 $18 = $1;
 $19 = ($18|0)==(1);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[4327]|0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = (($24>>>0) / ($25>>>0))&-1;
 $4 = $26;
 $27 = HEAP32[4327]|0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = (($31>>>0) % ($32>>>0))&-1;
 $5 = $33;
 $34 = HEAP32[4327]|0;
 $3 = $34;
 while(1) {
  $35 = $3;
  $36 = ((($35)) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   break;
  }
  $39 = $3;
  $40 = ((($39)) + 76|0);
  $41 = HEAP32[$40>>2]|0;
  $3 = $41;
 }
 $42 = HEAP32[4327]|0;
 $2 = $42;
 while(1) {
  $43 = $3;
  $44 = ((($43)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   break;
  }
  $47 = $3;
  HEAP32[4327] = $47;
  $48 = HEAP32[4327]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = HEAP32[4327]|0;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52;
  } else {
   $53 = 0;
  }
  HEAP32[4326] = $53;
  $54 = $4;
  $55 = $5;
  $56 = (($54) + ($55))|0;
  $57 = $3;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($56) - ($59))|0;
  _xvResizeWindow($60);
  $61 = $5;
  $62 = ($61|0)>(0);
  if ($62) {
   $5 = 0;
  }
  $63 = $3;
  $64 = ((($63)) + 80|0);
  $65 = HEAP32[$64>>2]|0;
  $3 = $65;
 }
 $66 = $2;
 HEAP32[4327] = $66;
 $67 = HEAP32[4327]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = HEAP32[4327]|0;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71;
 } else {
  $72 = 0;
 }
 HEAP32[4326] = $72;
 STACKTOP = sp;return;
}
function _xvNextWindow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $1 = 0;
  } else {
   $6 = $2;
   $7 = ((($6)) + 80|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   $10 = $2;
   if ($9) {
    $11 = ((($10)) + 80|0);
    $12 = HEAP32[$11>>2]|0;
    $1 = $12;
    break;
   }
   $3 = $10;
   while(1) {
    $13 = $3;
    $14 = ((($13)) + 76|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = $3;
    if (!($16)) {
     break;
    }
    $18 = ((($17)) + 76|0);
    $19 = HEAP32[$18>>2]|0;
    $3 = $19;
   }
   $1 = $17;
  }
 } while(0);
 $20 = $1;
 STACKTOP = sp;return ($20|0);
}
function _xvAdjustWindows($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = $0;
 $18 = HEAP32[(3660)>>2]|0;
 $11 = $18;
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 while(1) {
  $22 = $4;
  $23 = ((($22)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = $4;
  if (!($25)) {
   break;
  }
  $27 = ((($26)) + 76|0);
  $28 = HEAP32[$27>>2]|0;
  $4 = $28;
 }
 $2 = $26;
 while(1) {
  $29 = $4;
  $30 = ((($29)) + 80|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = $4;
  if (!($32)) {
   break;
  }
  $34 = ((($33)) + 80|0);
  $35 = HEAP32[$34>>2]|0;
  $4 = $35;
 }
 $3 = $33;
 $36 = $2;
 $37 = $3;
 $38 = ($36|0)==($37|0);
 if ($38) {
  $39 = $1;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = ((($42)) + 20|0);
  HEAP32[$43>>2] = $41;
  $44 = $1;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $2;
  $48 = ((($47)) + 24|0);
  HEAP32[$48>>2] = $46;
  $49 = $2;
  $50 = ((($49)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $2;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($51) + ($54))|0;
  $56 = (($55) - 1)|0;
  $57 = $2;
  $58 = ((($57)) + 32|0);
  HEAP32[$58>>2] = $56;
  _redraw_all(1);
  STACKTOP = sp;return;
 }
 $8 = 0;
 $7 = 0;
 $5 = 0;
 $59 = $2;
 $4 = $59;
 while(1) {
  $60 = $4;
  $61 = ($60|0)!=(0|0);
  if (!($61)) {
   break;
  }
  $62 = $4;
  $63 = ((($62)) + 20|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $5;
  $66 = (($65) + ($64))|0;
  $5 = $66;
  $67 = $7;
  $68 = (($67) + 1)|0;
  $7 = $68;
  $69 = $4;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71>>>0)>(0);
  if ($72) {
   $73 = $8;
   $74 = (($73) + 1)|0;
   $8 = $74;
  }
  $75 = $4;
  $76 = ((($75)) + 80|0);
  $77 = HEAP32[$76>>2]|0;
  $4 = $77;
 }
 $78 = $5;
 $79 = $1;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($78>>>0)<=($81>>>0);
 $83 = $1;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 L20: do {
  if ($82) {
   $86 = $5;
   $87 = (($85) - ($86))|0;
   $6 = $87;
   $88 = $2;
   $4 = $88;
   L22: while(1) {
    $89 = $4;
    $90 = ($89|0)!=(0|0);
    $91 = $6;
    $92 = ($91|0)>(0);
    $93 = $90 ? $92 : 0;
    if (!($93)) {
     break L20;
    }
    $94 = $4;
    $95 = ((($94)) + 20|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $11;
    $98 = ($96>>>0)<($97>>>0);
    do {
     if ($98) {
      $99 = $6;
      $100 = $11;
      $101 = ($99|0)>($100|0);
      $102 = $11;
      $103 = $6;
      $104 = $101 ? $102 : $103;
      $12 = $104;
      $105 = $4;
      $106 = ((($105)) + 20|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $12;
      $109 = (($107) + ($108))|0;
      $110 = $11;
      $111 = ($109>>>0)>=($110>>>0);
      if ($111) {
       $112 = $12;
       $113 = $4;
       $114 = ((($113)) + 20|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($115) + ($112))|0;
       HEAP32[$114>>2] = $116;
       $117 = $12;
       $118 = $6;
       $119 = (($118) - ($117))|0;
       $6 = $119;
       $120 = $8;
       $121 = (($120) + 1)|0;
       $8 = $121;
       break;
      }
      $122 = $1;
      $123 = ((($122)) + 4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $8;
      $126 = $11;
      $127 = Math_imul($125, $126)|0;
      $128 = (($124) - ($127))|0;
      $13 = $128;
      $129 = $11;
      $14 = $129;
      $130 = $13;
      $131 = $14;
      $132 = ($130|0)>=($131|0);
      if ($132) {
       $133 = $6;
       $134 = $4;
       $135 = ((($134)) + 20|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = (($136) + ($133))|0;
       HEAP32[$135>>2] = $137;
       $6 = 0;
       $138 = $4;
       $139 = ((($138)) + 76|0);
       $140 = HEAP32[$139>>2]|0;
       $15 = $140;
       while(1) {
        $141 = $15;
        $142 = ($141|0)!=(0|0);
        if (!($142)) {
         break;
        }
        $143 = $15;
        $144 = ((($143)) + 20|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = $11;
        $147 = (($145) - ($146))|0;
        $16 = $147;
        $148 = $14;
        $149 = $16;
        $150 = ($148|0)<($149|0);
        if ($150) {
         $151 = $14;
         $16 = $151;
        }
        $152 = $16;
        $153 = ($152|0)>(0);
        if ($153) {
         $154 = $16;
         $155 = $15;
         $156 = ((($155)) + 20|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = (($157) - ($154))|0;
         HEAP32[$156>>2] = $158;
         $159 = $16;
         $160 = $4;
         $161 = ((($160)) + 20|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + ($159))|0;
         HEAP32[$161>>2] = $163;
         $164 = $16;
         $165 = $14;
         $166 = (($165) - ($164))|0;
         $14 = $166;
         $167 = $4;
         $168 = ((($167)) + 20|0);
         $169 = HEAP32[$168>>2]|0;
         $170 = $11;
         $171 = ($169>>>0)>=($170>>>0);
         if ($171) {
          break;
         }
        }
        $172 = $15;
        $173 = ((($172)) + 76|0);
        $174 = HEAP32[$173>>2]|0;
        $15 = $174;
       }
       $175 = $4;
       $176 = ((($175)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = $11;
       $179 = ($177>>>0)<($178>>>0);
       if ($179) {
        break L22;
       }
      }
     }
    } while(0);
    $180 = $4;
    $181 = ((($180)) + 80|0);
    $182 = HEAP32[$181>>2]|0;
    $4 = $182;
   }
   _abort();
   // unreachable;
  } else {
   $183 = $11;
   $184 = $8;
   $185 = Math_imul($183, $184)|0;
   $186 = (($85) - ($185))|0;
   $17 = $186;
   $187 = $5;
   $188 = $1;
   $189 = ((($188)) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($187) - ($190))|0;
   $6 = $191;
   $192 = $3;
   $4 = $192;
   L44: while(1) {
    $193 = $4;
    $194 = ($193|0)!=(0|0);
    $195 = $6;
    $196 = ($195|0)>(0);
    $197 = $194 ? $196 : 0;
    if (!($197)) {
     break L20;
    }
    $198 = $4;
    $199 = ((($198)) + 20|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ($200|0)==(0);
    do {
     if (!($201)) {
      $202 = $6;
      $203 = $4;
      $204 = ((($203)) + 20|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = $11;
      $207 = (($205) - ($206))|0;
      $208 = ($202>>>0)<=($207>>>0);
      $209 = $6;
      if ($208) {
       $210 = $4;
       $211 = ((($210)) + 20|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($212) - ($209))|0;
       HEAP32[$211>>2] = $213;
       $6 = 0;
       break;
      }
      $214 = $17;
      $215 = ($209|0)>($214|0);
      $216 = $4;
      $217 = ((($216)) + 20|0);
      $218 = HEAP32[$217>>2]|0;
      if (!($215)) {
       $269 = $11;
       $270 = (($218) - ($269))|0;
       $271 = $6;
       $272 = (($271) - ($270))|0;
       $6 = $272;
       $273 = $4;
       $274 = ((($273)) + 20|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = $11;
       $277 = (($275) - ($276))|0;
       $278 = $17;
       $279 = (($278) - ($277))|0;
       $17 = $279;
       $280 = $11;
       $281 = $4;
       $282 = ((($281)) + 20|0);
       HEAP32[$282>>2] = $280;
       break;
      }
      $219 = $6;
      $220 = (($219) - ($218))|0;
      $6 = $220;
      $221 = $11;
      $222 = $17;
      $223 = (($222) + ($221))|0;
      $17 = $223;
      $224 = $4;
      $225 = ((($224)) + 20|0);
      HEAP32[$225>>2] = 0;
      $226 = HEAP32[4327]|0;
      $227 = $4;
      $228 = ($226|0)==($227|0);
      if ($228) {
       $229 = HEAP32[4327]|0;
       $230 = ((($229)) + 76|0);
       $231 = HEAP32[$230>>2]|0;
       $4 = $231;
       while(1) {
        $232 = $4;
        $233 = ($232|0)!=(0|0);
        if (!($233)) {
         break;
        }
        $234 = $4;
        $235 = ((($234)) + 20|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = ($236|0)!=(0);
        $238 = $4;
        if ($237) {
         label = 41;
         break;
        }
        $245 = ((($238)) + 76|0);
        $246 = HEAP32[$245>>2]|0;
        $4 = $246;
       }
       if ((label|0) == 41) {
        label = 0;
        HEAP32[4327] = $238;
        $239 = HEAP32[4327]|0;
        $240 = ($239|0)!=(0|0);
        if ($240) {
         $241 = HEAP32[4327]|0;
         $242 = ((($241)) + 4|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = $243;
        } else {
         $244 = 0;
        }
        HEAP32[4326] = $244;
       }
       $247 = $4;
       $248 = ($247|0)==(0|0);
       L66: do {
        if ($248) {
         $249 = HEAP32[4327]|0;
         $250 = ((($249)) + 80|0);
         $251 = HEAP32[$250>>2]|0;
         $4 = $251;
         while(1) {
          $252 = $4;
          $253 = ($252|0)!=(0|0);
          if (!($253)) {
           break L66;
          }
          $254 = $4;
          $255 = ((($254)) + 20|0);
          $256 = HEAP32[$255>>2]|0;
          $257 = ($256|0)!=(0);
          $258 = $4;
          if ($257) {
           break;
          }
          $265 = ((($258)) + 80|0);
          $266 = HEAP32[$265>>2]|0;
          $4 = $266;
         }
         HEAP32[4327] = $258;
         $259 = HEAP32[4327]|0;
         $260 = ($259|0)!=(0|0);
         if ($260) {
          $261 = HEAP32[4327]|0;
          $262 = ((($261)) + 4|0);
          $263 = HEAP32[$262>>2]|0;
          $264 = $263;
         } else {
          $264 = 0;
         }
         HEAP32[4326] = $264;
        }
       } while(0);
       $267 = $4;
       $268 = ($267|0)==(0|0);
       if ($268) {
        break L44;
       }
      }
     }
    } while(0);
    $283 = $4;
    $284 = ((($283)) + 76|0);
    $285 = HEAP32[$284>>2]|0;
    $4 = $285;
   }
   _abort();
   // unreachable;
  }
 } while(0);
 $286 = $6;
 $287 = ($286|0)<(0);
 if ($287) {
  $288 = $6;
  $289 = (0 - ($288))|0;
  $6 = $289;
 }
 $290 = $6;
 $291 = ($290|0)>(0);
 do {
  if ($291) {
   $292 = $3;
   $4 = $292;
   while(1) {
    $293 = $4;
    $294 = ($293|0)!=(0|0);
    if (!($294)) {
     break;
    }
    $295 = $4;
    $296 = ((($295)) + 20|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = ($297|0)==(0);
    if (!($298)) {
     break;
    }
    $299 = $4;
    $300 = ((($299)) + 76|0);
    $301 = HEAP32[$300>>2]|0;
    $4 = $301;
   }
   $302 = $4;
   $303 = ($302|0)==(0|0);
   if ($303) {
    _abort();
    // unreachable;
   } else {
    $304 = $6;
    $305 = $4;
    $306 = ((($305)) + 20|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (($307) + ($304))|0;
    HEAP32[$306>>2] = $308;
    break;
   }
  }
 } while(0);
 $10 = 0;
 $9 = 0;
 $309 = $2;
 $4 = $309;
 while(1) {
  $310 = $4;
  $311 = ($310|0)!=(0|0);
  if (!($311)) {
   break;
  }
  $312 = $4;
  $313 = ((($312)) + 20|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = ($314|0)!=(0);
  if ($315) {
   $316 = $9;
   $317 = $10;
   $318 = (($316) + ($317))|0;
   $319 = $4;
   $320 = ((($319)) + 28|0);
   HEAP32[$320>>2] = $318;
   $321 = $4;
   $322 = ((($321)) + 28|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $4;
   $325 = ((($324)) + 20|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = (($323) + ($326))|0;
   $328 = (($327) - 1)|0;
   $329 = $4;
   $330 = ((($329)) + 32|0);
   HEAP32[$330>>2] = $328;
   $331 = $4;
   $332 = ((($331)) + 28|0);
   $333 = HEAP32[$332>>2]|0;
   $9 = $333;
   $334 = $4;
   $335 = ((($334)) + 20|0);
   $336 = HEAP32[$335>>2]|0;
   $10 = $336;
  } else {
   $337 = $4;
   $338 = ((($337)) + 28|0);
   HEAP32[$338>>2] = 0;
   $339 = $4;
   $340 = ((($339)) + 32|0);
   HEAP32[$340>>2] = 0;
  }
  $341 = $4;
  $342 = ((($341)) + 80|0);
  $343 = HEAP32[$342>>2]|0;
  $4 = $343;
 }
 $344 = $2;
 $4 = $344;
 while(1) {
  $345 = $4;
  $346 = ($345|0)!=(0|0);
  if (!($346)) {
   break;
  }
  $347 = $1;
  $348 = ((($347)) + 8|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $4;
  $351 = ((($350)) + 24|0);
  HEAP32[$351>>2] = $349;
  $352 = $4;
  $353 = ((($352)) + 80|0);
  $354 = HEAP32[$353>>2]|0;
  $4 = $354;
 }
 _redraw_all(1);
 STACKTOP = sp;return;
}
function _xvUseWindow() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4327]|0;
 $1 = HEAP32[4327]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = $0;
 return;
}
function _xvUpdateAllBufferWindows() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4326]|0;
 $0 = $2;
 $3 = HEAP32[4327]|0;
 $1 = $3;
 while(1) {
  $4 = HEAP32[4326]|0;
  $5 = $0;
  $6 = ($4|0)==($5|0);
  if ($6) {
   _redraw_window(0);
  }
  $7 = HEAP32[4327]|0;
  $8 = (_xvNextDisplayedWindow($7)|0);
  HEAP32[4327] = $8;
  $9 = HEAP32[4327]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = HEAP32[4327]|0;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
  } else {
   $14 = 0;
  }
  HEAP32[4326] = $14;
  $15 = HEAP32[4327]|0;
  $16 = $1;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _xvNextDisplayedWindow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 $6 = $2;
 $7 = (_xvNextWindow($6)|0);
 $3 = $7;
 while(1) {
  $8 = $3;
  $9 = $2;
  $10 = ($8|0)!=($9|0);
  $11 = $3;
  $12 = ($11|0)!=(0|0);
  $13 = $10 ? $12 : 0;
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)>(0);
  if ($17) {
   break;
  }
  $18 = $3;
  $19 = (_xvNextWindow($18)|0);
  $3 = $19;
 }
 $20 = $3;
 $1 = $20;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _xvFindWindowByName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 L1: do {
  if ($or$cond) {
   $11 = $3;
   $5 = $11;
   while(1) {
    $12 = $5;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $6 = $16;
    $17 = $6;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $4;
     $20 = $6;
     $21 = (_strcmp($19,$20)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      break;
     }
    }
    $24 = $5;
    $25 = (_xvNextDisplayedWindow($24)|0);
    $5 = $25;
    $26 = $5;
    $27 = $3;
    $28 = ($26|0)!=($27|0);
    if (!($28)) {
     break L1;
    }
   }
   $23 = $5;
   $2 = $23;
   $29 = $2;
   STACKTOP = sp;return ($29|0);
  }
 } while(0);
 $2 = 0;
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function _xvCanSplit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[4327]|0;
 $0 = $2;
 $1 = 0;
 while(1) {
  $3 = $0;
  $4 = (_xvNextWindow($3)|0);
  $0 = $4;
  $5 = $1;
  $6 = (($5) + 1)|0;
  $1 = $6;
  $7 = $0;
  $8 = HEAP32[4327]|0;
  $9 = ($7|0)!=($8|0);
  if (!($9)) {
   break;
  }
 }
 $10 = $1;
 $11 = HEAP32[(3180)>>2]|0;
 $12 = ($10|0)<($11|0);
 $13 = $12&1;
 STACKTOP = sp;return ($13|0);
}
function _init_yankput() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _do_yank($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $8;
 $15 = (_yp_get_buffer($14)|0);
 $9 = $15;
 $16 = $9;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $4 = 0;
  $82 = $4;
  STACKTOP = sp;return ($82|0);
 }
 $18 = $8;
 $19 = ($18>>>0)<(128);
 if ($19) {
  $20 = $8;
  $21 = (_isupper($20)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $9;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   $27 = $25;
  } else {
   $27 = 0;
  }
 } else {
  $27 = 0;
 }
 $26 = $27&1;
 $10 = $26;
 $28 = $10;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = $9;
  _yp_free($30);
 }
 $31 = $7;
 $32 = ($31|0)!=(0);
 do {
  if ($32) {
   $33 = $10;
   $34 = ($33|0)!=(0);
   $35 = $9;
   $36 = $34 ? $11 : $35;
   $37 = $5;
   $38 = $6;
   $39 = (_yank_chars_to_yp($36,$37,$38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $4 = 0;
    $82 = $4;
    STACKTOP = sp;return ($82|0);
   }
   $41 = $10;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $9;
    $44 = (_append_chars_to_yp_buf($43,$11)|0);
    $45 = ($44|0)!=(0);
    if (!($45)) {
     $4 = 0;
     $82 = $4;
     STACKTOP = sp;return ($82|0);
    }
   }
  } else {
   $46 = $5;
   $47 = HEAP32[$46>>2]|0;
   $48 = $6;
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_copy_lines($47,$51)|0);
   $12 = $52;
   $53 = $12;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $4 = 0;
    $82 = $4;
    STACKTOP = sp;return ($82|0);
   }
   $55 = $10;
   $56 = ($55|0)!=(0);
   if (!($56)) {
    $57 = $12;
    $58 = $9;
    $59 = ((($58)) + 12|0);
    HEAP32[$59>>2] = $57;
    $60 = $9;
    HEAP32[$60>>2] = 2;
    break;
   }
   $61 = $9;
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(1);
   if ($63) {
    $64 = $9;
    $65 = (_yp_chars_to_lines($64)|0);
    $66 = ($65|0)!=(0);
    if (!($66)) {
     $4 = 0;
     $82 = $4;
     STACKTOP = sp;return ($82|0);
    }
   }
   $67 = $9;
   $68 = ((($67)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_last_line_of($69)|0);
   $13 = $70;
   $71 = $12;
   $72 = $13;
   $73 = ((($72)) + 4|0);
   HEAP32[$73>>2] = $71;
  }
 } while(0);
 $74 = $8;
 $75 = ($74>>>0)<(128);
 if ($75) {
  $76 = $8;
  $77 = (_isalpha($76)|0);
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $9;
   $80 = (_copy_to_unnamed_yb($79)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    $4 = 0;
    $82 = $4;
    STACKTOP = sp;return ($82|0);
   }
  }
 }
 $4 = 1;
 $82 = $4;
 STACKTOP = sp;return ($82|0);
}
function _yp_get_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_bufno($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)<(0);
 if ($7) {
  _show_error(12759,$vararg_buffer);
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = $3;
  $9 = (17332 + ($8<<4)|0);
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _yp_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 1:  {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = $1;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = 0;
  $9 = $1;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  $12 = $1;
  $13 = ((($12)) + 8|0);
  HEAP32[$13>>2] = 0;
  break;
 }
 case 2:  {
  break;
 }
 default: {
  $19 = $1;
  HEAP32[$19>>2] = 0;
  STACKTOP = sp;return;
 }
 }
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 _throw($16);
 $17 = $1;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _yank_chars_to_yp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $11 = $6;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cntllines($10,$12)|0);
 $7 = $13;
 $14 = $5;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$8>>2] = $15;
 $16 = $6;
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $21 = $6;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $$sink = $23;
 } else {
  $24 = $5;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strlen($27)|0);
  $29 = (($28) - 1)|0;
  $$sink = $29;
 }
 $30 = ((($8)) + 4|0);
 HEAP32[$30>>2] = $$sink;
 $31 = $5;
 $32 = (_yanktext($31,$8)|0);
 $33 = $4;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = $32;
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $3 = 0;
  $81 = $3;
  STACKTOP = sp;return ($81|0);
 }
 $39 = $7;
 $40 = ($39|0)>(1);
 if ($40) {
  $41 = $6;
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$8>>2] = $42;
  $43 = ((($8)) + 4|0);
  HEAP32[$43>>2] = 0;
  $44 = $6;
  $45 = (_yanktext($8,$44)|0);
  $46 = $4;
  $47 = ((($46)) + 8|0);
  HEAP32[$47>>2] = $45;
  $48 = $4;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = $4;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   _free($54);
   $3 = 0;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  }
 } else {
  $55 = $4;
  $56 = ((($55)) + 8|0);
  HEAP32[$56>>2] = 0;
 }
 $57 = $7;
 $58 = ($57|0)>(2);
 if ($58) {
  $59 = $5;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $6;
  $64 = HEAP32[$63>>2]|0;
  $65 = (_copy_lines($62,$64)|0);
  $66 = $4;
  $67 = ((($66)) + 12|0);
  HEAP32[$67>>2] = $65;
  $68 = $4;
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(0|0);
  if ($71) {
   $72 = $4;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   _free($74);
   $75 = $4;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   _free($77);
   $3 = 0;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  }
 } else {
  $78 = $4;
  $79 = ((($78)) + 12|0);
  HEAP32[$79>>2] = 0;
 }
 $80 = $4;
 HEAP32[$80>>2] = 1;
 $3 = 1;
 $81 = $3;
 STACKTOP = sp;return ($81|0);
}
function _append_chars_to_yp_buf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $9 = $3;
  _yp_lines_to_chars($9);
 }
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 12|0);
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_append_str_to_lines($15,$18)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $2 = 0;
   $59 = $2;
   STACKTOP = sp;return ($59|0);
  }
 }
 $21 = $4;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $3;
  $26 = ((($25)) + 12|0);
  $27 = $3;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_append_str_to_lines($26,$29)|0);
  $31 = ($30|0)!=(0);
  if (!($31)) {
   $2 = 0;
   $59 = $2;
   STACKTOP = sp;return ($59|0);
  }
 }
 $32 = $4;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $3;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_last_line_of($38)|0);
  $5 = $39;
  $40 = $4;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
  $45 = $5;
  $46 = $4;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$48>>2] = $45;
 }
 $49 = $4;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 $53 = $4;
 $54 = ((($53)) + 4|0);
 $55 = ((($53)) + 8|0);
 $$sink = $52 ? $55 : $54;
 $56 = HEAP32[$$sink>>2]|0;
 $57 = $3;
 $58 = ((($57)) + 8|0);
 HEAP32[$58>>2] = $56;
 $2 = 1;
 $59 = $2;
 STACKTOP = sp;return ($59|0);
}
function _copy_lines($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $7 = $6;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $5 = $10;
 while(1) {
  $11 = $5;
  $12 = $4;
  $13 = ($11|0)!=($12|0);
  if (!($13)) {
   label = 6;
   break;
  }
  $14 = $5;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strlen($16)|0);
  $18 = (($17) + 1)|0;
  $19 = (_newline($18)|0);
  $8 = $19;
  $20 = $8;
  $21 = ($20|0)==(0|0);
  if ($21) {
   label = 4;
   break;
  }
  $24 = $8;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  (_strcpy($26,$29)|0);
  $30 = $8;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = 0;
  $32 = $7;
  $33 = $8;
  HEAP32[$33>>2] = $32;
  $34 = $8;
  $35 = $7;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
  $37 = $8;
  $7 = $37;
  $38 = $5;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $5 = $40;
 }
 if ((label|0) == 4) {
  $22 = ((($6)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  _throw($23);
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 6) {
  $41 = ((($6)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $2 = $42;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _yp_chars_to_lines($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_snewline($8)|0);
 $3 = $9;
 $10 = $3;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $1 = 0;
  $58 = $1;
  STACKTOP = sp;return ($58|0);
 }
 $12 = $2;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_snewline($18)|0);
  $4 = $19;
  $20 = $4;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $1 = 0;
   $58 = $1;
   STACKTOP = sp;return ($58|0);
  }
 }
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = $3;
  $27 = $2;
  $$sink = $26;$$sink2 = $27;
 } else {
  $28 = $2;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $3;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $30;
  $33 = $3;
  $34 = $2;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$36>>2] = $33;
  $37 = $3;
  $38 = $2;
  $$sink = $37;$$sink2 = $38;
 }
 $39 = ((($$sink2)) + 12|0);
 HEAP32[$39>>2] = $$sink;
 $40 = $2;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $2;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_last_line_of($46)|0);
  $5 = $47;
  $48 = $5;
  $49 = $4;
  HEAP32[$49>>2] = $48;
  $50 = $4;
  $51 = $5;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
 }
 $53 = $2;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = 0;
 $55 = $2;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = $2;
 HEAP32[$57>>2] = 2;
 $1 = 1;
 $58 = $1;
 STACKTOP = sp;return ($58|0);
}
function _last_line_of($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = $2;
  if (!($7)) {
   break;
  }
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
 }
 STACKTOP = sp;return ($8|0);
}
function _copy_to_unnamed_yb($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_bufno(64)|0);
 $5 = (17332 + ($4<<4)|0);
 $3 = $5;
 $6 = $3;
 _yp_free($6);
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strsave($16)|0);
  $18 = $3;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = ($17|0)==(0|0);
  if (!($20)) {
   $21 = $2;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $2;
    $26 = ((($25)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_strsave($27)|0);
    $29 = $3;
    $30 = ((($29)) + 8|0);
    HEAP32[$30>>2] = $28;
    $31 = $3;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     label = 9;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $35 = $2;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $2;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_copy_lines($41,0)|0);
    $43 = $3;
    $44 = ((($43)) + 12|0);
    HEAP32[$44>>2] = $42;
    $45 = $3;
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     $49 = $3;
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     _free($51);
     $52 = $3;
     $53 = ((($52)) + 8|0);
     HEAP32[$53>>2] = 0;
     label = 9;
     break;
    }
   }
   $1 = 1;
   $59 = $1;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 if ((label|0) == 9) {
  $54 = $3;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  _free($56);
  $57 = $3;
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = 0;
 }
 $1 = 0;
 $59 = $1;
 STACKTOP = sp;return ($59|0);
}
function _bufno($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 L1: do {
  switch ($3|0) {
  case 61: case 60: case 64: case 63: case 58: case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
   label = 11;
   break;
  }
  case 62: case 59:  {
   $1 = -1;
   break;
  }
  case 33:  {
   $2 = 59;
   label = 11;
   break;
  }
  case 47:  {
   $2 = 62;
   label = 11;
   break;
  }
  default: {
   $4 = $2;
   $5 = ($4>>>0)<(128);
   if ($5) {
    $6 = $2;
    $7 = (_islower($6)|0);
    $8 = ($7|0)!=(0);
    if ($8) {
     $9 = $2;
     $10 = $9 & 95;
     $2 = $10;
     label = 11;
     break L1;
    }
   }
   $11 = $2;
   $12 = ($11>>>0)<(128);
   if ($12) {
    $13 = $2;
    $14 = (_isupper($13)|0);
    $15 = ($14|0)!=(0);
    if ($15) {
     label = 11;
     break L1;
    }
   }
   $1 = -1;
  }
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   $16 = $2;
   $17 = ($16|0)<(49);
   $18 = $2;
   $19 = ($18|0)>(90);
   $or$cond = $17 | $19;
   if ($or$cond) {
    $1 = -1;
    break;
   } else {
    $20 = $2;
    $21 = (($20) - 49)|0;
    $1 = $21;
    break;
   }
  }
 } while(0);
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function _yp_lines_to_chars($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 $17 = $2;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = $2;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $2;
 _throw($21);
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $46 = $1;
  HEAP32[$46>>2] = 1;
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = ((($26)) + 12|0);
 $3 = $27;
 while(1) {
  $28 = $3;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  $33 = $3;
  $34 = HEAP32[$33>>2]|0;
  if (!($32)) {
   break;
  }
  $35 = ((($34)) + 4|0);
  $3 = $35;
 }
 $36 = ((($34)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $1;
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = $37;
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 0;
 $43 = $3;
 $44 = HEAP32[$43>>2]|0;
 _throw($44);
 $45 = $3;
 HEAP32[$45>>2] = 0;
 $46 = $1;
 HEAP32[$46>>2] = 1;
 STACKTOP = sp;return;
}
function _append_str_to_lines($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = (_snewline($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $6;
  $15 = $3;
  HEAP32[$15>>2] = $14;
 } else {
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_last_line_of($17)|0);
  $5 = $18;
  $19 = $6;
  $20 = $5;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $5;
  $23 = $6;
  HEAP32[$23>>2] = $22;
 }
 $2 = 1;
 $24 = $2;
 STACKTOP = sp;return ($24|0);
}
function _yanktext($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) - ($12))|0;
 $14 = (($13) + 1)|0;
 $5 = $14;
 $15 = $5;
 $16 = (($15) + 1)|0;
 $17 = (_alloc($16)|0);
 $6 = $17;
 $18 = $6;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 } else {
  $20 = $6;
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) + ($27)|0);
  $29 = $5;
  $30 = (($29) + 1)|0;
  _memcpy(($20|0),($28|0),($30|0))|0;
  $31 = $6;
  $32 = $5;
  $33 = (($31) + ($32)|0);
  HEAP8[$33>>0] = 0;
  $34 = $6;
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _yank_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (_yp_get_buffer($10)|0);
 $7 = $11;
 $12 = $7;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $14 = $7;
 _yp_free($14);
 $15 = $6;
 $16 = ($15|0)!=(0);
 $17 = $5;
 do {
  if ($16) {
   $18 = (_strlen($17)|0);
   $19 = (($18) + 1)|0;
   $20 = (_newline($19)|0);
   $8 = $20;
   $21 = $8;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = $8;
    $24 = ((($23)) + 4|0);
    HEAP32[$24>>2] = 0;
    $25 = $8;
    HEAP32[$25>>2] = 0;
    $26 = $8;
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $5;
    (_strcpy($28,$29)|0);
    break;
   }
   $3 = 0;
   $42 = $3;
   STACKTOP = sp;return ($42|0);
  } else {
   $30 = (_strsave($17)|0);
   $9 = $30;
   $31 = $9;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $3 = 0;
    $42 = $3;
    STACKTOP = sp;return ($42|0);
   }
  }
 } while(0);
 $33 = $6;
 $34 = ($33|0)!=(0);
 $35 = $7;
 if ($34) {
  HEAP32[$35>>2] = 2;
  $36 = $8;
  $37 = $7;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $36;
 } else {
  HEAP32[$35>>2] = 1;
  $39 = $9;
  $40 = $7;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
 }
 $3 = 1;
 $42 = $3;
 STACKTOP = sp;return ($42|0);
}
function _do_put($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $11 = sp + 32|0;
 $12 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $18 = $5;
 $19 = (_yp_get_buffer($18)|0);
 $6 = $19;
 $20 = $6;
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[4326]|0;
 $9 = $22;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $6;
 $29 = HEAP32[$28>>2]|0;
 switch ($29|0) {
 case 1:  {
  $30 = (_start_command()|0);
  $31 = ($30|0)!=(0);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = HEAP32[4327]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $10 = $35;
  $36 = $4;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = $7;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $10;
   $42 = (($40) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43 << 24 >> 24;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $10;
    $47 = (($46) + 1)|0;
    $10 = $47;
   }
  }
  $48 = $7;
  $49 = $10;
  $50 = $6;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  _replchars($48,$49,0,$52);
  $53 = $7;
  HEAP32[$12>>2] = $53;
  $54 = $10;
  $55 = ((($12)) + 4|0);
  HEAP32[$55>>2] = $54;
  _updateline(1);
  $56 = HEAP32[4327]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$11>>2] = $58;
  $59 = HEAP32[4327]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $6;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_strlen($65)|0);
  $67 = (($62) + ($66))|0;
  $68 = ((($11)) + 4|0);
  HEAP32[$68>>2] = $67;
  $69 = $4;
  $70 = ($69|0)==(1);
  if ($70) {
   $71 = ((($11)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + -1)|0;
   HEAP32[$71>>2] = $73;
  }
  $74 = $6;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0|0);
  if ($77) {
   $78 = $10;
   $79 = $6;
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (_strlen($81)|0);
   $83 = (($78) + ($82))|0;
   $13 = $83;
   $84 = $6;
   $85 = ((($84)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (_strlen($86)|0);
   $88 = (($87) + 1)|0;
   $89 = (_newline($88)|0);
   $14 = $89;
   $90 = $14;
   $91 = ($90|0)==(0|0);
   if (!($91)) {
    $92 = $8;
    $93 = $14;
    _repllines($92,0,$93);
    $94 = $14;
    $8 = $94;
    $95 = $8;
    $96 = $7;
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $13;
    $100 = (($98) + ($99)|0);
    _replchars($95,0,0,$100);
    $101 = $7;
    $102 = $13;
    $103 = $7;
    $104 = ((($103)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $13;
    $107 = (($105) + ($106)|0);
    $108 = (_strlen($107)|0);
    _replchars($101,$102,$108,19254);
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    $109 = $6;
    $110 = ((($109)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(0|0);
    if ($112) {
     $113 = HEAP32[4327]|0;
     $114 = HEAP32[$113>>2]|0;
     $115 = HEAP32[$114>>2]|0;
     $116 = ((($115)) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$11>>2] = $117;
     $118 = $6;
     $119 = ((($118)) + 12|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (_copy_lines($120,0)|0);
     $15 = $121;
     $122 = $15;
     $123 = ($122|0)==(0|0);
     if ($123) {
      break;
     }
     $124 = $8;
     $125 = $15;
     _repllines($124,0,$125);
     $126 = HEAP32[$11>>2]|0;
     $127 = HEAP32[$126>>2]|0;
     HEAP32[$11>>2] = $127;
     $128 = HEAP32[$11>>2]|0;
     $129 = ((($128)) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (_strlen($130)|0);
     $132 = (($131) - 1)|0;
     $133 = ((($11)) + 4|0);
     HEAP32[$133>>2] = $132;
    }
    $134 = $6;
    $135 = ((($134)) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)!=(0|0);
    if ($137) {
     $138 = $8;
     $139 = $9;
     $140 = ((($139)) + 8|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($138|0)==($141|0);
     if ($142) {
      $143 = $6;
      $144 = ((($143)) + 8|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (_strlen($145)|0);
      $147 = (($146) + 1)|0;
      $148 = (_newline($147)|0);
      $16 = $148;
      $149 = $16;
      $150 = ($149|0)==(0|0);
      if ($150) {
       break;
      }
      $151 = $8;
      $152 = $16;
      _repllines($151,0,$152);
      $153 = $16;
      $8 = $153;
     }
     $154 = $8;
     $155 = $6;
     $156 = ((($155)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     _replchars($154,0,0,$157);
     $158 = $8;
     HEAP32[$11>>2] = $158;
     $159 = $6;
     $160 = ((($159)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (_strlen($161)|0);
     $163 = (($162) - 1)|0;
     $164 = ((($11)) + 4|0);
     HEAP32[$164>>2] = $163;
    }
    _end_command();
    $165 = HEAP32[$12>>2]|0;
    $166 = ((($12)) + 4|0);
    $167 = HEAP32[$166>>2]|0;
    _move_cursor($165,$167);
    _move_window_to_cursor();
    _cursupdate();
    _xvUpdateAllBufferWindows();
    STACKTOP = sp;return;
   }
  } while(0);
  _end_command();
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $168 = $6;
  $169 = ((($168)) + 12|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (_copy_lines($170,0)|0);
  $17 = $171;
  $172 = $17;
  $173 = ($172|0)==(0|0);
  if ($173) {
   STACKTOP = sp;return;
  }
  $174 = $4;
  $175 = ($174|0)==(0);
  $176 = $8;
  $177 = $7;
  $178 = $175 ? $176 : $177;
  $179 = $17;
  _repllines($178,0,$179);
  $180 = $17;
  _move_cursor($180,0);
  _begin_line(1);
  _move_window_to_cursor();
  _cursupdate();
  _xvUpdateAllBufferWindows();
  STACKTOP = sp;return;
  break;
 }
 default: {
  _show_error(12779,$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function _yp_stuff_input($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (_yp_get_buffer($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = ($12|0)!=(0);
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 if (!($13)) {
  switch ($15|0) {
  case 1:  {
   $16 = $6;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $4;
   $20 = $5;
   _put($18,$19,1,$20);
   break;
  }
  case 2:  {
   break;
  }
  default: {
   _show_error(12779,$vararg_buffer);
   STACKTOP = sp;return;
  }
  }
  $21 = $6;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $7 = $23;
  while(1) {
   $24 = $7;
   $25 = ($24|0)!=(0|0);
   if (!($25)) {
    break;
   }
   $26 = $7;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $4;
   $30 = $5;
   _put($28,$29,1,$30);
   $31 = $7;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $7 = $33;
  }
  $34 = $6;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   STACKTOP = sp;return;
  }
  $37 = $6;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if (!($40)) {
   STACKTOP = sp;return;
  }
  $41 = $6;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $4;
  $45 = $5;
  _put($43,$44,1,$45);
  STACKTOP = sp;return;
 }
 switch ($15|0) {
 case 1:  {
  $46 = $6;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $6;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = $5;
   _put($52,$53,0,$54);
  }
  break;
 }
 case 2:  {
  break;
 }
 default: {
  _show_error(12779,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 }
 $55 = $6;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 L29: do {
  if ($58) {
   $59 = $6;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $7 = $61;
   while(1) {
    $62 = $7;
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0|0);
    if (!($65)) {
     break;
    }
    $66 = $7;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $7 = $68;
   }
   while(1) {
    $69 = $7;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $4;
    $73 = $5;
    _put($71,$72,1,$73);
    $74 = $7;
    $75 = $6;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($74|0)!=($77|0);
    if (!($78)) {
     break L29;
    }
    $79 = $7;
    $80 = HEAP32[$79>>2]|0;
    $7 = $80;
    $81 = ($80|0)!=(0|0);
    if (!($81)) {
     break;
    }
   }
  }
 } while(0);
 $82 = $6;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(1);
 if (!($84)) {
  STACKTOP = sp;return;
 }
 $85 = $6;
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = $6;
 $90 = ((($89)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $4;
 $93 = $6;
 $94 = ((($93)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 $97 = $96&1;
 $98 = $5;
 _put($91,$92,$97,$98);
 STACKTOP = sp;return;
}
function _put($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $17 = $4;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(58);
  $21 = $20 ? 12804 : 19254;
  $22 = $4;
  $23 = $6;
  $24 = ($23|0)!=(0);
  $25 = $24 ? 12795 : 19254;
  HEAP32[$vararg_buffer1>>2] = $21;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $25;
  _stuff(12806,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $10 = $7;
 $11 = ($10|0)!=(0);
 $12 = $6;
 $13 = ($12|0)!=(0);
 if (!($11)) {
  $15 = $13 ? 12797 : 12801;
  $16 = $4;
  HEAP32[$vararg_buffer>>2] = $16;
  _stuff($15,$vararg_buffer);
  STACKTOP = sp;return;
 }
 if ($13) {
  _stuff_to_map(12795);
 }
 $14 = $4;
 _stuff_to_map($14);
 STACKTOP = sp;return;
}
function _yp_push_deleted() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_bufno(57)|0);
 $3 = (17332 + ($2<<4)|0);
 _yp_free($3);
 $4 = (_bufno(56)|0);
 $5 = (17332 + ($4<<4)|0);
 $1 = $5;
 while(1) {
  $6 = $1;
  $7 = (_bufno(49)|0);
  $8 = (17332 + ($7<<4)|0);
  $9 = ($6>>>0)>=($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 16|0);
  $12 = $1;
  ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$12+12>>2]|0;
  $13 = $1;
  $14 = ((($13)) + -16|0);
  $1 = $14;
 }
 $15 = (_bufno(64)|0);
 $16 = (17332 + ($15<<4)|0);
 $0 = $16;
 $17 = (_bufno(49)|0);
 $18 = (17332 + ($17<<4)|0);
 $19 = $0;
 ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[$19+12>>2]|0;
 $20 = $0;
 HEAP32[$20>>2] = 0;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = 0;
 $23 = $0;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = 0;
 STACKTOP = sp;return;
}
function _inch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (0)>(0);
 do {
  if ($4) {
   $5 = (_kbgetc()|0);
   $1 = $5;
  } else {
   $6 = HEAP32[1423]|0;
   (_fflush($6)|0);
   $7 = $2;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = (_kbgetc()|0);
    $3 = $9;
    $10 = $3;
    $1 = $10;
    break;
   } else {
    $11 = (_kbgetc()|0);
    $1 = $11;
    break;
   }
  }
 } while(0);
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _call_shell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[4503] = $2;
 $3 = (_runvp(18012)|0);
 STACKTOP = sp;return ($3|0);
}
function _runvp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = sp + 16|0;
 $2 = $0;
 $6 = HEAP32[1423]|0;
 (_fflush($6)|0);
 $7 = HEAP32[1298]|0;
 (_fflush($7)|0);
 $8 = (_fork()|0);
 $3 = $8;
 $9 = $3;
 switch ($9|0) {
 case -1:  {
  $1 = -1;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
  break;
 }
 case 0:  {
  (_signal(2,(0|0))|0);
  (_signal(3,(0|0))|0);
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  (_execvp(($11|0),($12|0))|0);
  $13 = HEAP32[1423]|0;
  (_fputs(12813,$13)|0);
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[1423]|0;
  (_fputs($15,$16)|0);
  $17 = HEAP32[1423]|0;
  (_fputs(12829,$17)|0);
  $18 = (___errno_location()|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_strerror($19)|0);
  $21 = HEAP32[1423]|0;
  (_fputs($20,$21)|0);
  $22 = HEAP32[1423]|0;
  (_fputs(12832,$22)|0);
  $23 = HEAP32[1423]|0;
  (_fflush($23)|0);
  while(1) {
   $24 = (_read(0,$5,1)|0);
   $25 = ($24|0)==(1);
   if (!($25)) {
    label = 6;
    break;
   }
   $26 = HEAP8[$5>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)!=(10);
   if (!($28)) {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   __exit(1);
   // unreachable;
  }
  break;
 }
 default: {
  while(1) {
   $29 = (_wait(($4|0))|0);
   $30 = $3;
   $31 = ($29|0)!=($30|0);
   if (!($31)) {
    break;
   }
  }
  $32 = HEAP32[$4>>2]|0;
  $1 = $32;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 }
 return (0)|0;
}
function _call_system($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = HEAP32[(4100)>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[1423]|0;
  (_fputs(12858,$5)|0);
  $1 = -1;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = HEAP32[(4100)>>2]|0;
  HEAP32[1214] = $6;
  $7 = $2;
  HEAP32[(4864)>>2] = $7;
  $8 = (_runvp(4856)|0);
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _Wait200ms() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 (_signal(14,(72|0))|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 200000;
 $5 = (_setitimer(0,($0|0),(0|0))|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  STACKTOP = sp;return;
 }
 (_pause()|0);
 HEAP32[$0>>2] = 0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 0;
 (_setitimer(0,($0|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _nothing($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _sys_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = 0;
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = _emscripten_asm_const_ii(3, ($2|0))|0;
 (_tcgetattr(0,18020)|0);
 dest=18080; src=18020; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = HEAP32[(18084)>>2]|0;
 $5 = $4 & -6150;
 HEAP32[(18084)>>2] = $5;
 $6 = HEAP32[(18092)>>2]|0;
 $7 = $6 & -3707;
 HEAP32[(18092)>>2] = $7;
 $8 = HEAP32[4520]|0;
 $9 = $8 & -449;
 HEAP32[4520] = $9;
 HEAP8[(18103)>>0] = 1;
 HEAP8[(18102)>>0] = 0;
 HEAP8[(18110)>>0] = 0;
 HEAP8[(18107)>>0] = 0;
 $10 = HEAP8[(18097)>>0]|0;
 HEAP8[11849] = $10;
 $11 = HEAP32[1423]|0;
 (_setvbuf($11,19126,0,128)|0);
 _getScreenSize($0,$1);
 $12 = HEAP32[$0>>2]|0;
 $13 = _emscripten_asm_const_ii(4, ($12|0))|0;
 _tty_open($0,$1);
 $14 = HEAP32[$0>>2]|0;
 $15 = _emscripten_asm_const_ii(5, ($14|0))|0;
 _sys_startv();
 HEAP32[4501] = 1;
 $16 = HEAP32[$0>>2]|0;
 $17 = _emscripten_asm_const_ii(6, ($16|0))|0;
 STACKTOP = sp;return;
}
function _getScreenSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 (_ioctl(0,21523,$vararg_buffer)|0);
 $6 = HEAP16[$4>>1]|0;
 $7 = $6&65535;
 $8 = $2;
 HEAP32[$8>>2] = $7;
 $9 = ((($4)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = (_getenv((13188|0))|0);
 $5 = $13;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $5;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $5;
   $21 = (_atol($20)|0);
   $22 = $2;
   HEAP32[$22>>2] = $21;
  }
 }
 $23 = (_getenv((13194|0))|0);
 $5 = $23;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $5;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = (_isdigit($27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $5;
 $31 = (_atol($30)|0);
 $32 = $3;
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _sys_startv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4535]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  return;
 }
 $2 = HEAP32[4535]|0;
 $3 = _emscripten_asm_const_ii(7, ($2|0))|0;
 $4 = _emscripten_asm_const_ii(8, 0)|0;
 _tty_startv();
 HEAP32[4535] = 1;
 $5 = HEAP32[4535]|0;
 $6 = _emscripten_asm_const_ii(9, ($5|0))|0;
 return;
}
function _sys_endv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4535]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[4550]|0;
 $3 = (($2) - 1)|0;
 _tty_goto($3,0);
 _erase_line();
 _tty_endv();
 $4 = HEAP32[1423]|0;
 (_fflush($4)|0);
 (_tcsetattr(0,1,18020)|0);
 HEAP32[4535] = 0;
 return;
}
function _sys_exit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _sys_endv();
 $2 = HEAP32[1391]|0;
 (_fclose($2)|0);
 $3 = HEAP32[1423]|0;
 (_fclose($3)|0);
 $4 = HEAP32[1298]|0;
 (_fclose($4)|0);
 $5 = $1;
 __exit(($5|0));
 // unreachable;
}
function _foutch($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_putchar($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _tempfname($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 56|0;
 $10 = sp + 8|0;
 $2 = $0;
 $9 = 0;
 $12 = $2;
 $13 = (_strrchr($12,47)|0);
 $4 = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $2;
  $4 = $15;
 } else {
  $16 = $4;
  $17 = ((($16)) + 1|0);
  $4 = $17;
 }
 $18 = HEAP32[4536]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[4536]|0;
  $21 = (_strlen($20)|0);
  $27 = $21;
 } else {
  $22 = $4;
  $23 = $2;
  $24 = $22;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26;
 }
 $7 = $27;
 HEAP8[$3>>0] = 35;
 $28 = ((($3)) + 1|0);
 $29 = $4;
 (_strncpy($28,$29,14)|0);
 $30 = ((($3)) + 14|0);
 HEAP8[$30>>0] = 0;
 $31 = (_strlen($3)|0);
 $32 = (($3) + ($31)|0);
 $5 = $32;
 $33 = $5;
 $34 = ((($3)) + 10|0);
 $35 = ($33>>>0)>($34>>>0);
 if ($35) {
  $36 = ((($3)) + 10|0);
  $5 = $36;
 }
 $37 = $5;
 $38 = $37;
 $39 = $3;
 $40 = (($38) - ($39))|0;
 $8 = $40;
 $41 = $7;
 $42 = $8;
 $43 = (($41) + ($42))|0;
 $44 = (($43) + 5)|0;
 $45 = (_alloc($44)|0);
 $6 = $45;
 $46 = $6;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 $48 = $7;
 $49 = ($48>>>0)>(0);
 if ($49) {
  $50 = $6;
  $51 = HEAP32[4536]|0;
  $52 = ($51|0)!=(0|0);
  $53 = HEAP32[4536]|0;
  $54 = $2;
  $55 = $52 ? $53 : $54;
  $56 = $7;
  _memcpy(($50|0),($55|0),($56|0))|0;
 }
 $57 = $6;
 $58 = $7;
 $59 = (($57) + ($58)|0);
 $60 = $8;
 _memcpy(($59|0),($3|0),($60|0))|0;
 $61 = $6;
 $62 = $7;
 $63 = $8;
 $64 = (($62) + ($63))|0;
 $65 = (($61) + ($64)|0);
 $5 = $65;
 $66 = $5;
 $67 = ((($66)) + 1|0);
 $5 = $67;
 (_strcpy($66,13202)|0);
 while(1) {
  $68 = $6;
  $69 = (_access($68,0)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   break;
  }
  $71 = ((($10)) + 4|0);
  HEAP32[$71>>2] = 0;
  $72 = ((($10)) + 12|0);
  HEAP32[$72>>2] = 0;
  $73 = ((($10)) + 8|0);
  HEAP32[$73>>2] = 0;
  $74 = $9;
  $75 = (($74) + 1)|0;
  $9 = $75;
  HEAP32[$vararg_buffer>>2] = $75;
  (_lformat($10,13207,$vararg_buffer)|0);
  $76 = $5;
  $77 = (_flexgetstr($10)|0);
  (_strncpy($76,$77,3)|0);
  _flexdelete($10);
 }
 $78 = $6;
 $79 = (_fopen($78,13212)|0);
 $11 = $79;
 $80 = $11;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $11;
  (_fclose($82)|0);
  $83 = $6;
  (_remove($83)|0);
 } else {
  $84 = HEAP32[4536]|0;
  $85 = ($84|0)==(0|0);
  if ($85) {
   HEAP32[4536] = 13214;
   $86 = $2;
   $87 = (_tempfname($86)|0);
   $6 = $87;
   HEAP32[4536] = 0;
  }
 }
 $88 = $6;
 $1 = $88;
 $89 = $1;
 STACKTOP = sp;return ($89|0);
}
function _sys_pipe($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 48|0;
 $8 = sp + 40|0;
 $17 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $18 = HEAP32[(4100)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $3 = 0;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 }
 $20 = HEAP32[(4100)>>2]|0;
 HEAP32[1218] = $20;
 $21 = $4;
 HEAP32[(4880)>>2] = $21;
 $13 = -1;
 $12 = -1;
 $11 = -1;
 $10 = -1;
 $9 = -1;
 $22 = ((($8)) + 4|0);
 HEAP32[$22>>2] = -1;
 HEAP32[$8>>2] = -1;
 $23 = ((($7)) + 4|0);
 HEAP32[$23>>2] = -1;
 HEAP32[$7>>2] = -1;
 $24 = $5;
 $25 = ($24|0)==(0|0);
 L5: do {
  if ($25) {
   $26 = (_dup(0)|0);
   $$sink = $26;$$sink2 = 0;
   label = 11;
  } else {
   $27 = (_pipe($7)|0);
   $28 = ($27|0)==(-1);
   if ($28) {
    label = 24;
   } else {
    $29 = (_fork()|0);
    $9 = $29;
    switch ($29|0) {
    case -1:  {
     label = 24;
     break L5;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $39 = ((($7)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     (_close($40)|0);
     $$sink = -1;$$sink2 = 1;
     label = 11;
     break L5;
    }
    }
    $30 = HEAP32[$7>>2]|0;
    (_close($30)|0);
    $31 = ((($7)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (___fdopen($32,13212)|0);
    $16 = $33;
    $34 = $16;
    $35 = ($34|0)==(0|0);
    if ($35) {
     _exit(1);
     // unreachable;
    } else {
     $36 = $5;
     $37 = $16;
     (FUNCTION_TABLE_ii[$36 & 127]($37)|0);
     $38 = $16;
     (_fclose($38)|0);
     _exit(0);
     // unreachable;
    }
   }
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $41 = (($7) + ($$sink2<<2)|0);
   HEAP32[$41>>2] = $$sink;
   $42 = $6;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $44 = (_dup(0)|0);
    HEAP32[$8>>2] = $44;
    $45 = (_dup(1)|0);
    $46 = ((($8)) + 4|0);
    HEAP32[$46>>2] = $45;
   } else {
    $47 = (_pipe($8)|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     label = 24;
     break;
    }
   }
   $49 = (_dup(0)|0);
   $11 = $49;
   $50 = ($49|0)==(-1);
   if ($50) {
    label = 24;
   } else {
    $51 = (_dup(1)|0);
    $12 = $51;
    $52 = ($51|0)==(-1);
    if ($52) {
     label = 24;
    } else {
     $53 = (_dup(2)|0);
     $13 = $53;
     $54 = ($53|0)==(-1);
     if ($54) {
      label = 24;
     } else {
      $55 = HEAP32[1423]|0;
      (_fflush($55)|0);
      $56 = HEAP32[1298]|0;
      (_fflush($56)|0);
      $57 = (_fork()|0);
      $10 = $57;
      switch ($57|0) {
      case -1:  {
       label = 24;
       break L15;
       break;
      }
      case 0:  {
       (_signal(2,(0|0))|0);
       (_signal(3,(0|0))|0);
       $58 = HEAP32[$8>>2]|0;
       (_close($58)|0);
       $59 = HEAP32[$7>>2]|0;
       _dup2c($59,0);
       $60 = ((($8)) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       _dup2c($61,1);
       (_close(2)|0);
       $62 = (_dup(1)|0);
       $10 = $62;
       $63 = HEAP32[1218]|0;
       (_execvp(($63|0),(4872|0))|0);
       __exit(1);
       // unreachable;
       break;
      }
      default: {
      }
      }
      $64 = HEAP32[$7>>2]|0;
      (_close($64)|0);
      $65 = ((($8)) + 4|0);
      $66 = HEAP32[$65>>2]|0;
      (_close($66)|0);
      $67 = ((($8)) + 4|0);
      HEAP32[$67>>2] = -1;
      HEAP32[$7>>2] = -1;
      $68 = $6;
      $69 = ($68|0)!=(0|0);
      $70 = HEAP32[$8>>2]|0;
      if ($69) {
       $71 = (___fdopen($70,13220)|0);
       $16 = $71;
       $72 = $16;
       $73 = ($72|0)==(0|0);
       if ($73) {
        label = 24;
        break;
       }
       $74 = $6;
       $75 = $16;
       (FUNCTION_TABLE_ii[$74 & 127]($75)|0);
       $76 = $16;
       (_fclose($76)|0);
      } else {
       (_close($70)|0);
      }
      HEAP32[$8>>2] = -1;
      $15 = 1;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 24) {
  $15 = 0;
 }
 $77 = HEAP32[$7>>2]|0;
 $78 = ($77|0)>=(0);
 if ($78) {
  $79 = HEAP32[$7>>2]|0;
  (_close($79)|0);
 }
 $80 = ((($7)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)>=(0);
 if ($82) {
  $83 = ((($7)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  (_close($84)|0);
 }
 $85 = HEAP32[$8>>2]|0;
 $86 = ($85|0)>=(0);
 if ($86) {
  $87 = HEAP32[$8>>2]|0;
  (_close($87)|0);
 }
 $88 = ((($8)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)>=(0);
 if ($90) {
  $91 = ((($8)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  (_close($92)|0);
 }
 $93 = $11;
 $94 = ($93|0)>(0);
 if ($94) {
  $95 = $11;
  _dup2c($95,0);
 }
 $96 = $12;
 $97 = ($96|0)>(0);
 if ($97) {
  $98 = $12;
  _dup2c($98,1);
 }
 $99 = $13;
 $100 = ($99|0)>(0);
 if ($100) {
  $101 = $13;
  _dup2c($101,2);
 }
 while(1) {
  $102 = (_wait(($17|0))|0);
  $14 = $102;
  $103 = ($102|0)!=(-1);
  if (!($103)) {
   break;
  }
  $104 = $14;
  $105 = $9;
  $106 = ($104|0)==($105|0);
  if (!($106)) {
   $107 = $14;
   $108 = $10;
   $109 = ($107|0)==($108|0);
   if (!($109)) {
    continue;
   }
  }
  $110 = HEAP32[$17>>2]|0;
  $111 = $110 & 127;
  $112 = ($111|0)!=(0);
  if (!($112)) {
   $113 = HEAP32[$17>>2]|0;
   $114 = $113 & 65280;
   $115 = $114 >> 8;
   $116 = ($115|0)!=(0);
   if (!($116)) {
    continue;
   }
  }
  $117 = $14;
  $118 = $10;
  $119 = ($117|0)==($118|0);
  if (!($119)) {
   $120 = HEAP32[$17>>2]|0;
   $121 = $120 & 127;
   $122 = ($121|0)!=(13);
   if (!($122)) {
    continue;
   }
  }
  $15 = 0;
 }
 $123 = $15;
 $3 = $123;
 $124 = $3;
 STACKTOP = sp;return ($124|0);
}
function _dup2c($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 (_close($5)|0);
 $6 = $2;
 $7 = (_dup($6)|0);
 $4 = $7;
 $8 = ($7|0)>=(0);
 if ($8) {
  $9 = $4;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if ($11) {
   $12 = $4;
   $13 = $3;
   _dup2c($12,$13);
  }
 }
 $14 = $2;
 (_close($14)|0);
 STACKTOP = sp;return;
}
function _fexpand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $10 = $4;
 $6 = $10;
 $5 = 13222;
 while(1) {
  $11 = $5;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $5;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (_strchr($15,$18)|0);
  $20 = ($19|0)!=(0|0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $5;
  $22 = ((($21)) + 1|0);
  $5 = $22;
 }
 if ((label|0) == 4) {
  $6 = 1;
 }
 $23 = $6;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $3;
  $2 = $25;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $26 = HEAP32[(4100)>>2]|0;
 $27 = ($26|0)==(0|0);
 $28 = $3;
 if ($27) {
  $2 = $28;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $7 = $28;
 $29 = HEAP32[1423]|0;
 (_fflush($29)|0);
 $30 = HEAP32[1298]|0;
 (_fflush($30)|0);
 HEAP32[(18160)>>2] = 0;
 HEAP32[(18156)>>2] = 0;
 $31 = $3;
 $32 = $4;
 $33 = ($32|0)!=(0);
 $34 = $33 ? 42 : 0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $34;
 (_lformat(18148,13232,$vararg_buffer)|0);
 HEAP32[(18176)>>2] = 0;
 HEAP32[(18172)>>2] = 0;
 $35 = (_flexgetstr(18148)|0);
 $36 = (_sys_pipe($35,0,73)|0);
 $37 = ($36|0)!=(0);
 do {
  if ($37) {
   $38 = HEAP32[(18172)>>2]|0;
   $39 = HEAP32[(18176)>>2]|0;
   $40 = ($38>>>0)>=($39>>>0);
   if (!($40)) {
    $41 = (_flexgetstr(18164)|0);
    $8 = $41;
    $42 = $3;
    $43 = (_strlen($42)|0);
    $9 = $43;
    $44 = $4;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $8;
     $47 = $3;
     $48 = $9;
     $49 = (_strncmp($46,$47,$48)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = $8;
      $52 = $9;
      $53 = (($51) + ($52)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($55|0)==(42);
      if ($56) {
       $7 = 19254;
       break;
      }
     }
    }
    $57 = $8;
    $7 = $57;
   }
  }
 } while(0);
 $58 = $7;
 $2 = $58;
 $59 = $2;
 STACKTOP = sp;return ($59|0);
}
function _readfunc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 while(1) {
  $4 = $2;
  $5 = (_getc($4)|0);
  $3 = $5;
  $6 = ($5|0)!=(-1);
  $7 = $3;
  $8 = ($7|0)!=(10);
  $9 = $6 ? $8 : 0;
  if (!($9)) {
   label = 5;
   break;
  }
  $10 = $3;
  $11 = (_flexaddch(18164,$10)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 5) {
  $1 = 1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 _tcap_scr_main($5,$6);
 _exit(0);
 // unreachable;
 return (0)|0;
}
function _startup_error($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4545]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  _sys_endv();
  HEAP32[4545] = 1;
 }
 $4 = $1;
 $5 = HEAP32[1298]|0;
 (_fputs($4,$5)|0);
 $6 = HEAP32[1298]|0;
 (_putc(10,$6)|0);
 STACKTOP = sp;return;
}
function _newscr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return (0|0);
}
function _closescr($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _clear_all($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _erase_display();
 STACKTOP = sp;return;
}
function _clear_line($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9>>>0)<($12>>>0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[4596]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  $17 = $5;
  _tty_goto($16,$17);
  _erase_line();
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = (($20) + ($21<<4)|0);
 $6 = $22;
 $23 = $6;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = ($25|0)<=($26|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $6;
 $29 = HEAP32[$28>>2]|0;
 $30 = $5;
 $31 = (($29) + ($30)|0);
 $7 = $31;
 $32 = $6;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $5;
 $36 = (($34) + ($35)|0);
 $8 = $36;
 while(1) {
  $37 = $7;
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $7;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)!=(32);
  if ($43) {
   label = 9;
  } else {
   $44 = $8;
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)!=(0);
   if ($47) {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $48 = $4;
   $49 = $5;
   _tty_goto($48,$49);
   _xyupdate();
   (_putchar(32)|0);
   $50 = HEAP32[4559]|0;
   $51 = (($50) + 1)|0;
   HEAP32[4559] = $51;
   $52 = HEAP32[4559]|0;
   $53 = HEAP32[4592]|0;
   $54 = ($52|0)==($53|0);
   if ($54) {
    _do_auto_margin_motion();
   }
   $55 = $7;
   HEAP8[$55>>0] = 32;
   $56 = $8;
   HEAP8[$56>>0] = 0;
  }
  $57 = $7;
  $58 = ((($57)) + 1|0);
  $7 = $58;
  $59 = $8;
  $60 = ((($59)) + 1|0);
  $8 = $60;
  $61 = $5;
  $62 = (($61) + 1)|0;
  $5 = $62;
 }
 STACKTOP = sp;return;
}
function _xygoto($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 _tty_goto($6,$7);
 STACKTOP = sp;return;
}
function _put_str($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 _tty_goto($8,$9);
 $10 = $7;
 _outstr($10);
 STACKTOP = sp;return;
}
function _put_char($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 _tty_goto($8,$9);
 $10 = $7;
 _outchar($10);
 STACKTOP = sp;return;
}
function _pset_colour($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[1248] = $4;
 STACKTOP = sp;return;
}
function _flushout($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _xyupdate();
 $2 = HEAP32[1423]|0;
 (_fflush($2)|0);
 STACKTOP = sp;return;
}
function _pbeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[(4500)>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = HEAP32[4595]|0;
 $5 = ($4|0)!=(0|0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  _xyupdate();
  $6 = HEAP32[4595]|0;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  (_tputs($6,$9,74)|0);
  HEAP32[4555] = 0;
  $10 = HEAP32[1423]|0;
  (_fflush($10)|0);
  STACKTOP = sp;return;
 } else {
  (_putchar(7)|0);
  $10 = HEAP32[1423]|0;
  (_fflush($10)|0);
  STACKTOP = sp;return;
 }
}
function _ins_str($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 _tty_goto($8,$9);
 while(1) {
  $10 = $7;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  _inschar($16);
  $17 = $7;
  $18 = ((($17)) + 1|0);
  $7 = $18;
 }
 STACKTOP = sp;return;
}
function _scroll($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_tcscroll($8,$9,$10,$11,1)|0);
 STACKTOP = sp;return ($12|0);
}
function _can_scroll($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_tcscroll($8,$9,$10,$11,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _tcscroll($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $16;
 $17 = $9;
 $18 = ($17|0)<(0);
 $19 = $9;
 L1: do {
  if ($18) {
   $20 = (0 - ($19))|0;
   $9 = $20;
   $21 = HEAP32[4546]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $10;
    $24 = ($23|0)!=(0);
    if (!($24)) {
     break;
    }
    $25 = $7;
    $26 = $8;
    $27 = $9;
    _scroll_down($25,$26,$27);
    break;
   }
   $28 = HEAP32[4547]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $8;
    $31 = $11;
    $32 = (($31) - 1)|0;
    $33 = ($30|0)==($32|0);
    if ($33) {
     $34 = $10;
     $35 = ($34|0)!=(0);
     if (!($35)) {
      break;
     }
     $12 = 0;
     while(1) {
      $36 = $12;
      $37 = $9;
      $38 = ($36|0)<($37|0);
      if (!($38)) {
       break L1;
      }
      $39 = $7;
      _tty_goto($39,0);
      _xyupdate();
      $40 = HEAP32[4547]|0;
      $41 = ($40|0)!=(0|0);
      if ($41) {
       $42 = HEAP32[4547]|0;
       $43 = $11;
       (_tputs($42,$43,74)|0);
      }
      $44 = $12;
      $45 = (($44) + 1)|0;
      $12 = $45;
     }
    }
   }
   $5 = 0;
   $79 = $5;
   STACKTOP = sp;return ($79|0);
  } else {
   $46 = ($19|0)>(0);
   if ($46) {
    $47 = HEAP32[4546]|0;
    $48 = ($47|0)!=(0);
    if ($48) {
     $49 = $10;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      break;
     }
     $51 = $7;
     $52 = $8;
     $53 = $9;
     _scroll_up($51,$52,$53);
     break;
    }
    $54 = $8;
    $55 = $11;
    $56 = (($55) - 1)|0;
    $57 = ($54|0)==($56|0);
    if (!($57)) {
     $5 = 0;
     $79 = $5;
     STACKTOP = sp;return ($79|0);
    }
    $58 = $7;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = $10;
     $61 = ($60|0)!=(0);
     if (!($61)) {
      break;
     }
     $62 = $8;
     _tty_goto($62,0);
     _xyupdate();
     $13 = 0;
     while(1) {
      $63 = $13;
      $64 = $9;
      $65 = ($63|0)<($64|0);
      if (!($65)) {
       break L1;
      }
      $66 = HEAP32[4548]|0;
      (_tputs($66,1,74)|0);
      $67 = $13;
      $68 = (($67) + 1)|0;
      $13 = $68;
     }
    }
    $69 = HEAP32[4549]|0;
    $70 = ($69|0)!=(0|0);
    if (!($70)) {
     $5 = 0;
     $79 = $5;
     STACKTOP = sp;return ($79|0);
    }
    $71 = $10;
    $72 = ($71|0)!=(0);
    if ($72) {
     $13 = 0;
     while(1) {
      $73 = $13;
      $74 = $9;
      $75 = ($73|0)<($74|0);
      if (!($75)) {
       break L1;
      }
      $76 = $7;
      _tty_goto($76,0);
      _delete_a_line();
      $77 = $13;
      $78 = (($77) + 1)|0;
      $13 = $78;
     }
    }
   }
  }
 } while(0);
 $5 = 1;
 $79 = $5;
 STACKTOP = sp;return ($79|0);
}
function _scroll_down($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = HEAP32[4558]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[4587]|0;
 $11 = ($10|0)==(0|0);
 $12 = HEAP32[4588]|0;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 & $13;
 $14 = HEAP32[4547]|0;
 $15 = ($14|0)==(0|0);
 $or$cond3 = $or$cond & $15;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = $4;
 _set_scroll_region($16,$17);
 $18 = HEAP32[4553]|0;
 $19 = $3;
 $20 = ($18|0)!=($19|0);
 if ($20) {
  $21 = $3;
  HEAP32[4553] = $21;
  HEAP32[4554] = 0;
 }
 _xyupdate();
 $22 = HEAP32[4587]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $5;
  $25 = ($24|0)>(1);
  $26 = HEAP32[4588]|0;
  $27 = ($26|0)==(0|0);
  $or$cond5 = $25 | $27;
  if ($or$cond5) {
   $28 = HEAP32[4587]|0;
   $29 = $5;
   $30 = $5;
   $31 = (_tgoto($28,$29,$30)|0);
   $32 = $4;
   $33 = $3;
   $34 = (($32) - ($33))|0;
   (_tputs($31,$34,74)|0);
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 L13: do {
  if ((label|0) == 8) {
   $35 = HEAP32[4588]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $6 = 0;
    while(1) {
     $37 = $6;
     $38 = $5;
     $39 = ($37|0)<($38|0);
     if (!($39)) {
      break L13;
     }
     $40 = HEAP32[4588]|0;
     $41 = $4;
     $42 = $3;
     $43 = (($41) - ($42))|0;
     (_tputs($40,$43,74)|0);
     $44 = $6;
     $45 = (($44) + 1)|0;
     $6 = $45;
    }
   } else {
    $7 = 0;
    while(1) {
     $46 = $7;
     $47 = $5;
     $48 = ($46|0)<($47|0);
     if (!($48)) {
      break L13;
     }
     $49 = HEAP32[4547]|0;
     $50 = $4;
     $51 = $3;
     $52 = (($50) - ($51))|0;
     (_tputs($49,$52,74)|0);
     $53 = $7;
     $54 = (($53) + 1)|0;
     $7 = $54;
    }
   }
  }
 } while(0);
 $55 = HEAP32[4550]|0;
 $56 = (($55) - 1)|0;
 _set_scroll_region(0,$56);
 HEAP32[4555] = 0;
 STACKTOP = sp;return;
}
function _tty_goto($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 HEAP32[4553] = $4;
 $5 = $3;
 HEAP32[4554] = $5;
 STACKTOP = sp;return;
}
function _xyupdate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = HEAP32[4554]|0;
 $5 = HEAP32[4559]|0;
 $6 = (($4) - ($5))|0;
 $0 = $6;
 $7 = HEAP32[4553]|0;
 $8 = HEAP32[4560]|0;
 $9 = (($7) - ($8))|0;
 $1 = $9;
 $10 = $0;
 $11 = ($10|0)==(0);
 $12 = $1;
 $13 = ($12|0)==(0);
 $or$cond = $11 & $13;
 $14 = HEAP32[4555]|0;
 $15 = ($14|0)!=(0);
 $or$cond3 = $or$cond & $15;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[4546]|0;
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $18 = HEAP32[4553]|0;
   $19 = HEAP32[4556]|0;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    $21 = HEAP32[4553]|0;
    $22 = HEAP32[4557]|0;
    $23 = ($21|0)>($22|0);
    if (!($23)) {
     break;
    }
   }
   $24 = HEAP32[4550]|0;
   $25 = (($24) - 1)|0;
   _set_scroll_region(0,$25);
  }
 } while(0);
 $26 = (_cm_absolute(0)|0);
 $2 = $26;
 $27 = (_cm_relative(0)|0);
 $3 = $27;
 $28 = HEAP32[4561]|0;
 $29 = ($28|0)!=(0);
 do {
  if (!($29)) {
   $30 = HEAP32[4555]|0;
   $31 = ($30|0)!=(0);
   $32 = $1;
   $33 = ($32|0)==(0);
   $or$cond5 = $31 & $33;
   $34 = $0;
   $35 = ($34|0)>(0);
   $or$cond7 = $or$cond5 & $35;
   if ($or$cond7) {
    $36 = $3;
    $37 = $2;
    $38 = ($36|0)<($37|0);
    if ($38) {
     break;
    }
   }
   _do_set_colour(0);
  }
 } while(0);
 $39 = $3;
 $40 = $2;
 $41 = ($39|0)<($40|0);
 if ($41) {
  (_cm_relative(1)|0);
 } else {
  (_cm_absolute(1)|0);
 }
 HEAP32[4555] = 1;
 STACKTOP = sp;return;
}
function _scroll_up($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = HEAP32[4546]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = $4;
 _set_scroll_region($11,$12);
 $13 = HEAP32[4551]|0;
 $14 = ($13|0)==(0|0);
 $15 = HEAP32[4552]|0;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 & $16;
 $17 = HEAP32[4549]|0;
 $18 = ($17|0)!=(0|0);
 $or$cond3 = $or$cond & $18;
 $19 = HEAP32[4553]|0;
 if ($or$cond3) {
  $20 = $3;
  $21 = ($19|0)!=($20|0);
  if ($21) {
   $22 = $3;
   HEAP32[4553] = $22;
   HEAP32[4554] = 0;
  }
 } else {
  $23 = $4;
  $24 = ($19|0)!=($23|0);
  if ($24) {
   $25 = $4;
   HEAP32[4553] = $25;
   HEAP32[4554] = 0;
  }
 }
 _xyupdate();
 $26 = HEAP32[4551]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $5;
  $29 = ($28|0)>(1);
  $30 = HEAP32[4552]|0;
  $31 = ($30|0)==(0|0);
  $or$cond5 = $29 | $31;
  if ($or$cond5) {
   $32 = HEAP32[4551]|0;
   $33 = $5;
   $34 = $5;
   $35 = (_tgoto($32,$33,$34)|0);
   $36 = $4;
   $37 = $3;
   $38 = (($36) - ($37))|0;
   (_tputs($35,$38,74)|0);
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 L13: do {
  if ((label|0) == 10) {
   $39 = HEAP32[4552]|0;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $6 = 0;
    while(1) {
     $41 = $6;
     $42 = $5;
     $43 = ($41|0)<($42|0);
     if (!($43)) {
      break L13;
     }
     $44 = HEAP32[4552]|0;
     $45 = $4;
     $46 = $3;
     $47 = (($45) - ($46))|0;
     (_tputs($44,$47,74)|0);
     $48 = $6;
     $49 = (($48) + 1)|0;
     $6 = $49;
    }
   }
   $50 = HEAP32[4549]|0;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $7 = 0;
    while(1) {
     $52 = $7;
     $53 = $5;
     $54 = ($52|0)<($53|0);
     if (!($54)) {
      break L13;
     }
     $55 = HEAP32[4549]|0;
     $56 = $4;
     $57 = $3;
     $58 = (($56) - ($57))|0;
     (_tputs($55,$58,74)|0);
     $59 = $7;
     $60 = (($59) + 1)|0;
     $7 = $60;
    }
   } else {
    $8 = 0;
    while(1) {
     $61 = $8;
     $62 = $5;
     $63 = ($61|0)<($62|0);
     if (!($63)) {
      break L13;
     }
     $64 = HEAP32[4548]|0;
     (_tputs($64,1,74)|0);
     $65 = $8;
     $66 = (($65) + 1)|0;
     $8 = $66;
    }
   }
  }
 } while(0);
 $67 = HEAP32[4550]|0;
 $68 = (($67) - 1)|0;
 _set_scroll_region(0,$68);
 HEAP32[4555] = 0;
 STACKTOP = sp;return;
}
function _delete_a_line() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _xyupdate();
 $0 = HEAP32[4549]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[4549]|0;
 $3 = HEAP32[4550]|0;
 (_tputs($2,$3,74)|0);
 return;
}
function _set_scroll_region($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[4556]|0;
 $6 = ($4|0)!=($5|0);
 if (!($6)) {
  $7 = $3;
  $8 = HEAP32[4557]|0;
  $9 = ($7|0)!=($8|0);
  if (!($9)) {
   STACKTOP = sp;return;
  }
 }
 $10 = HEAP32[4558]|0;
 $11 = $3;
 $12 = $2;
 $13 = (_tgoto($10,$11,$12)|0);
 $14 = $3;
 $15 = $2;
 $16 = (($14) - ($15))|0;
 (_tputs($13,$16,74)|0);
 $17 = $2;
 HEAP32[4556] = $17;
 $18 = $3;
 HEAP32[4557] = $18;
 HEAP32[4555] = 0;
 STACKTOP = sp;return;
}
function _cm_absolute($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = HEAP32[4583]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  HEAP32[4584] = 0;
  $8 = $2;
  $9 = ($8|0)!=(0);
  $10 = HEAP32[4583]|0;
  $11 = HEAP32[4554]|0;
  $12 = HEAP32[4553]|0;
  $13 = (_tgoto($10,$11,$12)|0);
  if ($9) {
   $14 = HEAP32[4550]|0;
   $15 = $2;
   $16 = ($15|0)!=(0);
   $17 = $16 ? 74 : 75;
   (_tputs($13,$14,$17)|0);
  } else {
   $18 = (_strlen($13)|0);
   $19 = HEAP32[4584]|0;
   $20 = (($19) + ($18))|0;
   HEAP32[4584] = $20;
  }
  $21 = $2;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = HEAP32[4553]|0;
   HEAP32[4560] = $23;
   $24 = HEAP32[4554]|0;
   HEAP32[4559] = $24;
  }
  $25 = HEAP32[4584]|0;
  $1 = $25;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $26 = HEAP32[4585]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $1 = 1024;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $28 = HEAP32[4586]|0;
 $3 = $28;
 $29 = HEAP32[4559]|0;
 $4 = $29;
 $30 = HEAP32[4560]|0;
 $5 = $30;
 $31 = $2;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = HEAP32[4585]|0;
  (_tputs($33,1,74)|0);
 }
 HEAP32[4560] = 0;
 HEAP32[4559] = 0;
 $34 = $2;
 $35 = (_cm_relative($34)|0);
 $36 = $3;
 $37 = (($36) + ($35))|0;
 $3 = $37;
 $38 = $2;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $40 = $4;
  HEAP32[4559] = $40;
  $41 = $5;
  HEAP32[4560] = $41;
 }
 $42 = $3;
 $1 = $42;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function _cm_relative($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4555]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $2;
  $7 = (_cm_v_only($6)|0);
  $3 = $7;
  $8 = $2;
  $9 = (_cm_h_only($8)|0);
  $10 = $3;
  $11 = (($10) + ($9))|0;
  $3 = $11;
  $12 = $3;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = 1024;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _do_set_colour($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[1247]|0;
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[4562]|0;
 $7 = ($5|0)<($6|0);
 $8 = $1;
 L4: do {
  if ($7) {
   $9 = (18252 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   (_tputs($10,1,74)|0);
  } else {
   $11 = ($8|0)==(1);
   if ($11) {
    $1 = 0;
   }
   $12 = $1;
   $13 = HEAP32[1247]|0;
   $14 = ($12|0)==($13|0);
   if ($14) {
    STACKTOP = sp;return;
   }
   $15 = $1;
   switch ($15|0) {
   case 0:  {
    $16 = HEAP32[4573]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     break L4;
    }
    $18 = HEAP32[4573]|0;
    (_tputs($18,1,74)|0);
    break L4;
    break;
   }
   case 4:  {
    $19 = HEAP32[4574]|0;
    $20 = ($19|0)!=(0|0);
    if ($20) {
     $21 = HEAP32[4574]|0;
     (_tputs($21,1,74)|0);
     break L4;
    }
    break;
   }
   default: {
   }
   }
   $22 = HEAP32[4575]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = HEAP32[4575]|0;
    (_tputs($24,1,74)|0);
   }
  }
 } while(0);
 $25 = $1;
 HEAP32[1247] = $25;
 STACKTOP = sp;return;
}
function _cm_v_only($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[4560]|0;
 $6 = HEAP32[4553]|0;
 $7 = ($5|0)==($6|0);
 if ($7) {
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $8 = HEAP32[4560]|0;
 $9 = HEAP32[4553]|0;
 $10 = ($8|0)>($9|0);
 $11 = HEAP32[4580]|0;
 $12 = ($11|0)!=(0|0);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = HEAP32[4581]|0;
  $14 = HEAP32[4560]|0;
  $15 = HEAP32[4553]|0;
  $16 = (($14) - ($15))|0;
  $17 = Math_imul($13, $16)|0;
  $3 = $17;
  $18 = $2;
  $19 = ($18|0)!=(0);
  L7: do {
   if ($19) {
    while(1) {
     $20 = HEAP32[4553]|0;
     $21 = HEAP32[4560]|0;
     $22 = ($20|0)<($21|0);
     if (!($22)) {
      break L7;
     }
     $23 = HEAP32[4580]|0;
     (_tputs($23,1,74)|0);
     $24 = HEAP32[4560]|0;
     $25 = (($24) + -1)|0;
     HEAP32[4560] = $25;
    }
   }
  } while(0);
  $26 = $3;
  $1 = $26;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $27 = HEAP32[4553]|0;
 $28 = HEAP32[4560]|0;
 $29 = ($27|0)>($28|0);
 $30 = HEAP32[4548]|0;
 $31 = ($30|0)!=(0|0);
 $or$cond3 = $29 & $31;
 if (!($or$cond3)) {
  $1 = 1024;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $32 = HEAP32[4553]|0;
 $33 = HEAP32[4560]|0;
 $34 = (($32) - ($33))|0;
 $35 = HEAP32[4582]|0;
 $36 = Math_imul($34, $35)|0;
 $4 = $36;
 $37 = $2;
 $38 = ($37|0)!=(0);
 L18: do {
  if ($38) {
   while(1) {
    $39 = HEAP32[4553]|0;
    $40 = HEAP32[4560]|0;
    $41 = ($39|0)>($40|0);
    if (!($41)) {
     break L18;
    }
    $42 = HEAP32[4548]|0;
    (_tputs($42,1,74)|0);
    $43 = HEAP32[4560]|0;
    $44 = (($43) + 1)|0;
    HEAP32[4560] = $44;
   }
  }
 } while(0);
 $45 = $4;
 $1 = $45;
 $46 = $1;
 STACKTOP = sp;return ($46|0);
}
function _cm_h_only($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[4559]|0;
 $6 = HEAP32[4554]|0;
 $7 = ($5|0)==($6|0);
 if ($7) {
  $1 = 0;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $8 = HEAP32[4559]|0;
 $9 = HEAP32[4554]|0;
 $10 = ($8|0)>($9|0);
 if ($10) {
  $3 = 1024;
  $4 = 1024;
  $11 = HEAP32[4576]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = HEAP32[4577]|0;
   $14 = HEAP32[4554]|0;
   $15 = (($13) + ($14))|0;
   $3 = $15;
  }
  $16 = HEAP32[4578]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = HEAP32[4579]|0;
   $19 = HEAP32[4559]|0;
   $20 = HEAP32[4554]|0;
   $21 = (($19) - ($20))|0;
   $22 = Math_imul($18, $21)|0;
   $4 = $22;
  }
  $23 = $3;
  $24 = $4;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = $2;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = HEAP32[4576]|0;
    (_tputs($28,1,74)|0);
    HEAP32[4559] = 0;
    $29 = (_cm_right_by_redraw(1)|0);
    $1 = $29;
    $47 = $1;
    STACKTOP = sp;return ($47|0);
   } else {
    $30 = $3;
    $1 = $30;
    $47 = $1;
    STACKTOP = sp;return ($47|0);
   }
  }
  $31 = $4;
  $32 = ($31|0)!=(1024);
  if ($32) {
   $33 = $2;
   $34 = ($33|0)!=(0);
   L22: do {
    if ($34) {
     while(1) {
      $35 = HEAP32[4554]|0;
      $36 = HEAP32[4559]|0;
      $37 = ($35|0)<($36|0);
      if (!($37)) {
       break L22;
      }
      $38 = HEAP32[4578]|0;
      (_tputs($38,1,74)|0);
      $39 = HEAP32[4559]|0;
      $40 = (($39) + -1)|0;
      HEAP32[4559] = $40;
     }
    }
   } while(0);
   $41 = $4;
   $1 = $41;
   $47 = $1;
   STACKTOP = sp;return ($47|0);
  }
 }
 $42 = HEAP32[4554]|0;
 $43 = HEAP32[4559]|0;
 $44 = ($42|0)>($43|0);
 if ($44) {
  $45 = $2;
  $46 = (_cm_right_by_redraw($45)|0);
  $1 = $46;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 } else {
  $1 = 1024;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _cm_right_by_redraw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = HEAP32[4554]|0;
 $9 = HEAP32[4559]|0;
 $10 = (($8) - ($9))|0;
 $2 = $10;
 $11 = $1;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $53 = $2;
  STACKTOP = sp;return ($53|0);
 }
 $13 = HEAP32[4327]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $3 = $15;
 $16 = $3;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[4560]|0;
 $20 = (($18) + ($19<<4)|0);
 $4 = $20;
 $21 = $3;
 $22 = ((($21)) + 24|0);
 $5 = $22;
 while(1) {
  $23 = HEAP32[4559]|0;
  $24 = HEAP32[4554]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[4559]|0;
  $27 = $4;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)>=($29|0);
  if ($30) {
   $6 = 0;
   $7 = 32;
  } else {
   $31 = $5;
   $32 = $4;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[4559]|0;
   $36 = (($34) + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = (($31) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40&255;
   $6 = $41;
   $42 = $4;
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[4559]|0;
   $45 = (($43) + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $7 = $46;
  }
  $47 = $6;
  $48 = $47&255;
  _do_set_colour($48);
  $49 = $7;
  $50 = $49 << 24 >> 24;
  (_putchar($50)|0);
  $51 = HEAP32[4559]|0;
  $52 = (($51) + 1)|0;
  HEAP32[4559] = $52;
 }
 $53 = $2;
 STACKTOP = sp;return ($53|0);
}
function _inc_cost($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[4584]|0;
 $3 = (($2) + 1)|0;
 HEAP32[4584] = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _inschar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&255;
 $1 = $2;
 _xyupdate();
 $3 = HEAP32[4589]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[4589]|0;
  $6 = HEAP32[4550]|0;
  (_tputs($5,$6,74)|0);
  $7 = $1;
  $8 = $7 << 24 >> 24;
  _outchar($8);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[4590]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[4590]|0;
 $12 = HEAP32[4550]|0;
 (_tputs($11,$12,74)|0);
 $13 = $1;
 $14 = $13 << 24 >> 24;
 _outchar($14);
 $15 = HEAP32[4591]|0;
 $16 = HEAP32[4550]|0;
 (_tputs($15,$16,74)|0);
 STACKTOP = sp;return;
}
function _outchar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _xyupdate();
 $2 = HEAP32[1248]|0;
 _do_set_colour($2);
 $3 = HEAP32[4559]|0;
 $4 = (($3) + 1)|0;
 HEAP32[4559] = $4;
 $5 = HEAP32[4554]|0;
 $6 = (($5) + 1)|0;
 HEAP32[4554] = $6;
 $7 = $1;
 (_putchar($7)|0);
 $8 = HEAP32[4559]|0;
 $9 = HEAP32[4592]|0;
 $10 = ($8>>>0)>=($9>>>0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 _do_auto_margin_motion();
 STACKTOP = sp;return;
}
function _do_auto_margin_motion() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4593]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $6 = HEAP32[4559]|0;
  $7 = (($6) + -1)|0;
  HEAP32[4559] = $7;
  return;
 }
 $2 = HEAP32[4594]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  HEAP32[4555] = 0;
  return;
 } else {
  HEAP32[4559] = 0;
  $4 = HEAP32[4560]|0;
  $5 = (($4) + 1)|0;
  HEAP32[4560] = $5;
  return;
 }
}
function _outstr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _xyupdate();
 $2 = HEAP32[1248]|0;
 _do_set_colour($2);
 while(1) {
  $3 = $1;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  $7 = HEAP32[4559]|0;
  if (!($6)) {
   break;
  }
  $8 = (($7) + 1)|0;
  HEAP32[4559] = $8;
  $9 = HEAP32[4554]|0;
  $10 = (($9) + 1)|0;
  HEAP32[4554] = $10;
  $11 = $1;
  $12 = ((($11)) + 1|0);
  $1 = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13 << 24 >> 24;
  (_putchar($14)|0);
 }
 $15 = HEAP32[4592]|0;
 $16 = ($7>>>0)>=($15>>>0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 _do_auto_margin_motion();
 STACKTOP = sp;return;
}
function _erase_line() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _xyupdate();
 $0 = HEAP32[4596]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[4596]|0;
  $3 = HEAP32[4550]|0;
  (_tputs($2,$3,74)|0);
  return;
 }
 while(1) {
  $4 = HEAP32[4559]|0;
  $5 = HEAP32[4592]|0;
  $6 = (($5) - 1)|0;
  $7 = ($4>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  (_putchar(32)|0);
  $8 = HEAP32[4559]|0;
  $9 = (($8) + 1)|0;
  HEAP32[4559] = $9;
 }
 return;
}
function _erase_display() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4555] = 0;
 HEAP32[1247] = -1;
 $0 = HEAP32[4597]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[4597]|0;
  $3 = HEAP32[4550]|0;
  (_tputs($2,$3,74)|0);
 }
 $4 = HEAP32[1423]|0;
 (_fflush($4)|0);
 return;
}
function _tcap_scr_main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[(18400)>>2] = 0;
 $6 = _emscripten_asm_const_ii(10, 0)|0;
 $4 = 4888;
 _sys_init();
 $7 = HEAP32[4589]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[4590]|0;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 | $10;
 if (!($or$cond)) {
  $11 = $4;
  $12 = ((($11)) + 88|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = HEAP32[4550]|0;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[4592]|0;
 $17 = $4;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = $16;
 _catch_signals();
 $19 = $4;
 $20 = $2;
 $21 = $3;
 $22 = (_getenv((13277|0))|0);
 $23 = (_xvi_startup($19,$20,$21,$22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  _sys_endv();
  _exit(1);
  // unreachable;
 } else {
  (_signal(28,(76|0))|0);
  $25 = $4;
  _flushout($25);
  $26 = $4;
  $27 = ((($5)) + 4|0);
  HEAP32[$27>>2] = $26;
  $28 = _emscripten_asm_const_ii(11, 0)|0;
  $29 = $4;
  HEAP32[4599] = $29;
  ;HEAP32[(18404)>>2]=HEAP32[$5>>2]|0;HEAP32[(18404)+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[(18404)+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[(18404)+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[(18404)+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[(18404)+20>>2]=HEAP32[$5+20>>2]|0;
  _jsvim_main_loop();
  STACKTOP = sp;return;
 }
}
function _win_sig_handler($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 (_signal(28,(76|0))|0);
 HEAP32[4502] = 1;
 STACKTOP = sp;return;
}
function _jsvim_main_loop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 24|0;
 $4 = sp + 4|0;
 $5 = sp;
 ;HEAP32[$0>>2]=HEAP32[(18404)>>2]|0;HEAP32[$0+4>>2]=HEAP32[(18404)+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[(18404)+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[(18404)+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[(18404)+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[(18404)+20>>2]|0;
 $6 = HEAP32[4599]|0;
 $1 = $6;
 $7 = HEAP32[(18400)>>2]|0;
 $8 = (_inch($7)|0);
 $3 = $8;
 $9 = $3;
 $10 = ($9|0)==(-1);
 do {
  if ($10) {
   $11 = HEAP8[19093]|0;
   $12 = ($11<<24>>24)!=(0);
   if ($12) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $13 = HEAP8[19092]|0;
   $14 = ($13<<24>>24)!=(0);
   if ($14) {
    HEAP32[$0>>2] = 9;
    HEAP8[19092] = 0;
    break;
   }
   $15 = HEAP8[19090]|0;
   $16 = ($15<<24>>24)!=(0);
   if ($16) {
    HEAP32[$0>>2] = 8;
    HEAP8[19090] = 0;
    break;
   }
   $17 = HEAP8[19091]|0;
   $18 = ($17<<24>>24)!=(0);
   if ($18) {
    HEAP32[$0>>2] = 10;
    HEAP8[19091] = 0;
    break;
   }
   $19 = HEAP32[4502]|0;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   HEAP32[4502] = 0;
   _getScreenSize($4,$5);
   $21 = HEAP32[$4>>2]|0;
   $22 = ($21|0)!=(0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ($23|0)!=(0);
   $or$cond = $22 & $24;
   if ($or$cond) {
    $25 = HEAP32[$4>>2]|0;
    $26 = HEAP32[$5>>2]|0;
    $27 = _emscripten_asm_const_iii(12, ($25|0), ($26|0))|0;
    HEAP32[$0>>2] = 3;
    $28 = HEAP32[$4>>2]|0;
    $29 = $1;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($28) - ($31))|0;
    $33 = ((($0)) + 8|0);
    HEAP32[$33>>2] = $32;
    $34 = HEAP32[$5>>2]|0;
    $35 = $1;
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($34) - ($37))|0;
    $39 = ((($0)) + 8|0);
    $40 = ((($39)) + 4|0);
    HEAP32[$40>>2] = $38;
    $41 = HEAP32[$4>>2]|0;
    HEAP32[4550] = $41;
    $42 = $1;
    $43 = ((($42)) + 4|0);
    HEAP32[$43>>2] = $41;
    $44 = HEAP32[$5>>2]|0;
    HEAP32[4592] = $44;
    $45 = $1;
    $46 = ((($45)) + 8|0);
    HEAP32[$46>>2] = $44;
    break;
   }
   $47 = $1;
   _pbeep($47);
   STACKTOP = sp;return;
  } else {
   HEAP32[$0>>2] = 0;
   $48 = $3;
   $49 = ((($0)) + 8|0);
   HEAP32[$49>>2] = $48;
  }
 } while(0);
 $50 = (_xvi_handle_event($0)|0);
 $2 = $50;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(1);
 if ($53) {
  $54 = $2;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  _sys_exit($56);
 }
 $57 = $2;
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[(18400)>>2] = $59;
 STACKTOP = sp;return;
}
function _tty_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4144|0);
 $4 = sp + 48|0;
 $6 = sp + 28|0;
 $12 = sp + 44|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$6>>2] = 19255;
 $15 = (_getenv((13354|0))|0);
 $5 = $15;
 $16 = $5;
 $17 = ($16|0)==(0|0);
 if ($17) {
  label = 3;
 } else {
  $18 = $5;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $5 = 13359;
 }
 $22 = $5;
 $23 = _emscripten_asm_const_ii(13, ($22|0))|0;
 $24 = $5;
 $25 = (_tgetent($4,$24)|0);
 switch ($25|0) {
 case -1:  {
  _fail(13412);
  label = 6;
  break;
 }
 case 0:  {
  label = 6;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 6) {
  _fail(13432);
 }
 $26 = (_tgetflag(13479)|0);
 HEAP32[4593] = $26;
 $27 = (_tgetflag(13482)|0);
 HEAP32[4594] = $27;
 $28 = (_tgetflag(13485)|0);
 HEAP32[4561] = $28;
 $29 = (_tgetnum(13488)|0);
 $9 = $29;
 $30 = $9;
 $31 = ($30|0)>(0);
 if ($31) {
  _fail(13491);
 }
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = (_tgetnum(13547)|0);
  $10 = $35;
  $36 = $10;
  $37 = ($36|0)<=(0);
  if ($37) {
   _fail(13550);
  }
  $38 = $10;
  HEAP32[4592] = $38;
  $39 = $3;
  HEAP32[$39>>2] = $38;
 } else {
  $40 = $3;
  $41 = HEAP32[$40>>2]|0;
  HEAP32[4592] = $41;
 }
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = (_tgetnum(13595)|0);
  $11 = $45;
  $46 = $11;
  $47 = ($46|0)<=(0);
  if ($47) {
   _fail(13598);
  }
  $48 = $11;
  HEAP32[4550] = $48;
  $49 = $2;
  HEAP32[$49>>2] = $48;
 } else {
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  HEAP32[4550] = $51;
 }
 $52 = (_tgetstr(13643,$6)|0);
 $7 = $52;
 $53 = $7;
 $54 = ($53|0)!=(0|0);
 if ($54) {
 }
 $55 = (_tgetstr(13646,$6)|0);
 HEAP32[1249] = $55;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = HEAP32[1249]|0;
  $$sink14 = $57;
  label = 26;
 } else {
  $58 = (_tgetflag(13649)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $$sink14 = 13652;
   label = 26;
  } else {
   $60 = (_tgetstr(13654,$6)|0);
   $7 = $60;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $7;
    $$sink14 = $62;
    label = 26;
   }
  }
 }
 if ((label|0) == 26) {
  HEAP32[4578] = $$sink14;
 }
 $63 = (_tgetstr(13657,$6)|0);
 HEAP32[4598] = $63;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = HEAP32[4598]|0;
  HEAP32[4580] = $65;
 }
 $66 = (_tgetstr(13660,$6)|0);
 HEAP32[4548] = $66;
 $67 = (_tgetstr(13663,$6)|0);
 HEAP32[4576] = $67;
 $68 = (_tgetstr(13666,$6)|0);
 HEAP32[4607] = $68;
 $69 = (_tgetstr(13669,$6)|0);
 HEAP32[4608] = $69;
 $70 = (_tgetstr(13672,$6)|0);
 HEAP32[4609] = $70;
 $71 = (_tgetstr(13675,$6)|0);
 HEAP32[4610] = $71;
 $72 = (_tgetstr(13678,$6)|0);
 HEAP32[4611] = $72;
 $73 = (_tgetstr(13681,$6)|0);
 HEAP32[4612] = $73;
 $74 = (_tgetstr(13684,$6)|0);
 HEAP32[4613] = $74;
 $75 = (_tgetstr(13687,$6)|0);
 HEAP32[4596] = $75;
 $76 = (_tgetstr(13690,$6)|0);
 HEAP32[4597] = $76;
 $77 = (_tgetstr(13693,$6)|0);
 HEAP32[4547] = $77;
 $78 = (_tgetstr(13696,$6)|0);
 HEAP32[4549] = $78;
 $79 = (_tgetstr(13699,$6)|0);
 HEAP32[4589] = $79;
 $80 = (_tgetstr(13702,$6)|0);
 HEAP32[4590] = $80;
 $81 = (_tgetstr(13705,$6)|0);
 HEAP32[4591] = $81;
 $82 = (_tgetstr(13708,$6)|0);
 HEAP32[4583] = $82;
 $83 = (_tgetstr(13711,$6)|0);
 HEAP32[4585] = $83;
 $84 = (_tgetstr(13714,$6)|0);
 HEAP32[4558] = $84;
 $85 = (_tgetstr(13717,$6)|0);
 HEAP32[4552] = $85;
 $86 = (_tgetstr(13720,$6)|0);
 HEAP32[4588] = $86;
 $87 = (_tgetstr(13723,$6)|0);
 HEAP32[4551] = $87;
 $88 = (_tgetstr(13726,$6)|0);
 HEAP32[4587] = $88;
 $89 = (_tgetstr(13729,$6)|0);
 HEAP32[4595] = $89;
 $90 = (_tgetstr(13732,$6)|0);
 HEAP32[4575] = $90;
 $91 = (_tgetstr(13735,$6)|0);
 HEAP32[4574] = $91;
 $92 = (_tgetstr(13738,$6)|0);
 HEAP32[4573] = $92;
 $93 = HEAP32[4575]|0;
 $94 = ($93|0)==(0|0);
 $95 = HEAP32[4574]|0;
 $96 = ($95|0)==(0|0);
 $or$cond = $94 | $96;
 $97 = HEAP32[4573]|0;
 $98 = ($97|0)==(0|0);
 $or$cond3 = $or$cond | $98;
 if ($or$cond3) {
  HEAP32[4574] = 0;
  $99 = (_tgetstr(13741,$6)|0);
  HEAP32[4575] = $99;
  $100 = (_tgetstr(13744,$6)|0);
  HEAP32[4573] = $100;
  $$sink = 0;
 } else {
  $$sink = 0;
 }
 while(1) {
  HEAP32[4562] = $$sink;
  $101 = HEAP32[4562]|0;
  $102 = ($101|0)<(10);
  if (!($102)) {
   break;
  }
  HEAP8[$12>>0] = 99;
  $103 = HEAP32[4562]|0;
  $104 = (($103) + 48)|0;
  $105 = $104&255;
  $106 = ((($12)) + 1|0);
  HEAP8[$106>>0] = $105;
  $107 = ((($12)) + 2|0);
  HEAP8[$107>>0] = 0;
  $108 = (_tgetstr($12,$6)|0);
  $13 = $108;
  $109 = $13;
  $110 = ($109|0)==(0|0);
  if ($110) {
   break;
  }
  $111 = $13;
  $112 = HEAP32[4562]|0;
  $113 = (18252 + ($112<<2)|0);
  HEAP32[$113>>2] = $111;
  $114 = HEAP32[4562]|0;
  $115 = (($114) + 1)|0;
  $$sink = $115;
 }
 $116 = HEAP32[4583]|0;
 $117 = ($116|0)==(0|0);
 $118 = HEAP32[4585]|0;
 $119 = ($118|0)==(0|0);
 $or$cond5 = $117 & $119;
 if ($or$cond5) {
  _fail(13747);
 }
 $120 = HEAP32[4585]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = HEAP32[4585]|0;
  $123 = (_strlen($122)|0);
  $124 = $123;
 } else {
  $124 = 1024;
 }
 HEAP32[4586] = $124;
 $125 = HEAP32[4576]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = HEAP32[4576]|0;
  $128 = (_strlen($127)|0);
  $129 = $128;
 } else {
  $129 = 1024;
 }
 HEAP32[4577] = $129;
 $130 = HEAP32[4548]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = HEAP32[4548]|0;
  $133 = (_strlen($132)|0);
  $134 = $133;
 } else {
  $134 = 1024;
 }
 HEAP32[4582] = $134;
 $135 = HEAP32[4578]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = HEAP32[4578]|0;
  $138 = (_strlen($137)|0);
  $139 = $138;
 } else {
  $139 = 1024;
 }
 HEAP32[4579] = $139;
 $140 = HEAP32[4580]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = HEAP32[4580]|0;
  $143 = (_strlen($142)|0);
  $144 = $143;
 } else {
  $144 = 1024;
 }
 HEAP32[4581] = $144;
 $145 = HEAP32[4558]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = HEAP32[4551]|0;
  $148 = ($147|0)!=(0|0);
  $149 = HEAP32[4552]|0;
  $150 = ($149|0)!=(0|0);
  $or$cond7 = $148 | $150;
  $151 = HEAP32[4549]|0;
  $152 = ($151|0)!=(0|0);
  $or$cond9 = $or$cond7 | $152;
  $153 = HEAP32[4548]|0;
  $154 = ($153|0)!=(0|0);
  $or$cond11 = $or$cond9 | $154;
  if ($or$cond11) {
   $155 = HEAP32[4587]|0;
   $156 = ($155|0)!=(0|0);
   $157 = HEAP32[4588]|0;
   $158 = ($157|0)!=(0|0);
   $or$cond13 = $156 | $158;
   if ($or$cond13) {
    $162 = 1;
   } else {
    $159 = HEAP32[4547]|0;
    $160 = ($159|0)!=(0|0);
    $162 = $160;
   }
  } else {
   $162 = 0;
  }
 } else {
  $162 = 0;
 }
 $161 = $162&1;
 HEAP32[4546] = $161;
 $8 = 0;
 while(1) {
  $163 = $8;
  $164 = (5000 + ($163<<3)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ($165|0)!=(0|0);
  if (!($166)) {
   break;
  }
  $167 = $8;
  $168 = (5000 + ($167<<3)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (_tgetstr($169,$6)|0);
  $14 = $170;
  $171 = $14;
  $172 = ($171|0)!=(0|0);
  if ($172) {
   $173 = $14;
   $174 = $8;
   $175 = (5000 + ($174<<3)|0);
   $176 = ((($175)) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   _xvi_keymap($173,$177);
  }
  $178 = $8;
  $179 = (($178) + 1)|0;
  $8 = $179;
 }
 $180 = $5;
 $181 = _emscripten_asm_const_ii(14, ($180|0))|0;
 STACKTOP = sp;return;
}
function _fail($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _sys_endv();
 $2 = $1;
 $3 = HEAP32[1298]|0;
 (_fputs($2,$3)|0);
 $4 = HEAP32[1298]|0;
 (_putc(10,$4)|0);
 _exit(2);
 // unreachable;
}
function _tty_startv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4614]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[4612]|0;
  $3 = ($2|0)!=(0|0);
  if ($3) {
   $4 = HEAP32[4612]|0;
   $5 = HEAP32[4550]|0;
   (_tputs($4,$5,74)|0);
  }
  $6 = HEAP32[4610]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = HEAP32[4610]|0;
   $9 = HEAP32[4550]|0;
   (_tputs($8,$9,74)|0);
  }
  $10 = HEAP32[4608]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = HEAP32[4608]|0;
   $13 = HEAP32[4550]|0;
   (_tputs($12,$13,74)|0);
  }
 }
 HEAP32[1247] = -1;
 _pset_colour(4888,0);
 HEAP32[4555] = 0;
 HEAP32[4614] = 1;
 return;
}
function _tty_endv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4614]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  return;
 }
 _do_set_colour(0);
 $2 = HEAP32[4546]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[4550]|0;
  $5 = (($4) - 1)|0;
  _set_scroll_region(0,$5);
 }
 $6 = HEAP32[4609]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[4609]|0;
  $9 = HEAP32[4550]|0;
  (_tputs($8,$9,74)|0);
 }
 $10 = HEAP32[4611]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[4611]|0;
  $13 = HEAP32[4550]|0;
  (_tputs($12,$13,74)|0);
 }
 $14 = HEAP32[4613]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[4613]|0;
  $17 = HEAP32[4550]|0;
  (_tputs($16,$17,74)|0);
 }
 _flushout(4888);
 HEAP32[4614] = 0;
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4615]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18500 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[4615] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(18468)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (18500 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[4615] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(18480)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (18500 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[4615] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(18468)>>2] = $76;
     HEAP32[(18480)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(18464)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (18764 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (18764 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(18464)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(18480)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (18500 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[4615] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(18468)>>2] = $$0173$lcssa$i;
       HEAP32[(18480)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(18464)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (18764 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (18764 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(18468)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (18764 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(18464)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (18500 + ($383<<2)|0);
          $385 = HEAP32[4615]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[4615] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (18764 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(18464)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(18468)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(18480)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(18480)>>2] = $462;
   HEAP32[(18468)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(18468)>>2] = 0;
   HEAP32[(18480)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(18472)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(18472)>>2] = $477;
  $478 = HEAP32[(18484)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(18484)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[4733]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(18940)>>2] = 4096;
  HEAP32[(18936)>>2] = 4096;
  HEAP32[(18944)>>2] = -1;
  HEAP32[(18948)>>2] = -1;
  HEAP32[(18952)>>2] = 0;
  HEAP32[(18904)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[4733] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(18940)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(18900)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(18892)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(18904)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(18484)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (18908);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(18936)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(18892)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(18900)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(18940)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(18904)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(18904)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(18892)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(18892)>>2] = $578;
  $579 = HEAP32[(18896)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(18896)>>2] = $578;
  }
  $581 = HEAP32[(18484)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(18476)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(18476)>>2] = $$748$i;
    }
    HEAP32[(18908)>>2] = $$748$i;
    HEAP32[(18912)>>2] = $$723947$i;
    HEAP32[(18920)>>2] = 0;
    $586 = HEAP32[4733]|0;
    HEAP32[(18496)>>2] = $586;
    HEAP32[(18492)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (18500 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(18484)>>2] = $600;
    HEAP32[(18472)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(18948)>>2]|0;
    HEAP32[(18488)>>2] = $606;
   } else {
    $$024370$i = (18908);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(18472)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(18484)>>2] = $630;
       HEAP32[(18472)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(18948)>>2]|0;
       HEAP32[(18488)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(18476)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(18476)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (18908);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(18472)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(18472)>>2] = $678;
        HEAP32[(18484)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(18480)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(18468)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(18468)>>2] = $684;
         HEAP32[(18480)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[4615]|0;
            $703 = $702 & $701;
            HEAP32[4615] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (18764 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(18464)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(18464)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (18500 + ($762<<2)|0);
         $764 = HEAP32[4615]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[4615] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (18764 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(18464)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(18464)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (18908);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(18484)>>2] = $865;
    HEAP32[(18472)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(18948)>>2]|0;
    HEAP32[(18488)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(18908)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(18908)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(18908)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(18908)+12>>2]|0;
    HEAP32[(18908)>>2] = $$748$i;
    HEAP32[(18912)>>2] = $$723947$i;
    HEAP32[(18920)>>2] = 0;
    HEAP32[(18916)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (18500 + ($887<<2)|0);
      $889 = HEAP32[4615]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[4615] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (18764 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(18464)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(18464)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(18472)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(18472)>>2] = $962;
   $963 = HEAP32[(18484)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(18484)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18476)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(18480)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(18468)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[4615]|0;
     $29 = $28 & $27;
     HEAP32[4615] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (18764 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(18464)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(18464)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(18484)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(18480)>>2]|0;
  if ($95) {
   $97 = HEAP32[(18472)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(18472)>>2] = $98;
   HEAP32[(18484)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(18480)>>2] = 0;
   HEAP32[(18468)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(18468)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(18468)>>2] = $104;
   HEAP32[(18480)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[4615]|0;
     $120 = $119 & $118;
     HEAP32[4615] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (18764 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(18464)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(18464)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(18480)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(18468)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (18500 + ($180<<2)|0);
  $182 = HEAP32[4615]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[4615] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (18764 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(18464)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(18464)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(18492)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(18492)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (18916);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(18492)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(18940)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(18484)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(18472)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(18484)>>2] = $34;
  HEAP32[(18472)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(18480)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(18468)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(18468)>>2] = $storemerge1;
  HEAP32[(18480)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[4615]|0;
    $81 = $80 & $79;
    HEAP32[4615] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (18764 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(18464)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(18464)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(18480)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(18468)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[4615]|0;
     $25 = $24 & $23;
     HEAP32[4615] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (18764 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(18464)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(18464)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(18484)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(18480)>>2]|0;
  if ($87) {
   $89 = HEAP32[(18472)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(18472)>>2] = $90;
   HEAP32[(18484)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(18480)>>2] = 0;
   HEAP32[(18468)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(18468)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(18468)>>2] = $96;
   HEAP32[(18480)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[4615]|0;
     $112 = $111 & $110;
     HEAP32[4615] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (18764 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(18464)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(18464)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(18480)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(18468)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (18500 + ($172<<2)|0);
  $174 = HEAP32[4615]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[4615] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (18764 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(18464)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(18464)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18956|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_85()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_85() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5320|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 39;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _isascii($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(128);
 $2 = $1&1;
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $$ = $isdigit | $3;
 $4 = $$&1;
 return ($4|0);
}
function _isprint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -32)|0;
 $2 = ($1>>>0)<(95);
 $3 = $2&1;
 return ($3|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $not$ = ($3|0)!=($2|0);
 $4 = $not$ << 31 >> 31;
 return ($4|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_698()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___pthread_self_698() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(13969,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(13969,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 41;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 39;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 40;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 38;
   $38 = HEAP32[(18960)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((19020|0));
 return (19028|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((19020|0));
 return;
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 127]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1455]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1455]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 127]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 127]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_669($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint_670($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint_670($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((13973 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_672($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 14437;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 14437;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 14437 : (14439);
     $$$ = $238 ? $$ : (14438);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 14437;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 14437;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 14447;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_675($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 14437;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (14437 + ($208)|0);
    $$289 = $or$cond283 ? 14437 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 14437;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_675($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out_669($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_675($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_675($0,32,$$2261,$312,$$6268);
  _out_669($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_675($0,48,$$2261,$312,$314);
  _pad_675($0,48,$$$5,$310,0);
  _out_669($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_675($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg_672($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_669($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_670($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg_672($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (14489 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_86()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_675($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_669($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_669($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_676($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 14454;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (14455) : (14460);
  $$$ = $16 ? $$ : (14457);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_676($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (14489 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_675($0,32,$2,$104,$4);
    _out_669($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_675($0,48,$2,$104,$105);
    _out_669($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_675($0,48,$106,0,0);
    _out_669($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_675($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_675($0,32,$2,$320,$4);
   _out_669($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_675($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out_669($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out_669($0,14505,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out_669($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_675($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out_669($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out_669($0,14505,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out_669($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_675($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out_669($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_675($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 14473 : 14477;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 14481 : 14485;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_675($0,32,$2,$32,$33);
   _out_669($0,$$0521,$$0520);
   _out_669($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_675($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_676($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_907()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_907() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_86() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (14507 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 14595;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 14595;
  } else {
   $$01214 = 14595;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 127]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 127]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _pipe($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall42(42,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ioctl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $9;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $10;
 $11 = (___syscall54(54,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _tcsetattr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ($1>>>0)>(2);
 if ($3) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 } else {
  $5 = (($1) + 21506)|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $6 = (_ioctl($0,$5,$vararg_buffer)|0);
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=5824; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall33(33,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _getcwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $$07 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 4096;$$06 = $2;
  label = 4;
 } else {
  $4 = ($1|0)==(0);
  if ($4) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $$07 = 0;
  } else {
   $$0 = $1;$$06 = $0;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = $$06;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $7 = (___syscall183(183,($vararg_buffer|0))|0);
  $8 = (___syscall_ret($7)|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $$07 = 0;
  } else {
   $10 = ($$06|0)==($2|0);
   if ($10) {
    $11 = (___strdup($2)|0);
    $$07 = $11;
   } else {
    $$07 = $$06;
   }
  }
 }
 STACKTOP = sp;return ($$07|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$10 = $7;$13 = $4;$22 = $8;$23 = $5;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $9 = ($10<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $9;
     $12 = ($13<<24>>24)==($10<<24>>24);
     $or$cond21 = $12 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$10 = $19;$13 = $16;$22 = $20;$23 = $17;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _cfgetospeed($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4111;
 return ($3|0);
}
function _tcgetattr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21505,$vararg_buffer)|0);
 $not$ = ($2|0)!=(0);
 $$ = $not$ << 31 >> 31;
 STACKTOP = sp;return ($$|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _isatty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21523;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall54(54,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 $5 = ($4|0)==(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _sleep($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_nanosleep(($1|0),($1|0))|0);
 $4 = ($3|0)==(0);
 $5 = HEAP32[$1>>2]|0;
 $$0 = $4 ? 0 : $5;
 STACKTOP = sp;return ($$0|0);
}
function _chdir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall12(12,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pause() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall29(29,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _dup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall41(41,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _setvbuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 75|0);
 HEAP8[$4>>0] = -1;
 switch ($2|0) {
 case 2:  {
  $5 = ((($0)) + 48|0);
  HEAP32[$5>>2] = 0;
  break;
 }
 case 1:  {
  HEAP8[$4>>0] = 10;
  break;
 }
 default: {
 }
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 | 64;
 HEAP32[$0>>2] = $7;
 return 0;
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $11 = $6;
   } else {
    $11 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $12 = ($$pr|0)==(0|0);
    $13 = ($11|0)!=(0);
    if ($12) {
     $24 = $13;
    } else {
     $18 = $$pr;$23 = $13;
     label = 7;
    }
   } else {
    $10 = ($11|0)!=(0);
    $18 = $8;$23 = $10;
    label = 7;
   }
   if ((label|0) == 7) {
    $14 = ((($1)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + -8|0);
    $17 = ($18>>>0)>($16>>>0);
    if ($17) {
     $19 = $0&255;
     $20 = ((($18)) + -1|0);
     HEAP32[$7>>2] = $20;
     HEAP8[$20>>0] = $19;
     $21 = HEAP32[$1>>2]|0;
     $22 = $21 & -17;
     HEAP32[$1>>2] = $22;
     if (!($23)) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    } else {
     $24 = $23;
    }
   }
   if ($24) {
    ___unlockfile($1);
    $$1 = -1;
   } else {
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _putchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1423]|0;
 $2 = (_fputc($0,$1)|0);
 return ($2|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _strpbrk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strcspn($0,$1)|0);
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 $6 = $5 ? $3 : 0;
 return ($6|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_show_line,b0,b0,b0,_show_arg,b0,b0,b0,b0,b0,b0,b0,_show_map,_par_show,b0
,b0,b0,b0,_grep_line,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_n_proc,_c_proc,_d_proc,_i_proc,_r_proc,_inc,_dec,b1,b1,_p_write
,_p_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_readfunc,_foutch,_inc_cost,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_not_imp,_xvpSetColour,_xvpSetVBell,_set_format,_xvpSetMagic,_xvpSetRT,_xvpSetTS,_tagSetParam,_newscr,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,_xvMoveRight,_xvMoveLeft,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,_xv_decode_colour,b3,b3,b3,b3,b3,b3,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,b3,_exSubstitute,_exAmpersand,_exTilde,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,_bcksearch,_fwdsearch,b3,b3,b3,b3,b3,b3,b3,_bck_word,_fwd_word,_end_word,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,_scroll,_can_scroll,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,_do_badcmd,_do_page,_do_scroll,_do_cmd,_do_left_right,_do_target,_do_rchar,_do_operator,_do_quote,_do_csearch,_do_ins,_do_word,_do_HLM,_do_x,_do_z,b5,b5,b5,b5,b5,b5,b5,b5,b5,_closescr,_clear_all,b5,b5
,b5,b5,b5,b5,_flushout,_pbeep,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,_int_handler,_tstp_handler,_hup_handler,_term_handler,b5,b5,b5,b5,b5,_nothing,b5,b5,b5,_win_sig_handler,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,_pset_colour];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_clear_line,_xygoto
,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,_put_str,_put_char,b8,b8,b8,b8,_ins_str,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];

  return { ___errno_location: ___errno_location, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_global_libc: _emscripten_get_global_libc, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _jsvim_main_loop: _jsvim_main_loop, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__jsvim_main_loop = asm["_jsvim_main_loop"]; asm["_jsvim_main_loop"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsvim_main_loop.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _jsvim_main_loop = Module["_jsvim_main_loop"] = asm["_jsvim_main_loop"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function exit(status, implicit) {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var flush = FS.quit;
  if (flush) {
    var print = Module['print'];
    var printErr = Module['printErr'];
    var has = false;
    Module['print'] = Module['printErr'] = function(x) {
      has = true;
    }
    try { // it doesn't matter if it fails
      flush(0);
    } catch(e) {}
    Module['print'] = print;
    Module['printErr'] = printErr;
    if (has) {
      warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
    }
  }

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



