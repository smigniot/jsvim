.TH XVI 1 2.50 Unix
.nh
.rm hy
.SH NAME
xvi \- multi-file text editor
.SH SYNOPSIS
.B xvi
{
.B \-R
}
{
.B \-c
.I command
}
{
.B \-s
.I parameter-assignment
}
[
.B \-t
.I tag
|
.BI + number
|
.BI +/ pattern
]
{
.I filename
\&.\|.\|.
}
.SH DESCRIPTION
\fBXvi\fP (pronounced \fIecks-vee-eye\fP)
is a free, portable, multi-window implementation of the popular
.BR vi (1)
editor.
It has some useful enhancements, although, as described below,
not all of
.BR vi 's
features have been implemented yet, and some things work differently from
.BR vi .
.LP
This manual page describes the differences between \fBxvi\fP and
POSIX, classic \fBvi\fP and other popular \fBvi\fP clones. For a full
reference manual, see
the manual page for classic vi under http://ex-vi.sourceforge.net and
the POSIX specifications for ex and vi. For a tutorial, see
.IR "An Introduction to Display Editing with Vi" .
.SH OPTIONS
The following command-line options are available:
.TP
\fB\-R\fP
Start the editor in read-only mode.
.TP
\fB\-c\fP \fIcommand\fP
Execute \fIcommand\fP as an ex command in the first buffer
after reading input files or going to a tag.
Multiple \fB\-c\fP flags are allowed.
.TP
\fB\-s\fP \fIparameter-assignment\fP
Set the value of the specified parameter at startup.
The assignment has the same form as when given as an editor command,
i.e:
.RS
.TP
\fIname\fB=\fIstring\fP
for string parameters
.TP
\fIname\fB=\fInumber\fP
for numeric parameters
.TP
\fIname\fP
to turn a Boolean parameter on
.TP
\fBno\fP\fIname\fP
to turn a Boolean parameter off
.LP
Parameters set with
.B \-s
take their new values before opening input files or going to a tag.
.RE
.TP
\fB\-t\fP \fItag\fP
Edit the file containing the definition specified as \fItag\fP,
at the start of the definition (as per \fBvi\fP).
.TP
.BI + number
Go to the specified line number of the file being edited.
.RS
.TP
.B +$
goes to the last line,
.TP
.BI +- number
goes to the \fIn\fPth line before the last line and
.TP
.B +-
goes to the penultimate line.
.RE
.TP
\fB+\fP/\fIpattern\fP
Go to the first occurrence of the specified \fIpattern\fP within
the file being edited.
.LP
The \fB\-l\fP, \fB\-L\fP, \fB\-r\fP, \fB\-V\fP
command line options are not supported and \fB\-w\fP\fIn\fP is ignored.
.\"---------------------------------------------------------------------------
.SH ENHANCEMENTS
.SS Parameter handling
.LP
\fBXvi\fP supports 5 types of parameter:
as well as \fBvi\fP's
\fInumeric\fP,
\fIstring\fP and
\fIboolean\fP,
it also has
\fIenumerated\fP and
\fIlist\fP types.
The former is used for \fBformat\fP, \fBinfoupdate\fP, \fBjumpscroll\fP,
\fBpreserve\fP and \fBregextype\fP,
while the latter is currently only used for \fBtags\fP.
.LP
The advantage of the \fIenumerated\fP type is that if you try
to set an illegal value, the set of correct values will be displayed,
which is very useful if you have forgotten what the values may be.
(Try \fB:set preserve\fP to see an example of this.)
.LP
Like the \fB:\fP commands and parameter names, an enumerated value can also be
set by giving enough of its initial characters to uniquely identify it.
.\"---------------------------------------------------------------------------
.SS Multiple buffers and windows
.LP
\fBXvi\fP supports multiple \fIbuffers\fP and \fIwindows\fP.
A
.I buffer
is the internal object
which holds a file in memory, while a
.I window
is an area of the screen which shows part of a buffer.
Every window references a buffer, even if no file is being edited.
.LP
The following commands are
available for operating on buffers and windows:
.IP \fB:buffer\fP
create a new buffer in a new window;
can be followed by a filename, which will be edited in the new buffer.
.IP \fB:close\fP
close the current window;
will also close the buffer if this is the last window on to it.
.IP \fB:equalise\fP
make all windows as nearly the same size as possible.
.IP \fB:split\fP
create a new window on to the current buffer by
splitting the current window in half.
The two resulting windows are similar to
.I viewports
on to a single editing buffer,
in that changes made in one window are reflected in the other one.
.IP "\fB:x\fP\ /\ \fBZZ\fP"
close only the current window.
If the window is the only one on to the buffer,
the buffer will be closed as well,
writing it first if it is modified.
.IP \fBg\fP
move to the next window.
.IP \fB^W\fP
increase the size of the current window
(may be given a numeric prefix, default is one line).
.IP \fB^T\fP
decrease the size of the current window
(may be given a numeric prefix, default is one line).
.IP \fB^O\fP
make the current window as large as possible.
.IP \fB^]\fP
as for
.BR vi ,
but create a new buffer window if appropriate
(and if
.B autosplit
allows).
.LP
Note that the
.B :quit
command quits out of the editor, not out of a window.
The
.B :close
command is thus the equivalent of
.B :quit
for windows.
There
is no equivalent of
.B :x
or
.B ZZ
for the whole editor; these have been
hijacked for operations on windows.
.LP
The boolean
.B autosplit
parameter specifies whether
of buffer windows that will be created automatically whenever you
either edit more than one file, or use tags to edit a different file.
.LP
The \fBminrows\fP parameter specifies the minimum number of rows
to which a window may be shrunk, including the status line.
The default value is 2; 0 and 1 may also be useful.
.LP
Undo works per buffer, as do marks; yank/put and redo (the
.B .
command)
work over all buffers, i.e. you can delete from one buffer and put
the text into a different buffer.
.\"---------------------------------------------------------------------------
.SS "Named buffers"
.LP
As well as the normal named (conjugate) buffers, and the default one
named \fB@\fP,
several extra buffers named
.BR : ,
.BR / ,
.BR ? ,
.B !
and
.B <
contain the last command lines entered for each of the four command types
and for the last thing inserted.
So, for instance,
.B @:
will re-execute the last colon command, or you can insert
it into your buffer, edit it and then re-execute it (e.g. with
.BR dd@@ ).
.\"---------------------------------------------------------------------------
.SS "Function keys"
.LP
For keyboards with function keys, F1 displays a page of help, while
F2 to F10 produce
.B #2
to
.B #9
and
.BR #0 ,
which you can
.B :map!
or
.B :map
to phrases that you type often or to useful command sequences.
.\"---------------------------------------------------------------------------
.SS "File preservation"
.LP
Rather than use
.BR vi 's
Unix-specific method
for preservation,
.B xvi
does periodic preservation of all files
currently being edited into temporary files in the same directory.
It tries to do this when you aren't typing, so that you won't
notice the short delay when the temporary file is written out.
Obviously, only changed files are preserved in this way, and
the temporary file is removed once the real file has been successfully
written.
.LP
As an additional safety measure,
when a file is explicitly saved
and it appears not to have been preserved recently,
it is normally preserved first.
This ensures that,
even if the operating system crashes while the
real file is being created,
there should always be at least one recent copy of it in the filesystem.
The \fB:preserve\fP command is available as in \fBvi\fP to preserve
a specific buffer manually.
.LP
The level of safety provided by the preservation facility may be configured
by changing the values of the
.B preserve
and
.B preservetime
parameters.
The following values are available for
.BR preserve :
.TP
\fBunsafe\fP
Never preserve any buffer before an explicit save.
This can be useful on old, slow, floppy-only systems,
but is not generally recommended.
.TP
\fBstandard\fP
The default value.
Only preserve a buffer before an explicit save if it appears not to have
been preserved recently.
.TP
\fBsafe\fP
Always preserve buffers before they are written.
.TP
\fBparanoid\fP
As for \fBsafe\fP, but the preserve file is never removed,
even after the file has been successfully written.
.LP
.nh
In all cases,
all modified buffers are preserved automatically after no user events
have been received for
.B preservetime
seconds,
if a minimum number of events (currently 60) have been received since the
last automatic preservation.
This behaviour can be more or less disabled by setting
.B preservetime
to a very high value.
.LP
The names given to preserve files are system-dependent,
but are generally of the form ``\fIfilename\fP.tmp'',
or ``\fIfilename\fP.001'' to ``\fIfilename\fP.999''.
If a preserve file already exists, it will not be overwritten;
instead, a new filename will be generated.
.\"---------------------------------------------------------------------------
.SS "8-bit character support"
.LP
Characters with the top bit set may be displayed, although
it is not yet possible to have null
(\(fm\^\e\^0\^\(fm)
bytes in a file buffer.
How the characters are displayed varies between systems;
on UNIX, they will be shown as an octal escape sequence,
while on \%MS-DOS, OS/2 and QNX they will be shown as the actual
character in the PC character set.
This can be controlled by setting the \fBcchars\fP and \fBmchars\fP
variables; if these parameters are set,
control- and meta-characters (respectively) are shown directly,
otherwise they are shown as some sequence of printable characters.
.LP
Tabs are normally displayed as a series of spaces of the appropriate
length (according to the \fBtabstops\fP parameter);
setting \fBlist\fP mode will cause them to be displayed as control
characters, as will unsetting the \fBtabs\fP parameter.
How the tab character is displayed is then under the control of
the \fBcchars\fP parameter.
.LP
You can use the
.B ^_
(control-underscore) command to flip the
top bit of the character the cursor is on.
This may be useful on systems where it is otherwise impossible
to enter 8-bit characters.
.\"---------------------------------------------------------------------------
.SS "File formats"
.LP
.B Xvi
can read and write text files in non-Unix formats.
The current format is given by the value of the
.B format
parameter, which
may be set to "\fBunix\fP", "\fBmsdos\fP", and so on.
This means you can edit \%MS-DOS files under UNIX, etc.
To see a list of available formats, type
.IP
.B ":se fmt=?"
.LP
If the new boolean
.B autodetect
parameter is set, xvi sniffs files before reading them to determine their
newline style and sets the default file-saving newline style to that
of the file read.
.LP
It would be better if the file format were remembered separately for each file
but instead it is a single editor-wide option that applies to all open buffers.
The same could be said for the "readonly" option.
.\"---------------------------------------------------------------------------
.SS "Extended regular expressions"
.LP
.BR vi 's
.B magic
parameter is superseded by the
.B regextype
parameter,
which can take the following values:
.IP \fBtags\fP
only
.B ^
and
.B $
are significant (used for tags)
.IP \fBgrep\fP
like
.BR grep (1),
but with
.B \e\^<
and
.B \e\|\^>
added
.IP \fBegrep\fP
like
.BR egrep (1),
but with
.B \e\^<
and
.B \e\|\^>
added
.LP
The default is
.BR grep .
.LP
Note that it is still possible to set or unset \fBmagic\fP
as in \fBvi\fP; this will simply result in \fBregextype\fP
being set as appropriate.
.LP
The \fBsections\fP and \fBparagraphs\fP parameters define
.BR egrep -style
patterns to search for, rather than
.BR vi 's
simplistic (and
.BR troff -dependent)
character pairs.
.LP
A similar parameter, \fBsentences\fP, defines a pattern
for the \fB(\fP and \fB)\fP motions.
.\"---------------------------------------------------------------------------
.SS "Improved replace mode"
.LP
The
.B R
command acts more intelligently when you press return \(em
it leaves the rest of the current line alone,
and just starts
replacing text on the next line,
starting at the screen column
where you first typed
.BR R .
.\"---------------------------------------------------------------------------
.SS "Command line editing and filename completion"
.LP
While entering a `:' command or a `/' search string, as well as the usual keys,
\fBBackspace\fP to cancel the previous character,
\fB^W\fP to cancel the previous word and
\fB^U\fP to cancel the line,
.B xvi
also lets you move back and forth in the line with the arrow keys
to correct typing errors.
.LP
For file-oriented commands, the \fBTab\fP key
performs filename completion on the last word of the line, which can be the
first part of a file's name or a filename regular expressions containing
special characters \fB?\fP, \fB*\fP and maybe others, depending on your
operating system.
.\"---------------------------------------------------------------------------
.SS "Command re-execution"
.LP
As well as the normal named (conjugate) buffers,
and the default one (named
.BR @ ),
there exist several extra ones named
.BR : ,
.BR / ,
.B ?
and
.BR ! ,
which contain the last command lines typed to each of the given
commands.
So for instance,
.B @:
will re-execute the last \fBex\fP command, or you can insert
it into your buffer, edit it and then re-execute it (e.g. with
.BR dd\^@@ ).
.\"---------------------------------------------------------------------------
.SS Scrolling
When multiple windows are used,
.B xvi
normally has to be able to scroll individual windows
without scrolling the whole screen.
This can be very inefficient
on terminals
without
scrolling regions,
so the
.B jumpscroll
parameter
is provided to control the editor's scrolling behaviour.
It can be set to one of:
.TP
.B off
When the cursor moves outside a window's boundaries,
and the new position is near enough,
the window will scroll to the new position.
.TP
.B on
When the cursor moves outside a window's boundaries,
the window will always jump to the new position.
.TP
.B auto
A window will scroll only if it can do so efficiently;
otherwise it will jump.
.LP
The default value is
.BR auto .
.LP
On ISA-type systems which have memory-mapped displays,
hardware character generators
and reasonably fast processors,
.B jumpscroll
should generally be set to
.BR off ;
however,
on LCD screens or other displays with a long image persistence,
this may actually make the text more difficult to read,
and many users may be more comfortable with it turned
.BR on .
.LP
Explicit scroll commands (e.g.
.B ^D
and
.BR ^E )
are not affected by
the \fBjumpscroll\fP parameter.
.\"---------------------------------------------------------------------------
.SS Colour
.LP
There are four new parameters to control screen colours:
.TP
\fBcolour\fP
colour used for text
.TP
\fBstatuscolour\fP
colour used for status lines
.TP
\fBroscolour\fP
as
.BR statuscolour ,
but for read-only files
.TP
\fBsystemcolour\fP
colour used for system mode
(i.e. subshells and after termination)
.LP
These parameters are numeric, and the value means different
things on different operating systems.
On Unix, it is an index into the
.BR termcap (5)
entries "\fBc0\fP" to "\fBc9\fP",
which are assumed to be colour-setting
escape sequences if they are present.
If they are not present,
"\fBso\fP"
(begin standout mode)
and
"\fBse\fP"
(end standout mode)
are used instead.
Values of 0 and 1 give normal text,
whereas 2 and above give standout mode.
.LP
The default colour for the
.B roscolour
parameter will generally involve red
if colours are available;
this is intended
to provide a warning to the user that writing the file
may not be possible.
.\"---------------------------------------------------------------------------
.SS "On-line help"
.LP
A primitive help facility is available; the
.B :help
command
simply creates a new
buffer window on to a standard help file.
The name of the file which is edited
is given by the
.B helpfile
string parameter;
the default on Unix versions is
\fB"/usr/lib/xvi.help"\fP.
.LP
Note that the help file buffer will be marked "not editable"
when it is created, which prevents accidental overwriting
of the help file even when the file permissions would allow it.
.\"---------------------------------------------------------------------------
.SS "Mouse support"
.LP
Some mouse support is available for micro-based systems and workstations
.
Clicking the mouse button on:
.IP "any line outside current window"
changes current window to the one indicated by the mouse
(can be used instead of \fBg\fP).
.IP "top line of any window"
scrolls window downwards (same as \fB^Y\fP).
.IP "bottom line of any window"
scrolls window upwards (same as \fB^E\fP).
.IP "status line of any window"
shows current file and lines (same as \fB^G\fP).
.IP "any text line of any window"
moves text cursor as near as possible to mouse cursor.
.LP
Also,
windows can be resized by \*Qdragging\*U the appropriate status line
up or down with the mouse.
.\"---------------------------------------------------------------------------
.SS Miscellaneous
.LP
The command
.B :wn
(write file and edit next) is provided, as in \fBPC-vi\fP.
.LP
In insert and replace modes,
.B ^A
has the same meaning as
.B ^@
in vi, except that it
works at any time,
not just for the first character.
Also, typing
.BI ^B x
where
.I x
is the name of a conjugate buffer, inserts the contents of that
buffer into the input stream at that point.
.LP
A new parameter
.B infoupdate
(\fBiu\fP for short), when set to
.B continuous
shows the current line number on the status line as you move in the file.
Its default value of
.BR terse
just shows the filename.
.LP
When the boolean parameter
.BR tabindent
is clear (\fB:set notabindent\fI), automatic indentation does not use
tab characters and is done with spaces.
.\"---------------------------------------------------------------------------
.SH LIMITATIONS
.SS "Ex mode"
.LP
The main area in which \fBxvi\fP is lacking is \fBvi\fP's
.B ex
mode,
which is not implemented at all (and neither are \fBedit\fP, \fBe\fP,
or \fBopen\fP modes).
However, many of the \fBex\fP commands are available in
.B vi
mode
as colon commands;
the colon commands that have not been implemented
are mostly those which offer
the same functionality as other commands in \fBvi\fP mode.
.LP
In particular,
.BR abbreviate ,
.BR append ,
.BR change ,
.BR ex ,
.BR insert ,
.BR open ,
.BR recover ,
.BR unabbreviate ,
.BR write>> ,
.B z
and
.B |
have not been implemented as colon commands yet.
.\"---------------------------------------------------------------------------
.SS "Vi mode"
.LP
The
.B Q
command is inappropriate in the context of
.BR xvi ,
since there is no
.B ex
mode.
.\"---------------------------------------------------------------------------
.SS Parameters
.LP
The following parameters have not been implemented, and probably won't be:
.RS
.BR ada (vim),
.BR adapath (vim),
.BR autoprint ,
.BR directory ,
.BR edcompatible ,
.BR hardtabs ,
.BR lisp ,
.BR mesg ,
.BR modelines ,
.BR open ,
.BR optimize ,
.BR prompt ,
.BR redraw ,
.BR slowopen ,
.BR sourceany ,
.BR term ,
.BR terse ,
.BR ttytype ,
.BR window
.RE
.LP
The command
.B ":se all"
gives a complete list, with current values,
of those that have been.
.\"---------------------------------------------------------------------------
.SS Miscellaneous
.LP
It is not possible to interrupt the editor while it is
performing certain operations.
If you start off a big global command, you have to wait for it to finish.
.LP
Flags and counts after \fBex\fP mode commands are not supported.
.LP
The
.B :substitute
command does not support splitting of lines.
.LP
Regular expressions, although implemented (see above),
do not support the \fB~\fP metacharacter on the left hand side.
.LP
The \fB:global\fP command only supports the commands [\fBlps&~d\fP].
.LP
.B Undo
does not work properly when applied to macros (either \fB@\fP
or \fB:map\fP); it should undo all the changes made by the macro,
but in fact only the last command within the macro is undone.
.SH "OTHER DIFFERENCES FROM VI"
The
.B XVINIT
environment variable is read instead of
.BR EXINIT .
Whilst no files are sourced
automatically,
users who wish to have a startup file can arrange it very easily.
.BR sh (1)
or
.BR ksh (1)
users should add this line to their
.BR "$HOME/.profile" :
.IP
.BI "XVINIT=\(fmsource " xvi-startup-file "\(fm; export XVINIT"
.LP
.BR csh (1)
users should add this to their
.BR "$HOME/.login" :
.IP
.BI "setenv XVINIT \(fmsource " xvi-startup-file \(fm
.LP
and \%MS-DOS users should add this to their
.BR autoexec.bat :
.IP
.BI "set XVINIT=source" xvi-startup-file
.LP
The \fBtags\fP parameter can be used to specify multiple tags files;
these can be separated by either
``\^\e\ \|''
(backslash space) or
``,''
(comma).
.LP
Alternate files are handled slightly differently,
owing to the presence of buffer and window handling.
Essentially, when you close a buffer, its filename
is remembered as the alternate file;
when you invoke the \fB^^\fP or \fB:e\ #\fP commands,
this file is re-edited.
Note that \fB^^\fP edits the alternate file in a new buffer window,
if \fBautosplit\fP allows.
.SH "FILES"
.DS
.ta 1.5i
\fB/usr/lib/xvi.help\fP	Default help file.
.DE
.SH "SEE ALSO"
.BR ex (1),
.BR vi (1),
.BR termcap (5).
.SH BUGS
See also http://github.com/martinwguy/xvi/issues
.IP \(bu
Most
.BR termcap (5)
terminal descriptions are only tested with
.BR vi (1)
(and possibly
.BR rogue (6)).
Since
.B xvi
is, in some ways, more demanding than
.B vi
in its use of
.B termcap
capabilities, it sometimes exposes bugs or inadequacies in
.B termcap
entries.
This applies especially to scrolling regions.
.SH AVAILABILITY
.LP
.B Xvi
has been ported to \%MS-DOS, OS/2, QNX, Atari ST, Amiga
and many different versions of Unix.
Downloads are available under http://xvi.sf.net and
the source code is maintained at http://github.com/martinwguy/xvi
.SH AUTHORS
.LP
Chris and John Downey.
.LP
Derived from STEVIE, written by Tim Thompson and Tony Andrews.
